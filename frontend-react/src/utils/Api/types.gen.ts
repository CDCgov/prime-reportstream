// This file is auto-generated by @hey-api/openapi-ts

export interface HttpResponseMessage {
    statusCode?: number;
    body?: Record<string, unknown>;
    status?: HttpStatusType;
}

export type HttpStatusType = Record<string, unknown>;

export interface HttpRequestMessageString {
    queryParameters?: Record<string, string>;
    body?: string;
    httpMethod?:
        | "GET"
        | "HEAD"
        | "POST"
        | "PUT"
        | "DELETE"
        | "CONNECT"
        | "OPTIONS"
        | "TRACE"
        | "PATCH";
    headers?: Record<string, string>;
    uri?: string;
}

export interface Resource {
    resourceType:
        | "Account"
        | "ActivityDefinition"
        | "AdministrableProductDefinition"
        | "AdverseEvent"
        | "AllergyIntolerance"
        | "Appointment"
        | "AppointmentResponse"
        | "AuditEvent"
        | "Basic"
        | "Binary"
        | "BiologicallyDerivedProduct"
        | "BodyStructure"
        | "Bundle"
        | "CapabilityStatement"
        | "CarePlan"
        | "CareTeam"
        | "CatalogEntry"
        | "ChargeItem"
        | "ChargeItemDefinition"
        | "Citation"
        | "Claim"
        | "ClaimResponse"
        | "ClinicalImpression"
        | "ClinicalUseDefinition"
        | "CodeSystem"
        | "Communication"
        | "CommunicationRequest"
        | "CompartmentDefinition"
        | "Composition"
        | "ConceptMap"
        | "Condition"
        | "Consent"
        | "Contract"
        | "Coverage"
        | "CoverageEligibilityRequest"
        | "CoverageEligibilityResponse"
        | "DetectedIssue"
        | "Device"
        | "DeviceDefinition"
        | "DeviceMetric"
        | "DeviceRequest"
        | "DeviceUseStatement"
        | "DiagnosticReport"
        | "DocumentManifest"
        | "DocumentReference"
        | "DomainResource"
        | "Encounter"
        | "Endpoint"
        | "EnrollmentRequest"
        | "EnrollmentResponse"
        | "EpisodeOfCare"
        | "EventDefinition"
        | "Evidence"
        | "EvidenceReport"
        | "EvidenceVariable"
        | "ExampleScenario"
        | "ExplanationOfBenefit"
        | "FamilyMemberHistory"
        | "Flag"
        | "Goal"
        | "GraphDefinition"
        | "Group"
        | "GuidanceResponse"
        | "HealthcareService"
        | "ImagingStudy"
        | "Immunization"
        | "ImmunizationEvaluation"
        | "ImmunizationRecommendation"
        | "ImplementationGuide"
        | "Ingredient"
        | "InsurancePlan"
        | "Invoice"
        | "Library"
        | "Linkage"
        | "List"
        | "Location"
        | "ManufacturedItemDefinition"
        | "Measure"
        | "MeasureReport"
        | "Media"
        | "Medication"
        | "MedicationAdministration"
        | "MedicationDispense"
        | "MedicationKnowledge"
        | "MedicationRequest"
        | "MedicationStatement"
        | "MedicinalProductDefinition"
        | "MessageDefinition"
        | "MessageHeader"
        | "MolecularSequence"
        | "NamingSystem"
        | "NutritionOrder"
        | "NutritionProduct"
        | "Observation"
        | "ObservationDefinition"
        | "OperationDefinition"
        | "OperationOutcome"
        | "Organization"
        | "OrganizationAffiliation"
        | "PackagedProductDefinition"
        | "Parameters"
        | "Patient"
        | "PaymentNotice"
        | "PaymentReconciliation"
        | "Person"
        | "PlanDefinition"
        | "Practitioner"
        | "PractitionerRole"
        | "Procedure"
        | "Provenance"
        | "Questionnaire"
        | "QuestionnaireResponse"
        | "RegulatedAuthorization"
        | "RelatedPerson"
        | "RequestGroup"
        | "ResearchDefinition"
        | "ResearchElementDefinition"
        | "ResearchStudy"
        | "ResearchSubject"
        | "Resource"
        | "RiskAssessment"
        | "Schedule"
        | "SearchParameter"
        | "ServiceRequest"
        | "Slot"
        | "Specimen"
        | "SpecimenDefinition"
        | "StructureDefinition"
        | "StructureMap"
        | "Subscription"
        | "SubscriptionStatus"
        | "SubscriptionTopic"
        | "Substance"
        | "SubstanceDefinition"
        | "SupplyDelivery"
        | "SupplyRequest"
        | "Task"
        | "TerminologyCapabilities"
        | "TestReport"
        | "TestScript"
        | "ValueSet"
        | "VerificationResult"
        | "VisionPrescription";
    /**
     * The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
     */
    id?: string;
    /**
     * The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
     */
    meta?: Meta;
    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    implicitRules?: string;
    /**
     * The base language in which the resource is written.
     */
    language?: string;
}

export type DomainResource = Resource & {
    /**
     * A human&ndash;readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    text?: Narrative;
    contained?: Resource[];
    extension?: Extension[];
    modifierExtension?: Extension[];
};

export type Bundle = Resource & {
    /**
     * A persistent identifier for the bundle that won't change as a bundle is copied from server to server.
     */
    identifier?: Identifier;
    /**
     * Indicates the purpose of this bundle &ndash; how it is intended to be used.
     */
    type: string;
    /**
     * The date/time that the bundle was assembled &ndash; i.e. when the resources were placed in the bundle.
     */
    timestamp?: string;
    /**
     * If a set of search matches, this is the total number of entries of type 'match' across all pages in the search.  It does not include search.mode = 'include' or 'outcome' entries and it does not provide a count of the number of entries in the Bundle.
     */
    total?: number;
    link?: Bundle_Link[];
    entry?: Bundle_Entry[];
    /**
     * Digital Signature &ndash; base64 encoded. XML&ndash;DSig or a JWT.
     */
    signature?: Signature;
};

export type Bundle_Link = BackboneElement & {
    /**
     * A name which details the functional use for this link &ndash; see [http://www.iana.org/assignments/link&ndash;relations/link&ndash;relations.xhtml#link&ndash;relations&ndash;1](http://www.iana.org/assignments/link&ndash;relations/link&ndash;relations.xhtml#link&ndash;relations&ndash;1).
     */
    relation: string;
    /**
     * The reference details for the link.
     */
    url: string;
};

export type Bundle_Entry = BackboneElement & {
    link?: Bundle_Link[];
    /**
     * The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id in the resource &ndash; i.e. if the fullUrl is not a urn:uuid, the URL shall be version&ndash;independent URL consistent with the Resource.id. The fullUrl is a version independent reference to the resource. The fullUrl element SHALL have a value except that:
     * * fullUrl can be empty on a POST (although it does not need to when specifying a temporary id for reference in the bundle)
     * * Results from operations might involve resources that are not identified.
     */
    fullUrl?: string;
    /**
     * The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type.
     */
    resource?: Resource;
    /**
     * Information about the search process that lead to the creation of this entry.
     */
    search?: Bundle_Entry_Search;
    /**
     * Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.
     */
    request?: Bundle_Entry_Request;
    /**
     * Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.
     */
    response?: Bundle_Entry_Response;
};

export type Bundle_Entry_Request = BackboneElement & {
    /**
     * In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred.
     */
    method: string;
    /**
     * The URL for this entry, relative to the root (the address to which the request is posted).
     */
    url: string;
    /**
     * If the ETag values match, return a 304 Not Modified status. See the API documentation for ["Conditional Read"](http.html#cread).
     */
    ifNoneMatch?: string;
    /**
     * Only perform the operation if the last updated date matches. See the API documentation for ["Conditional Read"](http.html#cread).
     */
    ifModifiedSince?: string;
    /**
     * Only perform the operation if the Etag value matches. For more information, see the API section ["Managing Resource Contention"](http.html#concurrency).
     */
    ifMatch?: string;
    /**
     * Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for ["Conditional Create"](http.html#ccreate). This is just the query portion of the URL &ndash; what follows the "?" (not including the "?").
     */
    ifNoneExist?: string;
};

export type Bundle_Entry_Response = BackboneElement & {
    /**
     * The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.
     */
    status: string;
    /**
     * The location header created by processing this operation, populated if the operation returns a location.
     */
    location?: string;
    /**
     * The Etag for the resource, if the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)).
     */
    etag?: string;
    /**
     * The date/time that the resource was modified on the server.
     */
    lastModified?: string;
    /**
     * An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction.
     */
    outcome?: Resource;
};

export type Bundle_Entry_Search = BackboneElement & {
    /**
     * Why this entry is in the result set &ndash; whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
     */
    mode?: string;
    /**
     * When searching, the server's search ranking score for the entry.
     */
    score?: number;
};

export type CapabilityStatement = DomainResource & {
    /**
     * An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this capability statement is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the capability statement is stored on different servers.
     */
    url?: string;
    /**
     * The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the capability statement.
     */
    title?: string;
    /**
     * The status of this capability statement. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the capability statement was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes.
     */
    date: string;
    /**
     * The name of the organization or individual that published the capability statement.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this capability statement is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
     */
    copyright?: string;
    /**
     * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
     */
    kind: string;
    instantiates?: string[];
    imports?: string[];
    /**
     * Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
     */
    software?: CapabilityStatement_Software;
    /**
     * Identifies a specific implementation instance that is described by the capability statement &ndash; i.e. a particular installation, rather than the capabilities of a software program.
     */
    implementation?: CapabilityStatement_Implementation;
    /**
     * The version of the FHIR specification that this CapabilityStatement describes (which SHALL be the same as the FHIR version of the CapabilityStatement itself). There is no default value.
     */
    fhirVersion: string;
    format: string[];
    patchFormat?: string[];
    implementationGuide?: string[];
    rest?: CapabilityStatement_Rest[];
    messaging?: CapabilityStatement_Messaging[];
    document?: CapabilityStatement_Document[];
};

export type CapabilityStatement_Software = BackboneElement & {
    /**
     * Name the software is known by.
     */
    name: string;
    /**
     * The version identifier for the software covered by this statement.
     */
    version?: string;
    /**
     * Date this version of the software was released.
     */
    releaseDate?: string;
};

export type CapabilityStatement_Implementation = BackboneElement & {
    /**
     * Information about the specific installation that this capability statement relates to.
     */
    description: string;
    /**
     * An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
     */
    url?: string;
    /**
     * The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
     */
    custodian?: Reference;
};

export type CapabilityStatement_Rest = BackboneElement & {
    /**
     * Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
     */
    mode: string;
    /**
     * Information about the system's restful capabilities that apply across all applications, such as security.
     */
    documentation?: string;
    /**
     * Information about security implementation from an interface perspective &ndash; what a client needs to know.
     */
    security?: CapabilityStatement_Rest_Security;
    resource?: CapabilityStatement_Rest_Resource[];
    interaction?: CapabilityStatement_Rest_Interaction[];
    searchParam?: CapabilityStatement_Rest_Resource_SearchParam[];
    operation?: CapabilityStatement_Rest_Resource_Operation[];
    compartment?: string[];
};

export type CapabilityStatement_Rest_Security = BackboneElement & {
    /**
     * Server adds CORS headers when responding to requests &ndash; this enables Javascript applications to use the server.
     */
    cors?: boolean;
    service?: CodeableConcept[];
    /**
     * General description of how security works.
     */
    description?: string;
};

export type CapabilityStatement_Rest_Resource = BackboneElement & {
    /**
     * A type of resource exposed via the restful interface.
     */
    type: string;
    /**
     * A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile&ndash;uses).
     */
    profile?: string;
    supportedProfile?: string[];
    /**
     * Additional information about the resource type used by the system.
     */
    documentation?: string;
    interaction?: CapabilityStatement_Rest_Resource_Interaction[];
    /**
     * This field is set to no&ndash;version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta&ndash;property on resources. If the value is 'versioned&ndash;update', then the server supports all the versioning features, including using e&ndash;tags for version integrity in the API.
     */
    versioning?: string;
    /**
     * A flag for whether the server is able to return past versions as part of the vRead operation.
     */
    readHistory?: boolean;
    /**
     * A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
     */
    updateCreate?: boolean;
    /**
     * A flag that indicates that the server supports conditional create.
     */
    conditionalCreate?: boolean;
    /**
     * A code that indicates how the server supports conditional read.
     */
    conditionalRead?: string;
    /**
     * A flag that indicates that the server supports conditional update.
     */
    conditionalUpdate?: boolean;
    /**
     * A code that indicates how the server supports conditional delete.
     */
    conditionalDelete?: string;
    referencePolicy?: string[];
    searchInclude?: string[];
    searchRevInclude?: string[];
    searchParam?: CapabilityStatement_Rest_Resource_SearchParam[];
    operation?: CapabilityStatement_Rest_Resource_Operation[];
};

export type CapabilityStatement_Rest_Resource_Interaction = BackboneElement & {
    /**
     * Coded identifier of the operation, supported by the system resource.
     */
    code: string;
    /**
     * Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre&ndash;authorized certificates only'.
     */
    documentation?: string;
};

export type CapabilityStatement_Rest_Resource_SearchParam = BackboneElement & {
    /**
     * The name of the search parameter used in the interface.
     */
    name: string;
    /**
     * An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter&ndash;definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
     */
    definition?: string;
    /**
     * The type of value a search parameter refers to, and how the content is interpreted.
     */
    type: string;
    /**
     * This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
     */
    documentation?: string;
};

export type CapabilityStatement_Rest_Resource_Operation = BackboneElement & {
    /**
     * The name of the operation or query. For an operation, this is the name  prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called.
     */
    name: string;
    /**
     * Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet&ndash;expand```), that means it supports the full capabilities of the operation &ndash; e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.
     */
    definition: string;
    /**
     * Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance&ndash;level invocation of the operation.
     */
    documentation?: string;
};

export type CapabilityStatement_Rest_Interaction = BackboneElement & {
    /**
     * Coded identifier of the operation, supported by the system resource.
     */
    code: string;
    /**
     * Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre&ndash;authorized certificates only'.
     */
    documentation?: string;
};

export type CapabilityStatement_Messaging = BackboneElement & {
    endpoint?: CapabilityStatement_Messaging_Endpoint[];
    /**
     * Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
     */
    reliableCache?: number;
    /**
     * Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.
     */
    documentation?: string;
    supportedMessage?: CapabilityStatement_Messaging_SupportedMessage[];
};

export type CapabilityStatement_Messaging_Endpoint = BackboneElement & {
    /**
     * A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
     */
    protocol: Coding;
    /**
     * The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.
     */
    address: string;
};

export type CapabilityStatement_Messaging_SupportedMessage = BackboneElement & {
    /**
     * The mode of this event declaration &ndash; whether application is sender or receiver.
     */
    mode: string;
    /**
     * Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.
     */
    definition: string;
};

export type CapabilityStatement_Document = BackboneElement & {
    /**
     * Mode of this document declaration &ndash; whether an application is a producer or consumer.
     */
    mode: string;
    /**
     * A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.
     */
    documentation?: string;
    /**
     * A profile on the document Bundle that constrains which resources are present, and their contents.
     */
    profile: string;
};

export type OperationOutcome = DomainResource & {
    issue: OperationOutcome_Issue[];
};

export type OperationOutcome_Issue = BackboneElement & {
    /**
     * Indicates whether the issue indicates a variation from successful processing.
     */
    severity: string;
    /**
     * Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.
     */
    code: string;
    /**
     * Additional details about the error. This may be a text description of the error or a system code that identifies the error.
     */
    details?: CodeableConcept;
    /**
     * Additional diagnostic information about the issue.
     */
    diagnostics?: string;
    location?: string[];
    expression?: string[];
};

export type Parameters = Resource & {
    parameter?: Parameters_Parameter[];
};

export type Account = DomainResource & {
    identifier?: Identifier[];
    /**
     * Indicates whether the account is presently used/usable or not.
     */
    status: string;
    /**
     * Categorizes the account for reporting and searching purposes.
     */
    type?: CodeableConcept;
    /**
     * Name used for the account when displaying it to humans in reports, etc.
     */
    name?: string;
    subject?: Reference[];
    /**
     * The date range of services associated with this account.
     */
    servicePeriod?: Period;
    coverage?: Account_Coverage[];
    /**
     * Indicates the service area, hospital, department, etc. with responsibility for managing the Account.
     */
    owner?: Reference;
    /**
     * Provides additional information about what the account tracks and how it is used.
     */
    description?: string;
    guarantor?: Account_Guarantor[];
    /**
     * Reference to a parent Account.
     */
    partOf?: Reference;
};

export type Account_Coverage = BackboneElement & {
    /**
     * The party(s) that contribute to payment (or part of) of the charges applied to this account (including self&ndash;pay).
     *
     * A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
     */
    coverage: Reference;
    /**
     * The priority of the coverage in the context of this account.
     */
    priority?: number;
};

export type Account_Guarantor = BackboneElement & {
    /**
     * The entity who is responsible.
     */
    party: Reference;
    /**
     * A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
     */
    onHold?: boolean;
    /**
     * The timeframe during which the guarantor accepts responsibility for the account.
     */
    period?: Period;
};

export interface Element {
    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    id?: string;
    extension?: Extension[];
}

export type BackboneElement = Element & {
    modifierExtension?: Extension[];
};

export type Address = Element & {
    /**
     * The purpose of this address.
     */
    use?: string;
    /**
     * Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care&ndash;of addresses). Most addresses are both.
     */
    type?: string;
    /**
     * Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
     */
    text?: string;
    line?: string[];
    /**
     * The name of the city, town, suburb, village or other community or delivery center.
     */
    city?: string;
    /**
     * The name of the administrative area (county).
     */
    district?: string;
    /**
     * Sub&ndash;unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
     */
    state?: string;
    /**
     * A postal code designating a region defined by the postal service.
     */
    postalCode?: string;
    /**
     * Country &ndash; a nation as commonly understood or generally accepted.
     */
    country?: string;
    /**
     * Time period when address was/is in use.
     */
    period?: Period;
};

export type Age = Quantity & unknown;

export type Annotation = Element & {
    /**
     * The individual responsible for making the annotation.
     */
    authorReference?: Reference;
    /**
     * The individual responsible for making the annotation.
     */
    authorString?: string;
    /**
     * Indicates when this particular annotation was made.
     */
    time?: string;
    /**
     * The text of the annotation in markdown format.
     */
    text: string;
};

export type Attachment = Element & {
    /**
     * Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
     */
    contentType?: string;
    /**
     * The human language of the content. The value can be any valid value according to BCP 47.
     */
    language?: string;
    /**
     * The actual data of the attachment &ndash; a sequence of bytes, base64 encoded.
     */
    data?: string;
    /**
     * A location where the data can be accessed.
     */
    url?: string;
    /**
     * The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
     */
    size?: number;
    /**
     * The calculated hash of the data using SHA&ndash;1. Represented using base64.
     */
    hash?: string;
    /**
     * A label or set of text to display in place of the data.
     */
    title?: string;
    /**
     * The date that the attachment was first created.
     */
    creation?: string;
};

export type CodeableConcept = Element & {
    coding?: Coding[];
    /**
     * A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
     */
    text?: string;
};

export type CodeableReference = Element & {
    /**
     * A reference to a concept &ndash; e.g. the information is identified by its general class to the degree of precision found in the terminology.
     */
    concept?: CodeableConcept;
    /**
     * A reference to a resource the provides exact details about the information being referenced.
     */
    reference?: Reference;
};

export type Coding = Element & {
    /**
     * The identification of the code system that defines the meaning of the symbol in the code.
     */
    system?: string;
    /**
     * The version of the code system which was used when choosing this code. Note that a well&ndash;maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
     */
    version?: string;
    /**
     * A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post&ndash;coordination).
     */
    code?: string;
    /**
     * A representation of the meaning of the code in the system, following the rules of the system.
     */
    display?: string;
    /**
     * Indicates that this coding was chosen by a user directly &ndash; e.g. off a pick list of available items (codes or displays).
     */
    userSelected?: boolean;
};

export type ContactPoint = Element & {
    /**
     * Telecommunications form for contact point &ndash; what communications system is required to make use of the contact.
     */
    system?: string;
    /**
     * The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
     */
    value?: string;
    /**
     * Identifies the purpose for the contact point.
     */
    use?: string;
    /**
     * Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
     */
    rank?: number;
    /**
     * Time period when the contact point was/is in use.
     */
    period?: Period;
};

export type Count = Quantity & unknown;

export type Distance = Quantity & unknown;

export type Duration = Quantity & unknown;

export type HumanName = Element & {
    /**
     * Identifies the purpose for this name.
     */
    use?: string;
    /**
     * Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
     */
    text?: string;
    /**
     * The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
     */
    family?: string;
    given?: string[];
    prefix?: string[];
    suffix?: string[];
    /**
     * Indicates the period of time when this name was valid for the named person.
     */
    period?: Period;
};

export type Identifier = Element & {
    /**
     * The purpose of this identifier.
     */
    use?: string;
    /**
     * A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
     */
    type?: CodeableConcept;
    /**
     * Establishes the namespace for the value &ndash; that is, a URL that describes a set values that are unique.
     */
    system?: string;
    /**
     * The portion of the identifier typically relevant to the user and which is unique within the context of the system.
     */
    value?: string;
    /**
     * Time period during which identifier is/was valid for use.
     */
    period?: Period;
    /**
     * Organization that issued/manages the identifier.
     */
    assigner?: Reference;
};

export type Money = Element & {
    /**
     * Numerical value (with implicit precision).
     */
    value?: number;
    /**
     * ISO 4217 Currency Code.
     */
    currency?: string;
};

export type MoneyQuantity = Quantity & unknown;

export type Period = Element & {
    /**
     * The start of the period. The boundary is inclusive.
     */
    start?: string;
    /**
     * The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
     */
    end?: string;
};

export type Quantity = Element & {
    /**
     * The value of the measured amount. The value includes an implicit precision in the presentation of the value.
     */
    value?: number;
    /**
     * How the value should be understood and represented &ndash; whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
     */
    comparator?: string;
    /**
     * A human&ndash;readable form of the unit.
     */
    unit?: string;
    /**
     * The identification of the system that provides the coded form of the unit.
     */
    system?: string;
    /**
     * A computer processable form of the unit in some unit representation system.
     */
    code?: string;
};

export type Range = Element & {
    /**
     * The low limit. The boundary is inclusive.
     */
    low?: SimpleQuantity;
    /**
     * The high limit. The boundary is inclusive.
     */
    high?: SimpleQuantity;
};

export type Ratio = Element & {
    /**
     * The value of the numerator.
     */
    numerator?: Quantity;
    /**
     * The value of the denominator.
     */
    denominator?: Quantity;
};

export type RatioRange = Element & {
    /**
     * The value of the low limit numerator.
     */
    lowNumerator?: SimpleQuantity;
    /**
     * The value of the high limit numerator.
     */
    highNumerator?: SimpleQuantity;
    /**
     * The value of the denominator.
     */
    denominator?: SimpleQuantity;
};

export type Reference = Element & {
    /**
     * A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
     */
    reference?: string;
    /**
     * The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.
     *
     * The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
     */
    type?: string;
    /**
     * An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
     */
    identifier?: Identifier;
    /**
     * Plain text narrative that identifies the resource in addition to the resource reference.
     */
    display?: string;
};

export type SampledData = Element & {
    /**
     * The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
     */
    origin: SimpleQuantity;
    /**
     * The length of time between sampling times, measured in milliseconds.
     */
    period: number;
    /**
     * A correction factor that is applied to the sampled data points before they are added to the origin.
     */
    factor?: number;
    /**
     * The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
     */
    lowerLimit?: number;
    /**
     * The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
     */
    upperLimit?: number;
    /**
     * The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced &ndash; all the sample points for a point in time will be recorded at once.
     */
    dimensions: number;
    /**
     * A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
     */
    data?: string;
};

export type SimpleQuantity = Quantity & unknown;

export type Signature = Element & {
    type: Coding[];
    /**
     * When the digital signature was signed.
     */
    when: string;
    /**
     * A reference to an application&ndash;usable description of the identity that signed  (e.g. the signature used their private key).
     */
    who: Reference;
    /**
     * A reference to an application&ndash;usable description of the identity that is represented by the signature.
     */
    onBehalfOf?: Reference;
    /**
     * A mime type that indicates the technical format of the target resources signed by the signature.
     */
    targetFormat?: string;
    /**
     * A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image* for a graphical image of a signature, etc.
     */
    sigFormat?: string;
    /**
     * The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
     */
    data?: string;
};

export type Timing = BackboneElement & {
    event?: string[];
    /**
     * A set of rules that describe when the event is scheduled.
     */
    repeat?: Timing_Repeat;
    /**
     * A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
     */
    code?: CodeableConcept;
};

export type Timing_Repeat = BackboneElement & {
    /**
     * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
     */
    boundsDuration?: Duration;
    /**
     * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
     */
    boundsRange?: Range;
    /**
     * Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
     */
    boundsPeriod?: Period;
    /**
     * A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
     */
    count?: number;
    /**
     * If present, indicates that the count is a range &ndash; so to perform the action between [count] and [countMax] times.
     */
    countMax?: number;
    /**
     * How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
     */
    duration?: number;
    /**
     * If present, indicates that the duration is a range &ndash; so to perform the action between [duration] and [durationMax] time length.
     */
    durationMax?: number;
    /**
     * The units of time for the duration, in UCUM units.
     */
    durationUnit?: string;
    /**
     * The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
     */
    frequency?: number;
    /**
     * If present, indicates that the frequency is a range &ndash; so to repeat between [frequency] and [frequencyMax] times within the period or period range.
     */
    frequencyMax?: number;
    /**
     * Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
     */
    period?: number;
    /**
     * If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3&ndash;5 days.
     */
    periodMax?: number;
    /**
     * The units of time for the period in UCUM units.
     */
    periodUnit?: string;
    dayOfWeek?: string[];
    timeOfDay?: string[];
    when?: string[];
    /**
     * The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
     */
    offset?: number;
};

export type ContactDetail = Element & {
    /**
     * The name of an individual to contact.
     */
    name?: string;
    telecom?: ContactPoint[];
};

export type RelatedArtifact = Element & {
    /**
     * The type of relationship to the related artifact.
     */
    type: string;
    /**
     * A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
     */
    label?: string;
    /**
     * A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
     */
    display?: string;
    /**
     * A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
     */
    citation?: string;
    /**
     * A url for the artifact that can be followed to access the actual content.
     */
    url?: string;
    /**
     * The document being referenced, represented as an attachment. This is exclusive with the resource element.
     */
    document?: Attachment;
    /**
     * The related resource, such as a library, value set, profile, or other knowledge resource.
     */
    resource?: string;
};

export type UsageContext = Element & {
    /**
     * A code that identifies the type of context being specified by this usage context.
     */
    code: Coding;
    /**
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueQuantity?: Quantity;
    /**
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueRange?: Range;
    /**
     * A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
     */
    valueReference?: Reference;
};

export type Meta = Element & {
    /**
     * The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.
     */
    versionId?: string;
    /**
     * When the resource last changed &ndash; e.g. when the version changed.
     */
    lastUpdated?: string;
    /**
     * A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.
     */
    source?: string;
    profile?: string[];
    security?: Coding[];
    tag?: Coding[];
};

export type Narrative = Element & {
    /**
     * The status of the narrative &ndash; whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
     */
    status: string;
    /**
     * The actual narrative content, a stripped down version of XHTML.
     */
    div: string;
};

export type Extension = Element & {
    /**
     * Source of the definition for the extension code &ndash; a logical name or a URL.
     */
    url: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueBase64Binary?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueBoolean?: boolean;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCanonical?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCode?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDate?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDateTime?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDecimal?: number;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueId?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueInstant?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueInteger?: number;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueMarkdown?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueOid?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valuePositiveInt?: number;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueString?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueTime?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUnsignedInt?: number;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUri?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUrl?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUuid?: string;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAddress?: Address;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAge?: Age;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAnnotation?: Annotation;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueAttachment?: Attachment;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCodeableReference?: CodeableReference;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCoding?: Coding;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueContactPoint?: ContactPoint;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueCount?: Count;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDistance?: Distance;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueDuration?: Duration;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueHumanName?: HumanName;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueIdentifier?: Identifier;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueMoney?: Money;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valuePeriod?: Period;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueQuantity?: Quantity;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRange?: Range;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRatio?: Ratio;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRatioRange?: RatioRange;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueReference?: Reference;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueSampledData?: SampledData;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueSignature?: Signature;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueTiming?: Timing;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueContactDetail?: ContactDetail;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    valueUsageContext?: UsageContext;
};

export type ActivityDefinition = DomainResource & {
    /**
     * An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this activity definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the activity definition is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non&ndash;experimental active assets.
     */
    version?: string;
    /**
     * A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the activity definition.
     */
    title?: string;
    /**
     * An explanatory or alternate title for the activity definition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * The status of this activity definition. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     */
    subjectReference?: Reference;
    /**
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the activity being defined.  Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     */
    subjectCanonical?: string;
    /**
     * The date  (and optionally time) when the activity definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the activity definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the activity definition from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this activity definition is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A detailed description of how the activity definition is used from a clinical perspective.
     */
    usage?: string;
    /**
     * A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
     */
    copyright?: string;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the activity definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    topic?: CodeableConcept[];
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    relatedArtifact?: RelatedArtifact[];
    library?: string[];
    /**
     * A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest. Typically, but not always, this is a Request resource.
     */
    kind?: string;
    /**
     * A profile to which the target of the activity definition is expected to conform.
     */
    profile?: string;
    /**
     * Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.
     */
    code?: CodeableConcept;
    /**
     * Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
     */
    intent?: string;
    /**
     * Indicates how quickly the activity  should be addressed with respect to other requests.
     */
    priority?: string;
    /**
     * Set this to true if the definition is to indicate that a particular activity should NOT be performed. If true, this element should be interpreted to reinforce a negative coding. For example NPO as a code with a doNotPerform of true would still indicate to NOT perform the action.
     */
    doNotPerform?: boolean;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingTiming?: Timing;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingDateTime?: string;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingAge?: Age;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingPeriod?: Period;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingRange?: Range;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    timingDuration?: Duration;
    /**
     * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
     */
    location?: Reference;
    participant?: ActivityDefinition_Participant[];
    /**
     * Identifies the food, drug or other product being consumed or supplied in the activity.
     */
    productReference?: Reference;
    /**
     * Identifies the food, drug or other product being consumed or supplied in the activity.
     */
    productCodeableConcept?: CodeableConcept;
    /**
     * Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
     */
    quantity?: SimpleQuantity;
    dosage?: Dosage[];
    bodySite?: CodeableConcept[];
    specimenRequirement?: Reference[];
    observationRequirement?: Reference[];
    observationResultRequirement?: Reference[];
    /**
     * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
     */
    transform?: string;
    dynamicValue?: ActivityDefinition_DynamicValue[];
};

export type ActivityDefinition_DynamicValue = BackboneElement & {
    /**
     * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolveable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub&ndash;elements, as well as indexers ([x]) to traverse multiple&ndash;cardinality sub&ndash;elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     */
    path: string;
    /**
     * An expression specifying the value of the customized element.
     */
    expression: Expression;
};

export type ActivityDefinition_Participant = BackboneElement & {
    /**
     * The type of participant in the action.
     */
    type: string;
    /**
     * The role the participant should play in performing the described action.
     */
    role?: CodeableConcept;
};

export type Expression = Element & {
    /**
     * A brief, natural language description of the condition that effectively communicates the intended semantics.
     */
    description?: string;
    /**
     * A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
     */
    name?: string;
    /**
     * The media type of the language for the expression.
     */
    language: string;
    /**
     * An expression in the specified language that returns a value.
     */
    expression?: string;
    /**
     * A URI that defines where the expression is found.
     */
    reference?: string;
};

export type ParameterDefinition = Element & {
    /**
     * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
     */
    name?: string;
    /**
     * Whether the parameter is input or output for the module.
     */
    use: string;
    /**
     * The minimum number of times this parameter SHALL appear in the request or response.
     */
    min?: number;
    /**
     * The maximum number of times this element is permitted to appear in the request or response.
     */
    max?: string;
    /**
     * A brief discussion of what the parameter is for and how it is used by the module.
     */
    documentation?: string;
    /**
     * The type of the parameter.
     */
    type: string;
    /**
     * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
     */
    profile?: string;
};

export type Dosage = BackboneElement & {
    /**
     * Indicates the order in which the dosage instructions should be applied or interpreted.
     */
    sequence?: number;
    /**
     * Free text dosage instructions e.g. SIG.
     */
    text?: string;
    additionalInstruction?: CodeableConcept[];
    /**
     * Instructions in terms that are understood by the patient or consumer.
     */
    patientInstruction?: string;
    /**
     * When medication should be administered.
     */
    timing?: Timing;
    /**
     * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
     */
    asNeededBoolean?: boolean;
    /**
     * Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
     */
    asNeededCodeableConcept?: CodeableConcept;
    /**
     * Body site to administer to.
     */
    site?: CodeableConcept;
    /**
     * How drug should enter body.
     */
    route?: CodeableConcept;
    /**
     * Technique for administering medication.
     */
    method?: CodeableConcept;
    doseAndRate?: Dosage_DoseAndRate[];
    /**
     * Upper limit on medication per unit of time.
     */
    maxDosePerPeriod?: Ratio;
    /**
     * Upper limit on medication per administration.
     */
    maxDosePerAdministration?: SimpleQuantity;
    /**
     * Upper limit on medication per lifetime of the patient.
     */
    maxDosePerLifetime?: SimpleQuantity;
};

export type Dosage_DoseAndRate = BackboneElement & {
    /**
     * The kind of dose or rate specified, for example, ordered or calculated.
     */
    type?: CodeableConcept;
    /**
     * Amount of medication per dose.
     */
    doseRange?: Range;
    /**
     * Amount of medication per dose.
     */
    doseQuantity?: SimpleQuantity;
    /**
     * Amount of medication per unit of time.
     */
    rateRatio?: Ratio;
    /**
     * Amount of medication per unit of time.
     */
    rateRange?: Range;
    /**
     * Amount of medication per unit of time.
     */
    rateQuantity?: SimpleQuantity;
};

export type AdministrableProductDefinition = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of this administrable product. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    formOf?: Reference[];
    /**
     * The dose form of the final product after necessary reconstitution or processing. Contrasts to the manufactured dose form (see ManufacturedItemDefinition). If the manufactured form was 'powder for solution for injection', the administrable dose form could be 'solution for injection' (once mixed with another item having manufactured form 'solvent for solution for injection').
     */
    administrableDoseForm?: CodeableConcept;
    /**
     * The presentation type in which this item is given to a patient. e.g. for a spray &ndash; 'puff' (as in 'contains 100 mcg per puff'), or for a liquid &ndash; 'vial' (as in 'contains 5 ml per vial').
     */
    unitOfPresentation?: CodeableConcept;
    producedFrom?: Reference[];
    ingredient?: CodeableConcept[];
    /**
     * A device that is integral to the medicinal product, in effect being considered as an "ingredient" of the medicinal product. This is not intended for devices that are just co&ndash;packaged.
     */
    device?: Reference;
    property?: AdministrableProductDefinition_Property[];
    routeOfAdministration: AdministrableProductDefinition_RouteOfAdministration[];
};

export type AdministrableProductDefinition_Property = BackboneElement & {
    /**
     * A code expressing the type of characteristic.
     */
    type: CodeableConcept;
    /**
     * A value for the characteristic.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value for the characteristic.
     */
    valueQuantity?: Quantity;
    /**
     * A value for the characteristic.
     */
    valueDate?: string;
    /**
     * A value for the characteristic.
     */
    valueBoolean?: boolean;
    /**
     * A value for the characteristic.
     */
    valueAttachment?: Attachment;
    /**
     * The status of characteristic e.g. assigned or pending.
     */
    status?: CodeableConcept;
};

export type AdministrableProductDefinition_RouteOfAdministration =
    BackboneElement & {
        /**
         * Coded expression for the route.
         */
        code: CodeableConcept;
        /**
         * The first dose (dose quantity) administered can be specified for the product, using a numerical value and its unit of measurement.
         */
        firstDose?: Quantity;
        /**
         * The maximum single dose that can be administered, specified using a numerical value and its unit of measurement.
         */
        maxSingleDose?: Quantity;
        /**
         * The maximum dose per day (maximum dose quantity to be administered in any one 24&ndash;h period) that can be administered.
         */
        maxDosePerDay?: Quantity;
        /**
         * The maximum dose per treatment period that can be administered.
         */
        maxDosePerTreatmentPeriod?: Ratio;
        /**
         * The maximum treatment period during which the product can be administered.
         */
        maxTreatmentPeriod?: Duration;
        targetSpecies?: AdministrableProductDefinition_RouteOfAdministration_TargetSpecies[];
    };

export type AdministrableProductDefinition_RouteOfAdministration_TargetSpecies =
    BackboneElement & {
        /**
         * Coded expression for the species.
         */
        code: CodeableConcept;
        withdrawalPeriod?: AdministrableProductDefinition_RouteOfAdministration_TargetSpecies_WithdrawalPeriod[];
    };

export type AdministrableProductDefinition_RouteOfAdministration_TargetSpecies_WithdrawalPeriod =
    BackboneElement & {
        /**
         * Coded expression for the type of tissue for which the withdrawal period applies, e.g. meat, milk.
         */
        tissue: CodeableConcept;
        /**
         * A value for the time.
         */
        value: Quantity;
        /**
         * Extra information about the withdrawal period.
         */
        supportingInformation?: string;
    };

export type AdverseEvent = DomainResource & {
    /**
     * Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Identifier;
    /**
     * Whether the event actually happened, or just had the potential to. Note that this is independent of whether anyone was affected or harmed or how severely.
     */
    actuality: string;
    category?: CodeableConcept[];
    /**
     * This element defines the specific type of event that occurred or that was prevented from occurring.
     */
    event?: CodeableConcept;
    /**
     * This subject or group impacted by the event.
     */
    subject: Reference;
    /**
     * The Encounter during which AdverseEvent was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * The date (and perhaps time) when the adverse event occurred.
     */
    date?: string;
    /**
     * Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
     */
    detected?: string;
    /**
     * The date on which the existence of the AdverseEvent was first recorded.
     */
    recordedDate?: string;
    resultingCondition?: Reference[];
    /**
     * The information about where the adverse event occurred.
     */
    location?: Reference;
    /**
     * Assessment whether this event was of real importance.
     */
    seriousness?: CodeableConcept;
    /**
     * Describes the severity of the adverse event, in relation to the subject. Contrast to AdverseEvent.seriousness &ndash; a severe rash might not be serious, but a mild heart problem is.
     */
    severity?: CodeableConcept;
    /**
     * Describes the type of outcome from the adverse event.
     */
    outcome?: CodeableConcept;
    /**
     * Information on who recorded the adverse event.  May be the patient or a practitioner.
     */
    recorder?: Reference;
    contributor?: Reference[];
    suspectEntity?: AdverseEvent_SuspectEntity[];
    subjectMedicalHistory?: Reference[];
    referenceDocument?: Reference[];
    study?: Reference[];
};

export type AdverseEvent_SuspectEntity = BackboneElement & {
    /**
     * Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
     */
    instance: Reference;
    causality?: AdverseEvent_SuspectEntity_Causality[];
};

export type AdverseEvent_SuspectEntity_Causality = BackboneElement & {
    /**
     * Assessment of if the entity caused the event.
     */
    assessment?: CodeableConcept;
    /**
     * AdverseEvent.suspectEntity.causalityProductRelatedness.
     */
    productRelatedness?: string;
    /**
     * AdverseEvent.suspectEntity.causalityAuthor.
     */
    author?: Reference;
    /**
     * ProbabilityScale | Bayesian | Checklist.
     */
    method?: CodeableConcept;
};

export type AllergyIntolerance = DomainResource & {
    identifier?: Identifier[];
    /**
     * The clinical status of the allergy or intolerance.
     */
    clinicalStatus?: CodeableConcept;
    /**
     * Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
     */
    verificationStatus?: CodeableConcept;
    /**
     * Identification of the underlying physiological mechanism for the reaction risk.
     */
    type?: string;
    category?: string[];
    /**
     * Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
     */
    criticality?: string;
    /**
     * Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
     */
    code?: CodeableConcept;
    /**
     * The patient who has the allergy or intolerance.
     */
    patient: Reference;
    /**
     * The encounter when the allergy or intolerance was asserted.
     */
    encounter?: Reference;
    /**
     * Estimated or actual date,  date&ndash;time, or age when allergy or intolerance was identified.
     */
    onsetDateTime?: string;
    /**
     * Estimated or actual date,  date&ndash;time, or age when allergy or intolerance was identified.
     */
    onsetAge?: Age;
    /**
     * Estimated or actual date,  date&ndash;time, or age when allergy or intolerance was identified.
     */
    onsetPeriod?: Period;
    /**
     * Estimated or actual date,  date&ndash;time, or age when allergy or intolerance was identified.
     */
    onsetRange?: Range;
    /**
     * Estimated or actual date,  date&ndash;time, or age when allergy or intolerance was identified.
     */
    onsetString?: string;
    /**
     * The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system&ndash;generated date.
     */
    recordedDate?: string;
    /**
     * Individual who recorded the record and takes responsibility for its content.
     */
    recorder?: Reference;
    /**
     * The source of the information about the allergy that is recorded.
     */
    asserter?: Reference;
    /**
     * Represents the date and/or time of the last known occurrence of a reaction event.
     */
    lastOccurrence?: string;
    note?: Annotation[];
    reaction?: AllergyIntolerance_Reaction[];
};

export type AllergyIntolerance_Reaction = BackboneElement & {
    /**
     * Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
     */
    substance?: CodeableConcept;
    manifestation: CodeableConcept[];
    /**
     * Text description about the reaction as a whole, including details of the manifestation if required.
     */
    description?: string;
    /**
     * Record of the date and/or time of the onset of the Reaction.
     */
    onset?: string;
    /**
     * Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
     */
    severity?: string;
    /**
     * Identification of the route by which the subject was exposed to the substance.
     */
    exposureRoute?: CodeableConcept;
    note?: Annotation[];
};

export type Appointment = DomainResource & {
    identifier?: Identifier[];
    /**
     * The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.
     */
    status: string;
    /**
     * The coded reason for the appointment being cancelled. This is often used in reporting/billing/futher processing to determine if further actions are required, or specific fees apply.
     */
    cancelationReason?: CodeableConcept;
    serviceCategory?: CodeableConcept[];
    serviceType?: CodeableConcept[];
    specialty?: CodeableConcept[];
    /**
     * The style of appointment or patient that has been booked in the slot (not service type).
     */
    appointmentType?: CodeableConcept;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    /**
     * The priority of the appointment. Can be used to make informed decisions if needing to re&ndash;prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).
     */
    priority?: number;
    /**
     * The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.
     */
    description?: string;
    supportingInformation?: Reference[];
    /**
     * Date/Time that the appointment is to take place.
     */
    start?: string;
    /**
     * Date/Time that the appointment is to conclude.
     */
    end?: string;
    /**
     * Number of minutes that the appointment is to take. This can be less than the duration between the start and end times.  For example, where the actual time of appointment is only an estimate or if a 30 minute appointment is being requested, but any time would work.  Also, if there is, for example, a planned 15 minute break in the middle of a long appointment, the duration may be 15 minutes less than the difference between the start and end.
     */
    minutesDuration?: number;
    slot?: Reference[];
    /**
     * The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.
     */
    created?: string;
    /**
     * Additional comments about the appointment.
     */
    comment?: string;
    /**
     * While Appointment.comment contains information for internal use, Appointment.patientInstructions is used to capture patient facing information about the Appointment (e.g. please bring your referral or fast from 8pm night before).
     */
    patientInstruction?: string;
    basedOn?: Reference[];
    participant: Appointment_Participant[];
    requestedPeriod?: Period[];
};

export type Appointment_Participant = BackboneElement & {
    type?: CodeableConcept[];
    /**
     * A Person, Location/HealthcareService or Device that is participating in the appointment.
     */
    actor?: Reference;
    /**
     * Whether this participant is required to be present at the meeting. This covers a use&ndash;case where two doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.
     */
    required?: string;
    /**
     * Participation status of the actor.
     */
    status: string;
    /**
     * Participation period of the actor.
     */
    period?: Period;
};

export type AppointmentResponse = DomainResource & {
    identifier?: Identifier[];
    /**
     * Appointment that this response is replying to.
     */
    appointment: Reference;
    /**
     * Date/Time that the appointment is to take place, or requested new start time.
     */
    start?: string;
    /**
     * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re&ndash;negotiation of the end time.
     */
    end?: string;
    participantType?: CodeableConcept[];
    /**
     * A Person, Location, HealthcareService, or Device that is participating in the appointment.
     */
    actor?: Reference;
    /**
     * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
     */
    participantStatus: string;
    /**
     * Additional comments about the appointment.
     */
    comment?: string;
};

export type AuditEvent = DomainResource & {
    /**
     * Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
     */
    type: Coding;
    subtype?: Coding[];
    /**
     * Indicator for type of action performed during the event that generated the audit.
     */
    action?: string;
    /**
     * The period during which the activity occurred.
     */
    period?: Period;
    /**
     * The time when the event was recorded.
     */
    recorded: string;
    /**
     * Indicates whether the event succeeded or failed.
     */
    outcome?: string;
    /**
     * A free text description of the outcome of the event.
     */
    outcomeDesc?: string;
    purposeOfEvent?: CodeableConcept[];
    agent: AuditEvent_Agent[];
    /**
     * The system that is reporting the event.
     */
    source: AuditEvent_Source;
    entity?: AuditEvent_Entity[];
};

export type AuditEvent_Agent = BackboneElement & {
    /**
     * Specification of the participation type the user plays when performing the event.
     */
    type?: CodeableConcept;
    role?: CodeableConcept[];
    /**
     * Reference to who this agent is that was involved in the event.
     */
    who?: Reference;
    /**
     * Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign&ndash;on), if available.
     */
    altId?: string;
    /**
     * Human&ndash;meaningful name for the agent.
     */
    name?: string;
    /**
     * Indicator that the user is or is not the requestor, or initiator, for the event being audited.
     */
    requestor: boolean;
    /**
     * Where the event occurred.
     */
    location?: Reference;
    policy?: string[];
    /**
     * Type of media involved. Used when the event is about exporting/importing onto media.
     */
    media?: Coding;
    /**
     * Logical network location for application activity, if the activity has a network location.
     */
    network?: AuditEvent_Agent_Network;
    purposeOfUse?: CodeableConcept[];
};

export type AuditEvent_Agent_Network = BackboneElement & {
    /**
     * An identifier for the network access point of the user device for the audit event.
     */
    address?: string;
    /**
     * An identifier for the type of network access point that originated the audit event.
     */
    type?: string;
};

export type AuditEvent_Entity = BackboneElement & {
    /**
     * Identifies a specific instance of the entity. The reference should be version specific.
     */
    what?: Reference;
    /**
     * The type of the object that was involved in this audit event.
     */
    type?: Coding;
    /**
     * Code representing the role the entity played in the event being audited.
     */
    role?: Coding;
    /**
     * Identifier for the data life&ndash;cycle stage for the entity.
     */
    lifecycle?: Coding;
    securityLabel?: Coding[];
    /**
     * A name of the entity in the audit event.
     */
    name?: string;
    /**
     * Text that describes the entity in more detail.
     */
    description?: string;
    /**
     * The query parameters for a query&ndash;type entities.
     */
    query?: string;
    detail?: AuditEvent_Entity_Detail[];
};

export type AuditEvent_Entity_Detail = BackboneElement & {
    /**
     * The type of extra detail provided in the value.
     */
    type: string;
    /**
     * The  value of the extra detail.
     */
    valueString?: string;
    /**
     * The  value of the extra detail.
     */
    valueBase64Binary?: string;
};

export type AuditEvent_Source = BackboneElement & {
    /**
     * Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi&ndash;entity provider group.
     */
    site?: string;
    /**
     * Identifier of the source where the event was detected.
     */
    observer: Reference;
    type?: Coding[];
};

export type Basic = DomainResource & {
    identifier?: Identifier[];
    /**
     * Identifies the 'type' of resource &ndash; equivalent to the resource name for other resources.
     */
    code: CodeableConcept;
    /**
     * Identifies the patient, practitioner, device or any other resource that is the "focus" of this resource.
     */
    subject?: Reference;
    /**
     * Identifies when the resource was first created.
     */
    created?: string;
    /**
     * Indicates who was responsible for creating the resource instance.
     */
    author?: Reference;
};

export type BiologicallyDerivedProduct = DomainResource & {
    identifier?: Identifier[];
    /**
     * Broad category of this product.
     */
    productCategory?: string;
    /**
     * A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
     */
    productCode?: CodeableConcept;
    /**
     * Whether the product is currently available.
     */
    status?: string;
    request?: Reference[];
    /**
     * Number of discrete units within this product.
     */
    quantity?: number;
    parent?: Reference[];
    /**
     * How this product was collected.
     */
    collection?: BiologicallyDerivedProduct_Collection;
    processing?: BiologicallyDerivedProduct_Processing[];
    /**
     * Any manipulation of product post&ndash;collection that is intended to alter the product.  For example a buffy&ndash;coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
     */
    manipulation?: BiologicallyDerivedProduct_Manipulation;
    storage?: BiologicallyDerivedProduct_Storage[];
};

export type BiologicallyDerivedProduct_Collection = BackboneElement & {
    /**
     * Healthcare professional who is performing the collection.
     */
    collector?: Reference;
    /**
     * The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
     */
    source?: Reference;
    /**
     * Time of product collection.
     */
    collectedDateTime?: string;
    /**
     * Time of product collection.
     */
    collectedPeriod?: Period;
};

export type BiologicallyDerivedProduct_Manipulation = BackboneElement & {
    /**
     * Description of manipulation.
     */
    description?: string;
    /**
     * Time of manipulation.
     */
    timeDateTime?: string;
    /**
     * Time of manipulation.
     */
    timePeriod?: Period;
};

export type BiologicallyDerivedProduct_Processing = BackboneElement & {
    /**
     * Description of of processing.
     */
    description?: string;
    /**
     * Procesing code.
     */
    procedure?: CodeableConcept;
    /**
     * Substance added during processing.
     */
    additive?: Reference;
    /**
     * Time of processing.
     */
    timeDateTime?: string;
    /**
     * Time of processing.
     */
    timePeriod?: Period;
};

export type BiologicallyDerivedProduct_Storage = BackboneElement & {
    /**
     * Description of storage.
     */
    description?: string;
    /**
     * Storage temperature.
     */
    temperature?: number;
    /**
     * Temperature scale used.
     */
    scale?: string;
    /**
     * Storage timeperiod.
     */
    duration?: Period;
};

export type BodyStructure = DomainResource & {
    identifier?: Identifier[];
    /**
     * Whether this body site is in active use.
     */
    active?: boolean;
    /**
     * The kind of structure being represented by the body structure at `BodyStructure.location`.  This can define both normal and abnormal morphologies.
     */
    morphology?: CodeableConcept;
    /**
     * The anatomical location or region of the specimen, lesion, or body structure.
     */
    location?: CodeableConcept;
    locationQualifier?: CodeableConcept[];
    /**
     * A summary, characterization or explanation of the body structure.
     */
    description?: string;
    image?: Attachment[];
    /**
     * The person to which the body site belongs.
     */
    patient: Reference;
};

export type CarePlan = DomainResource & {
    identifier?: Identifier[];
    instantiatesCanonical?: string[];
    instantiatesUri?: string[];
    basedOn?: Reference[];
    replaces?: Reference[];
    partOf?: Reference[];
    /**
     * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
     */
    status: string;
    /**
     * Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.
     */
    intent: string;
    category?: CodeableConcept[];
    /**
     * Human&ndash;friendly name for the care plan.
     */
    title?: string;
    /**
     * A description of the scope and nature of the plan.
     */
    description?: string;
    /**
     * Identifies the patient or group whose intended care is described by the plan.
     */
    subject: Reference;
    /**
     * The Encounter during which this CarePlan was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Indicates when the plan did (or is intended to) come into effect and end.
     */
    period?: Period;
    /**
     * Represents when this particular CarePlan record was created in the system, which is often a system&ndash;generated date.
     */
    created?: string;
    /**
     * When populated, the author is responsible for the care plan.  The care plan is attributed to the author.
     */
    author?: Reference;
    contributor?: Reference[];
    careTeam?: Reference[];
    addresses?: Reference[];
    supportingInfo?: Reference[];
    goal?: Reference[];
    activity?: CarePlan_Activity[];
    note?: Annotation[];
};

export type CarePlan_Activity = BackboneElement & {
    outcomeCodeableConcept?: CodeableConcept[];
    outcomeReference?: Reference[];
    progress?: Annotation[];
    /**
     * The details of the proposed activity represented in a specific resource.
     */
    reference?: Reference;
    /**
     * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
     */
    detail?: CarePlan_Activity_Detail;
};

export type CarePlan_Activity_Detail = BackboneElement & {
    /**
     * A description of the kind of resource the in&ndash;line definition of a care plan activity is representing.  The CarePlan.activity.detail is an in&ndash;line definition when a resource is not referenced using CarePlan.activity.reference.  For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
     */
    kind?: string;
    instantiatesCanonical?: string[];
    instantiatesUri?: string[];
    /**
     * Detailed description of the type of planned activity; e.g. what lab test, what procedure, what kind of encounter.
     */
    code?: CodeableConcept;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    goal?: Reference[];
    /**
     * Identifies what progress is being made for the specific activity.
     */
    status: string;
    /**
     * Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
     */
    statusReason?: CodeableConcept;
    /**
     * If true, indicates that the described activity is one that must NOT be engaged in when following the plan.  If false, or missing, indicates that the described activity is one that should be engaged in when following the plan.
     */
    doNotPerform?: boolean;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    scheduledTiming?: Timing;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    scheduledPeriod?: Period;
    /**
     * The period, timing or frequency upon which the described activity is to occur.
     */
    scheduledString?: string;
    /**
     * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
     */
    location?: Reference;
    performer?: Reference[];
    /**
     * Identifies the food, drug or other product to be consumed or supplied in the activity.
     */
    productCodeableConcept?: CodeableConcept;
    /**
     * Identifies the food, drug or other product to be consumed or supplied in the activity.
     */
    productReference?: Reference;
    /**
     * Identifies the quantity expected to be consumed in a given day.
     */
    dailyAmount?: SimpleQuantity;
    /**
     * Identifies the quantity expected to be supplied, administered or consumed by the subject.
     */
    quantity?: SimpleQuantity;
    /**
     * This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre&ndash;conditions and end&ndash;conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
     */
    description?: string;
};

export type CareTeam = DomainResource & {
    identifier?: Identifier[];
    /**
     * Indicates the current state of the care team.
     */
    status?: string;
    category?: CodeableConcept[];
    /**
     * A label for human use intended to distinguish like teams.  E.g. the "red" vs. "green" trauma teams.
     */
    name?: string;
    /**
     * Identifies the patient or group whose intended care is handled by the team.
     */
    subject?: Reference;
    /**
     * The Encounter during which this CareTeam was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Indicates when the team did (or is intended to) come into effect and end.
     */
    period?: Period;
    participant?: CareTeam_Participant[];
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    managingOrganization?: Reference[];
    telecom?: ContactPoint[];
    note?: Annotation[];
};

export type CareTeam_Participant = BackboneElement & {
    role?: CodeableConcept[];
    /**
     * The specific person or organization who is participating/expected to participate in the care team.
     */
    member?: Reference;
    /**
     * The organization of the practitioner.
     */
    onBehalfOf?: Reference;
    /**
     * Indicates when the specific member or organization did (or is intended to) come into effect and end.
     */
    period?: Period;
};

export type CatalogEntry = DomainResource & {
    identifier?: Identifier[];
    /**
     * The type of item &ndash; medication, device, service, protocol or other.
     */
    type?: CodeableConcept;
    /**
     * Whether the entry represents an orderable item.
     */
    orderable: boolean;
    /**
     * The item in a catalog or definition.
     */
    referencedItem: Reference;
    additionalIdentifier?: Identifier[];
    classification?: CodeableConcept[];
    /**
     * Used to support catalog exchange even for unsupported products, e.g. getting list of medications even if not prescribable.
     */
    status?: string;
    /**
     * The time period in which this catalog entry is expected to be active.
     */
    validityPeriod?: Period;
    /**
     * The date until which this catalog entry is expected to be active.
     */
    validTo?: string;
    /**
     * Typically date of issue is different from the beginning of the validity. This can be used to see when an item was last updated.
     */
    lastUpdated?: string;
    additionalCharacteristic?: CodeableConcept[];
    additionalClassification?: CodeableConcept[];
    relatedEntry?: CatalogEntry_RelatedEntry[];
};

export type CatalogEntry_RelatedEntry = BackboneElement & {
    /**
     * The type of relation to the related item: child, parent, packageContent, containerPackage, usedIn, uses, requires, etc.
     */
    relationtype: string;
    /**
     * The reference to the related item.
     */
    item: Reference;
};

export type ChargeItem = DomainResource & {
    identifier?: Identifier[];
    definitionUri?: string[];
    definitionCanonical?: string[];
    /**
     * The current state of the ChargeItem.
     */
    status: string;
    partOf?: Reference[];
    /**
     * A code that identifies the charge, like a billing code.
     */
    code: CodeableConcept;
    /**
     * The individual or set of individuals the action is being or was performed on.
     */
    subject: Reference;
    /**
     * The encounter or episode of care that establishes the context for this event.
     */
    context?: Reference;
    /**
     * Date/time(s) or duration when the charged service was applied.
     */
    occurrenceDateTime?: string;
    /**
     * Date/time(s) or duration when the charged service was applied.
     */
    occurrencePeriod?: Period;
    /**
     * Date/time(s) or duration when the charged service was applied.
     */
    occurrenceTiming?: Timing;
    performer?: ChargeItem_Performer[];
    /**
     * The organization requesting the service.
     */
    performingOrganization?: Reference;
    /**
     * The organization performing the service.
     */
    requestingOrganization?: Reference;
    /**
     * The financial cost center permits the tracking of charge attribution.
     */
    costCenter?: Reference;
    /**
     * Quantity of which the charge item has been serviced.
     */
    quantity?: Quantity;
    bodysite?: CodeableConcept[];
    /**
     * Factor overriding the factor determined by the rules associated with the code.
     */
    factorOverride?: number;
    /**
     * Total price of the charge overriding the list price associated with the code.
     */
    priceOverride?: Money;
    /**
     * If the list price or the rule&ndash;based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action.
     */
    overrideReason?: string;
    /**
     * The device, practitioner, etc. who entered the charge item.
     */
    enterer?: Reference;
    /**
     * Date the charge item was entered.
     */
    enteredDate?: string;
    reason?: CodeableConcept[];
    service?: Reference[];
    /**
     * Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
     */
    productReference?: Reference;
    /**
     * Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
     */
    productCodeableConcept?: CodeableConcept;
    account?: Reference[];
    note?: Annotation[];
    supportingInformation?: Reference[];
};

export type ChargeItem_Performer = BackboneElement & {
    /**
     * Describes the type of performance or participation(e.g. primary surgeon, anesthesiologiest, etc.).
     */
    function?: CodeableConcept;
    /**
     * The device, practitioner, etc. who performed or participated in the service.
     */
    actor: Reference;
};

export type ChargeItemDefinition = DomainResource & {
    /**
     * An absolute URI that is used to identify this charge item definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this charge item definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the charge item definition is stored on different servers.
     */
    url: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the charge item definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the charge item definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non&ndash;experimental active assets.
     */
    version?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the charge item definition.
     */
    title?: string;
    derivedFromUri?: string[];
    partOf?: string[];
    replaces?: string[];
    /**
     * The current state of the ChargeItemDefinition.
     */
    status: string;
    /**
     * A Boolean value to indicate that this charge item definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the charge item definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the charge item definition changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the charge item definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the charge item definition from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * A copyright statement relating to the charge item definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the charge item definition.
     */
    copyright?: string;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the charge item definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    /**
     * The defined billing details in this resource pertain to the given billing code.
     */
    code?: CodeableConcept;
    instance?: Reference[];
    applicability?: ChargeItemDefinition_Applicability[];
    propertyGroup?: ChargeItemDefinition_PropertyGroup[];
};

export type ChargeItemDefinition_Applicability = BackboneElement & {
    /**
     * A brief, natural language description of the condition that effectively communicates the intended semantics.
     */
    description?: string;
    /**
     * The media type of the language for the expression, e.g. "text/cql" for Clinical Query Language expressions or "text/fhirpath" for FHIRPath expressions.
     */
    language?: string;
    /**
     * An expression that returns true or false, indicating whether the condition is satisfied. When using FHIRPath expressions, the %context environment variable must be replaced at runtime with the ChargeItem resource to which this definition is applied.
     */
    expression?: string;
};

export type ChargeItemDefinition_PropertyGroup = BackboneElement & {
    applicability?: ChargeItemDefinition_Applicability[];
    priceComponent?: ChargeItemDefinition_PropertyGroup_PriceComponent[];
};

export type ChargeItemDefinition_PropertyGroup_PriceComponent =
    BackboneElement & {
        /**
         * This code identifies the type of the component.
         */
        type: string;
        /**
         * A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
         */
        code?: CodeableConcept;
        /**
         * The factor that has been applied on the base price for calculating this component.
         */
        factor?: number;
        /**
         * The amount calculated for this component.
         */
        amount?: Money;
    };

export type Citation = DomainResource & {
    /**
     * An absolute URI that is used to identify this citation when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the citation when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the citation author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the citation. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the citation.
     */
    title?: string;
    /**
     * The status of this summary. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this citation is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the citation was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the citation changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the citation.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the citation from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this citation is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * Use and/or publishing restrictions for the Citation, not for the cited artifact.
     */
    copyright?: string;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the citation content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    summary?: Citation_Summary[];
    classification?: Citation_Classification[];
    note?: Annotation[];
    currentState?: CodeableConcept[];
    statusDate?: Citation_StatusDate[];
    relatesTo?: Citation_RelatesTo[];
    /**
     * The article or artifact being described.
     */
    citedArtifact?: Citation_CitedArtifact;
};

export type Citation_CitedArtifact = BackboneElement & {
    identifier?: Identifier[];
    relatedIdentifier?: Identifier[];
    /**
     * When the cited artifact was accessed.
     */
    dateAccessed?: string;
    /**
     * The defined version of the cited artifact.
     */
    version?: Citation_CitedArtifact_Version;
    currentState?: CodeableConcept[];
    statusDate?: Citation_CitedArtifact_StatusDate[];
    title?: Citation_CitedArtifact_Title[];
    abstract?: Citation_CitedArtifact_Abstract[];
    /**
     * The component of the article or artifact.
     */
    part?: Citation_CitedArtifact_Part;
    relatesTo?: Citation_CitedArtifact_RelatesTo[];
    publicationForm?: Citation_CitedArtifact_PublicationForm[];
    webLocation?: Citation_CitedArtifact_WebLocation[];
    classification?: Citation_CitedArtifact_Classification[];
    /**
     * This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
     */
    contributorship?: Citation_CitedArtifact_Contributorship;
    note?: Annotation[];
};

export type Citation_CitedArtifact_Abstract = BackboneElement & {
    /**
     * Used to express the reason or specific aspect for the abstract.
     */
    type?: CodeableConcept;
    /**
     * Used to express the specific language.
     */
    language?: CodeableConcept;
    /**
     * Abstract content.
     */
    text: string;
    /**
     * Copyright notice for the abstract.
     */
    copyright?: string;
};

export type Citation_CitedArtifact_Classification = BackboneElement & {
    /**
     * The kind of classifier (e.g. publication type, keyword).
     */
    type?: CodeableConcept;
    classifier?: CodeableConcept[];
    /**
     * Provenance and copyright of classification.
     */
    whoClassified?: Citation_CitedArtifact_Classification_WhoClassified;
};

export type Citation_CitedArtifact_Classification_WhoClassified =
    BackboneElement & {
        /**
         * Person who created the classification.
         */
        person?: Reference;
        /**
         * Organization who created the classification.
         */
        organization?: Reference;
        /**
         * The publisher of the classification, not the publisher of the article or artifact being cited.
         */
        publisher?: Reference;
        /**
         * Rights management statement for the classification.
         */
        classifierCopyright?: string;
        /**
         * Acceptable to re&ndash;use the classification.
         */
        freeToShare?: boolean;
    };

export type Citation_CitedArtifact_Contributorship = BackboneElement & {
    /**
     * Indicates if the list includes all authors and/or contributors.
     */
    complete?: boolean;
    entry?: Citation_CitedArtifact_Contributorship_Entry[];
    summary?: Citation_CitedArtifact_Contributorship_Summary[];
};

export type Citation_CitedArtifact_Contributorship_Entry = BackboneElement & {
    /**
     * A name associated with the individual.
     */
    name?: HumanName;
    /**
     * Initials for forename.
     */
    initials?: string;
    /**
     * Used for collective or corporate name as an author.
     */
    collectiveName?: string;
    identifier?: Identifier[];
    affiliationInfo?: Citation_CitedArtifact_Contributorship_Entry_AffiliationInfo[];
    address?: Address[];
    telecom?: ContactPoint[];
    contributionType?: CodeableConcept[];
    /**
     * The role of the contributor (e.g. author, editor, reviewer).
     */
    role?: CodeableConcept;
    contributionInstance?: Citation_CitedArtifact_Contributorship_Entry_ContributionInstance[];
    /**
     * Indication of which contributor is the corresponding contributor for the role.
     */
    correspondingContact?: boolean;
    /**
     * Used to code order of authors.
     */
    listOrder?: number;
};

export type Citation_CitedArtifact_Contributorship_Entry_AffiliationInfo =
    BackboneElement & {
        /**
         * Display for the organization.
         */
        affiliation?: string;
        /**
         * Role within the organization, such as professional title.
         */
        role?: string;
        identifier?: Identifier[];
    };

export type Citation_CitedArtifact_Contributorship_Entry_ContributionInstance =
    BackboneElement & {
        /**
         * The specific contribution.
         */
        type: CodeableConcept;
        /**
         * The time that the contribution was made.
         */
        time?: string;
    };

export type Citation_CitedArtifact_Contributorship_Summary = BackboneElement & {
    /**
     * Used most commonly to express an author list or a contributorship statement.
     */
    type?: CodeableConcept;
    /**
     * Format for display of the citation.
     */
    style?: CodeableConcept;
    /**
     * Used to code the producer or rule for creating the display string.
     */
    source?: CodeableConcept;
    /**
     * The display string for the author list, contributor list, or contributorship statement.
     */
    value: string;
};

export type Citation_CitedArtifact_Part = BackboneElement & {
    /**
     * The kind of component.
     */
    type?: CodeableConcept;
    /**
     * The specification of the component.
     */
    value?: string;
    /**
     * The citation for the full article or artifact.
     */
    baseCitation?: Reference;
};

export type Citation_CitedArtifact_PublicationForm = BackboneElement & {
    /**
     * The collection the cited article or artifact is published in.
     */
    publishedIn?: Citation_CitedArtifact_PublicationForm_PublishedIn;
    /**
     * The specific issue in which the cited article resides.
     */
    periodicRelease?: Citation_CitedArtifact_PublicationForm_PeriodicRelease;
    /**
     * The date the article was added to the database, or the date the article was released (which may differ from the journal issue publication date).
     */
    articleDate?: string;
    /**
     * The date the article was last revised or updated in the database.
     */
    lastRevisionDate?: string;
    language?: CodeableConcept[];
    /**
     * Entry number or identifier for inclusion in a database.
     */
    accessionNumber?: string;
    /**
     * Used for full display of pagination.
     */
    pageString?: string;
    /**
     * Used for isolated representation of first page.
     */
    firstPage?: string;
    /**
     * Used for isolated representation of last page.
     */
    lastPage?: string;
    /**
     * Actual or approximate number of pages or screens.
     */
    pageCount?: string;
    /**
     * Copyright notice for the full article or artifact.
     */
    copyright?: string;
};

export type Citation_CitedArtifact_PublicationForm_PeriodicRelease =
    BackboneElement & {
        /**
         * Describes the form of the medium cited. Common codes are "Internet" or "Print".
         */
        citedMedium?: CodeableConcept;
        /**
         * Volume number of journal in which the article is published.
         */
        volume?: string;
        /**
         * Issue, part or supplement of journal in which the article is published.
         */
        issue?: string;
        /**
         * Defining the date on which the issue of the journal was published.
         */
        dateOfPublication?: Citation_CitedArtifact_PublicationForm_PeriodicRelease_DateOfPublication;
    };

export type Citation_CitedArtifact_PublicationForm_PeriodicRelease_DateOfPublication =
    BackboneElement & {
        /**
         * Date on which the issue of the journal was published.
         */
        date?: string;
        /**
         * Year on which the issue of the journal was published.
         */
        year?: string;
        /**
         * Month on which the issue of the journal was published.
         */
        month?: string;
        /**
         * Day on which the issue of the journal was published.
         */
        day?: string;
        /**
         * Spring, Summer, Fall/Autumn, Winter.
         */
        season?: string;
        /**
         * Text representation of the date of which the issue of the journal was published.
         */
        text?: string;
    };

export type Citation_CitedArtifact_PublicationForm_PublishedIn =
    BackboneElement & {
        /**
         * Kind of container (e.g. Periodical, database, or book).
         */
        type?: CodeableConcept;
        identifier?: Identifier[];
        /**
         * Name of the database or title of the book or journal.
         */
        title?: string;
        /**
         * Name of the publisher.
         */
        publisher?: Reference;
        /**
         * Geographic location of the publisher.
         */
        publisherLocation?: string;
    };

export type Citation_CitedArtifact_RelatesTo = BackboneElement & {
    /**
     * How the Citation resource relates to the target artifact.
     */
    relationshipType: CodeableConcept;
    targetClassifier?: CodeableConcept[];
    /**
     * The article or artifact that the Citation Resource is related to.
     */
    targetUri?: string;
    /**
     * The article or artifact that the Citation Resource is related to.
     */
    targetIdentifier?: Identifier;
    /**
     * The article or artifact that the Citation Resource is related to.
     */
    targetReference?: Reference;
    /**
     * The article or artifact that the Citation Resource is related to.
     */
    targetAttachment?: Attachment;
};

export type Citation_CitedArtifact_StatusDate = BackboneElement & {
    /**
     * Classification of the status.
     */
    activity: CodeableConcept;
    /**
     * Either occurred or expected.
     */
    actual?: boolean;
    /**
     * When the status started and/or ended.
     */
    period: Period;
};

export type Citation_CitedArtifact_Title = BackboneElement & {
    type?: CodeableConcept[];
    /**
     * Used to express the specific language.
     */
    language?: CodeableConcept;
    /**
     * The title of the article or artifact.
     */
    text: string;
};

export type Citation_CitedArtifact_Version = BackboneElement & {
    /**
     * The version number or other version identifier.
     */
    value: string;
    /**
     * Citation for the main version of the cited artifact.
     */
    baseCitation?: Reference;
};

export type Citation_CitedArtifact_WebLocation = BackboneElement & {
    /**
     * Code the reason for different URLs, e.g. abstract and full&ndash;text.
     */
    type?: CodeableConcept;
    /**
     * The specific URL.
     */
    url?: string;
};

export type Citation_Classification = BackboneElement & {
    /**
     * The kind of classifier (e.g. publication type, keyword).
     */
    type?: CodeableConcept;
    classifier?: CodeableConcept[];
};

export type Citation_RelatesTo = BackboneElement & {
    /**
     * How the Citation resource relates to the target artifact.
     */
    relationshipType: CodeableConcept;
    targetClassifier?: CodeableConcept[];
    /**
     * The article or artifact that the Citation Resource is related to.
     */
    targetUri?: string;
    /**
     * The article or artifact that the Citation Resource is related to.
     */
    targetIdentifier?: Identifier;
    /**
     * The article or artifact that the Citation Resource is related to.
     */
    targetReference?: Reference;
    /**
     * The article or artifact that the Citation Resource is related to.
     */
    targetAttachment?: Attachment;
};

export type Citation_StatusDate = BackboneElement & {
    /**
     * Classification of the status.
     */
    activity: CodeableConcept;
    /**
     * Either occurred or expected.
     */
    actual?: boolean;
    /**
     * When the status started and/or ended.
     */
    period: Period;
};

export type Citation_Summary = BackboneElement & {
    /**
     * Format for display of the citation.
     */
    style?: CodeableConcept;
    /**
     * The human&ndash;readable display of the citation.
     */
    text: string;
};

export type Claim = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: string;
    /**
     * The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
     */
    type: CodeableConcept;
    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    subType?: CodeableConcept;
    /**
     * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non&ndash;binding adjudication of the listed products and services which could be provided in the future.
     */
    use: string;
    /**
     * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
     */
    patient: Reference;
    /**
     * The period for which charges are being submitted.
     */
    billablePeriod?: Period;
    /**
     * The date this resource was created.
     */
    created: string;
    /**
     * Individual who created the claim, predetermination or preauthorization.
     */
    enterer?: Reference;
    /**
     * The Insurer who is target of the request.
     */
    insurer?: Reference;
    /**
     * The provider which is responsible for the claim, predetermination or preauthorization.
     */
    provider: Reference;
    /**
     * The provider&ndash;required urgency of processing the request. Typical values include: stat, routine deferred.
     */
    priority: CodeableConcept;
    /**
     * A code to indicate whether and for whom funds are to be reserved for future claims.
     */
    fundsReserve?: CodeableConcept;
    related?: Claim_Related[];
    /**
     * Prescription to support the dispensing of pharmacy, device or vision products.
     */
    prescription?: Reference;
    /**
     * Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
     */
    originalPrescription?: Reference;
    /**
     * The party to be reimbursed for cost of the products and services according to the terms of the policy.
     */
    payee?: Claim_Payee;
    /**
     * A reference to a referral resource.
     */
    referral?: Reference;
    /**
     * Facility where the services were provided.
     */
    facility?: Reference;
    careTeam?: Claim_CareTeam[];
    supportingInfo?: Claim_SupportingInfo[];
    diagnosis?: Claim_Diagnosis[];
    procedure?: Claim_Procedure[];
    insurance: Claim_Insurance[];
    /**
     * Details of an accident which resulted in injuries which required the products and services listed in the claim.
     */
    accident?: Claim_Accident;
    item?: Claim_Item[];
    /**
     * The total value of the all the items in the claim.
     */
    total?: Money;
};

export type Claim_Accident = BackboneElement & {
    /**
     * Date of an accident event  related to the products and services contained in the claim.
     */
    date: string;
    /**
     * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
     */
    type?: CodeableConcept;
    /**
     * The physical location of the accident event.
     */
    locationAddress?: Address;
    /**
     * The physical location of the accident event.
     */
    locationReference?: Reference;
};

export type Claim_CareTeam = BackboneElement & {
    /**
     * A number to uniquely identify care team entries.
     */
    sequence: number;
    /**
     * Member of the team who provided the product or service.
     */
    provider: Reference;
    /**
     * The party who is billing and/or responsible for the claimed products or services.
     */
    responsible?: boolean;
    /**
     * The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
     */
    role?: CodeableConcept;
    /**
     * The qualification of the practitioner which is applicable for this service.
     */
    qualification?: CodeableConcept;
};

export type Claim_Diagnosis = BackboneElement & {
    /**
     * A number to uniquely identify diagnosis entries.
     */
    sequence: number;
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisCodeableConcept?: CodeableConcept;
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisReference?: Reference;
    type?: CodeableConcept[];
    /**
     * Indication of whether the diagnosis was present on admission to a facility.
     */
    onAdmission?: CodeableConcept;
    /**
     * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
     */
    packageCode?: CodeableConcept;
};

export type Claim_Insurance = BackboneElement & {
    /**
     * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
     */
    sequence: number;
    /**
     * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
     */
    focal: boolean;
    /**
     * The business identifier to be used when the claim is sent for adjudication against this insurance policy.
     */
    identifier?: Identifier;
    /**
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    businessArrangement?: string;
    preAuthRef?: string[];
    /**
     * The result of the adjudication of the line items for the Coverage specified in this insurance.
     */
    claimResponse?: Reference;
};

export type Claim_Item = BackboneElement & {
    /**
     * A number to uniquely identify item entries.
     */
    sequence: number;
    careTeamSequence?: number[];
    diagnosisSequence?: number[];
    procedureSequence?: number[];
    informationSequence?: number[];
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: string;
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    udi?: Reference[];
    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    bodySite?: CodeableConcept;
    subSite?: CodeableConcept[];
    encounter?: Reference[];
    detail?: Claim_Item_Detail[];
};

export type Claim_Item_Detail = BackboneElement & {
    /**
     * A number to uniquely identify item entries.
     */
    sequence: number;
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    programCode?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    udi?: Reference[];
    subDetail?: Claim_Item_Detail_SubDetail[];
};

export type Claim_Item_Detail_SubDetail = BackboneElement & {
    /**
     * A number to uniquely identify item entries.
     */
    sequence: number;
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    programCode?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    udi?: Reference[];
};

export type Claim_Payee = BackboneElement & {
    /**
     * Type of Party to be reimbursed: subscriber, provider, other.
     */
    type: CodeableConcept;
    /**
     * Reference to the individual or organization to whom any payment will be made.
     */
    party?: Reference;
};

export type Claim_Procedure = BackboneElement & {
    /**
     * A number to uniquely identify procedure entries.
     */
    sequence: number;
    type?: CodeableConcept[];
    /**
     * Date and optionally time the procedure was performed.
     */
    date?: string;
    /**
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureCodeableConcept?: CodeableConcept;
    /**
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureReference?: Reference;
    udi?: Reference[];
};

export type Claim_Related = BackboneElement & {
    /**
     * Reference to a related claim.
     */
    claim?: Reference;
    /**
     * A code to convey how the claims are related.
     */
    relationship?: CodeableConcept;
    /**
     * An alternate organizational reference to the case or file to which this particular claim pertains.
     */
    reference?: Identifier;
};

export type Claim_SupportingInfo = BackboneElement & {
    /**
     * A number to uniquely identify supporting information entries.
     */
    sequence: number;
    /**
     * The general class of the information supplied: information; exception; accident, employment; onset, etc.
     */
    category: CodeableConcept;
    /**
     * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
     */
    code?: CodeableConcept;
    /**
     * The date when or period to which this information refers.
     */
    timingDate?: string;
    /**
     * The date when or period to which this information refers.
     */
    timingPeriod?: Period;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueBoolean?: boolean;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueString?: string;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueQuantity?: Quantity;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueAttachment?: Attachment;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueReference?: Reference;
    /**
     * Provides the reason in the situation where a reason code is required in addition to the content.
     */
    reason?: CodeableConcept;
};

export type ClaimResponse = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: string;
    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    type: CodeableConcept;
    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    subType?: CodeableConcept;
    /**
     * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non&ndash;binding adjudication of the listed products and services which could be provided in the future.
     */
    use: string;
    /**
     * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
     */
    patient: Reference;
    /**
     * The date this resource was created.
     */
    created: string;
    /**
     * The party responsible for authorization, adjudication and reimbursement.
     */
    insurer: Reference;
    /**
     * The provider which is responsible for the claim, predetermination or preauthorization.
     */
    requestor?: Reference;
    /**
     * Original request resource reference.
     */
    request?: Reference;
    /**
     * The outcome of the claim, predetermination, or preauthorization processing.
     */
    outcome: string;
    /**
     * A human readable description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     */
    preAuthRef?: string;
    /**
     * The time frame during which this authorization is effective.
     */
    preAuthPeriod?: Period;
    /**
     * Type of Party to be reimbursed: subscriber, provider, other.
     */
    payeeType?: CodeableConcept;
    item?: ClaimResponse_Item[];
    addItem?: ClaimResponse_AddItem[];
    adjudication?: ClaimResponse_Item_Adjudication[];
    total?: ClaimResponse_Total[];
    /**
     * Payment details for the adjudication of the claim.
     */
    payment?: ClaimResponse_Payment;
    /**
     * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
     */
    fundsReserve?: CodeableConcept;
    /**
     * A code for the form to be used for printing the content.
     */
    formCode?: CodeableConcept;
    /**
     * The actual form, by reference or inclusion, for printing the content or an EOB.
     */
    form?: Attachment;
    processNote?: ClaimResponse_ProcessNote[];
    communicationRequest?: Reference[];
    insurance?: ClaimResponse_Insurance[];
    error?: ClaimResponse_Error[];
};

export type ClaimResponse_AddItem = BackboneElement & {
    itemSequence?: number[];
    detailSequence?: number[];
    subdetailSequence?: number[];
    provider?: Reference[];
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: string;
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    bodySite?: CodeableConcept;
    subSite?: CodeableConcept[];
    noteNumber?: number[];
    adjudication: ClaimResponse_Item_Adjudication[];
    detail?: ClaimResponse_AddItem_Detail[];
};

export type ClaimResponse_AddItem_Detail = BackboneElement & {
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    noteNumber?: number[];
    adjudication: ClaimResponse_Item_Adjudication[];
    subDetail?: ClaimResponse_AddItem_Detail_SubDetail[];
};

export type ClaimResponse_AddItem_Detail_SubDetail = BackboneElement & {
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    noteNumber?: number[];
    adjudication: ClaimResponse_Item_Adjudication[];
};

export type ClaimResponse_Error = BackboneElement & {
    /**
     * The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    itemSequence?: number;
    /**
     * The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    detailSequence?: number;
    /**
     * The sequence number of the sub&ndash;detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
     */
    subDetailSequence?: number;
    /**
     * An error code, from a specified code system, which details why the claim could not be adjudicated.
     */
    code: CodeableConcept;
};

export type ClaimResponse_Insurance = BackboneElement & {
    /**
     * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
     */
    sequence: number;
    /**
     * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
     */
    focal: boolean;
    /**
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    businessArrangement?: string;
    /**
     * The result of the adjudication of the line items for the Coverage specified in this insurance.
     */
    claimResponse?: Reference;
};

export type ClaimResponse_Item = BackboneElement & {
    /**
     * A number to uniquely reference the claim item entries.
     */
    itemSequence: number;
    noteNumber?: number[];
    adjudication: ClaimResponse_Item_Adjudication[];
    detail?: ClaimResponse_Item_Detail[];
};

export type ClaimResponse_Item_Adjudication = BackboneElement & {
    /**
     * A code to indicate the information type of this adjudication record. Information types may include the value submitted, maximum values or percentages allowed or payable under the plan, amounts that: the patient is responsible for in aggregate or pertaining to this item; amounts paid by other coverages; and, the benefit payable for this item.
     */
    category: CodeableConcept;
    /**
     * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
     */
    reason?: CodeableConcept;
    /**
     * Monetary amount associated with the category.
     */
    amount?: Money;
    /**
     * A non&ndash;monetary value associated with the category. Mutually exclusive to the amount element above.
     */
    value?: number;
};

export type ClaimResponse_Item_Detail = BackboneElement & {
    /**
     * A number to uniquely reference the claim detail entry.
     */
    detailSequence: number;
    noteNumber?: number[];
    adjudication: ClaimResponse_Item_Adjudication[];
    subDetail?: ClaimResponse_Item_Detail_SubDetail[];
};

export type ClaimResponse_Item_Detail_SubDetail = BackboneElement & {
    /**
     * A number to uniquely reference the claim sub&ndash;detail entry.
     */
    subDetailSequence: number;
    noteNumber?: number[];
    adjudication?: ClaimResponse_Item_Adjudication[];
};

export type ClaimResponse_Payment = BackboneElement & {
    /**
     * Whether this represents partial or complete payment of the benefits payable.
     */
    type: CodeableConcept;
    /**
     * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
     */
    adjustment?: Money;
    /**
     * Reason for the payment adjustment.
     */
    adjustmentReason?: CodeableConcept;
    /**
     * Estimated date the payment will be issued or the actual issue date of payment.
     */
    date?: string;
    /**
     * Benefits payable less any payment adjustment.
     */
    amount: Money;
    /**
     * Issuer's unique identifier for the payment instrument.
     */
    identifier?: Identifier;
};

export type ClaimResponse_ProcessNote = BackboneElement & {
    /**
     * A number to uniquely identify a note entry.
     */
    number?: number;
    /**
     * The business purpose of the note text.
     */
    type?: string;
    /**
     * The explanation or description associated with the processing.
     */
    text: string;
    /**
     * A code to define the language used in the text of the note.
     */
    language?: CodeableConcept;
};

export type ClaimResponse_Total = BackboneElement & {
    /**
     * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
     */
    category: CodeableConcept;
    /**
     * Monetary total amount associated with the category.
     */
    amount: Money;
};

export type ClinicalImpression = DomainResource & {
    identifier?: Identifier[];
    /**
     * Identifies the workflow status of the assessment.
     */
    status: string;
    /**
     * Captures the reason for the current state of the ClinicalImpression.
     */
    statusReason?: CodeableConcept;
    /**
     * Categorizes the type of clinical assessment performed.
     */
    code?: CodeableConcept;
    /**
     * A summary of the context and/or cause of the assessment &ndash; why / where it was performed, and what patient events/status prompted it.
     */
    description?: string;
    /**
     * The patient or group of individuals assessed as part of this record.
     */
    subject: Reference;
    /**
     * The Encounter during which this ClinicalImpression was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * The point in time or period over which the subject was assessed.
     */
    effectiveDateTime?: string;
    /**
     * The point in time or period over which the subject was assessed.
     */
    effectivePeriod?: Period;
    /**
     * Indicates when the documentation of the assessment was complete.
     */
    date?: string;
    /**
     * The clinician performing the assessment.
     */
    assessor?: Reference;
    /**
     * A reference to the last assessment that was conducted on this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.
     */
    previous?: Reference;
    problem?: Reference[];
    investigation?: ClinicalImpression_Investigation[];
    protocol?: string[];
    /**
     * A text summary of the investigations and the diagnosis.
     */
    summary?: string;
    finding?: ClinicalImpression_Finding[];
    prognosisCodeableConcept?: CodeableConcept[];
    prognosisReference?: Reference[];
    supportingInfo?: Reference[];
    note?: Annotation[];
};

export type ClinicalImpression_Finding = BackboneElement & {
    /**
     * Specific text or code for finding or diagnosis, which may include ruled&ndash;out or resolved conditions.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * Specific reference for finding or diagnosis, which may include ruled&ndash;out or resolved conditions.
     */
    itemReference?: Reference;
    /**
     * Which investigations support finding or diagnosis.
     */
    basis?: string;
};

export type ClinicalImpression_Investigation = BackboneElement & {
    /**
     * A name/code for the group ("set") of investigations. Typically, this will be something like "signs", "symptoms", "clinical", "diagnostic", but the list is not constrained, and others such groups such as (exposure|family|travel|nutritional) history may be used.
     */
    code: CodeableConcept;
    item?: Reference[];
};

export type ClinicalUseDefinition = DomainResource & {
    identifier?: Identifier[];
    /**
     * indication | contraindication | interaction | undesirable&ndash;effect | warning.
     */
    type: string;
    category?: CodeableConcept[];
    subject?: Reference[];
    /**
     * Whether this is a current issue or one that has been retired etc.
     */
    status?: CodeableConcept;
    /**
     * Specifics for when this is a contraindication.
     */
    contraindication?: ClinicalUseDefinition_Contraindication;
    /**
     * Specifics for when this is a contraindication.
     */
    indication?: ClinicalUseDefinition_Indication;
    /**
     * Specifics for when this is an interaction.
     */
    interaction?: ClinicalUseDefinition_Interaction;
    population?: Reference[];
    /**
     * An unwanted side effect or negative outcome that may happen if you use the drug (or other subject of this resource) for this indication.
     */
    undesirableEffect?: ClinicalUseDefinition_UndesirableEffect;
    /**
     * A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'.
     */
    warning?: ClinicalUseDefinition_Warning;
};

export type ClinicalUseDefinition_Contraindication = BackboneElement & {
    /**
     * The situation that is being documented as contraindicating against this item.
     */
    diseaseSymptomProcedure?: CodeableReference;
    /**
     * The status of the disease or symptom for the contraindication, for example "chronic" or "metastatic".
     */
    diseaseStatus?: CodeableReference;
    comorbidity?: CodeableReference[];
    indication?: Reference[];
    otherTherapy?: ClinicalUseDefinition_Contraindication_OtherTherapy[];
};

export type ClinicalUseDefinition_Contraindication_OtherTherapy =
    BackboneElement & {
        /**
         * The type of relationship between the medicinal product indication or contraindication and another therapy.
         */
        relationshipType: CodeableConcept;
        /**
         * Reference to a specific medication (active substance, medicinal product or class of products) as part of an indication or contraindication.
         */
        therapy: CodeableReference;
    };

export type ClinicalUseDefinition_Indication = BackboneElement & {
    /**
     * The situation that is being documented as contraindicating against this item.
     */
    diseaseSymptomProcedure?: CodeableReference;
    /**
     * The status of the disease or symptom for the contraindication, for example "chronic" or "metastatic".
     */
    diseaseStatus?: CodeableReference;
    comorbidity?: CodeableReference[];
    /**
     * The intended effect, aim or strategy to be achieved.
     */
    intendedEffect?: CodeableReference;
    /**
     * Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months).
     */
    durationRange?: Range;
    /**
     * Timing or duration information, that may be associated with use with the indicated condition e.g. Adult patients suffering from myocardial infarction (from a few days until less than 35 days), ischaemic stroke (from 7 days until less than 6 months).
     */
    durationString?: string;
    undesirableEffect?: Reference[];
    otherTherapy?: ClinicalUseDefinition_Contraindication_OtherTherapy[];
};

export type ClinicalUseDefinition_Interaction = BackboneElement & {
    interactant?: ClinicalUseDefinition_Interaction_Interactant[];
    /**
     * The type of the interaction e.g. drug&ndash;drug interaction, drug&ndash;food interaction, drug&ndash;lab test interaction.
     */
    type?: CodeableConcept;
    /**
     * The effect of the interaction, for example "reduced gastric absorption of primary medication".
     */
    effect?: CodeableReference;
    /**
     * The incidence of the interaction, e.g. theoretical, observed.
     */
    incidence?: CodeableConcept;
    management?: CodeableConcept[];
};

export type ClinicalUseDefinition_Interaction_Interactant = BackboneElement & {
    /**
     * The specific medication, food or laboratory test that interacts.
     */
    itemReference?: Reference;
    /**
     * The specific medication, food or laboratory test that interacts.
     */
    itemCodeableConcept?: CodeableConcept;
};

export type ClinicalUseDefinition_UndesirableEffect = BackboneElement & {
    /**
     * The situation in which the undesirable effect may manifest.
     */
    symptomConditionEffect?: CodeableReference;
    /**
     * High level classification of the effect.
     */
    classification?: CodeableConcept;
    /**
     * How often the effect is seen.
     */
    frequencyOfOccurrence?: CodeableConcept;
};

export type ClinicalUseDefinition_Warning = BackboneElement & {
    /**
     * A textual definition of this warning, with formatting.
     */
    description?: string;
    /**
     * A coded or unformatted textual definition of this warning.
     */
    code?: CodeableConcept;
};

export type CodeSystem = DomainResource & {
    /**
     * An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this code system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the code system is stored on different servers. This is used in [Coding](datatypes.html#Coding).system.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version.
     */
    version?: string;
    /**
     * A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the code system.
     */
    title?: string;
    /**
     * The date (and optionally time) when the code system resource was created or revised.
     */
    status: string;
    /**
     * A Boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the code system was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the code system.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the code system from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this code system is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.
     */
    copyright?: string;
    /**
     * If code comparison is case sensitive when codes within this system are compared to each other.
     */
    caseSensitive?: boolean;
    /**
     * Canonical reference to the value set that contains the entire code system.
     */
    valueSet?: string;
    /**
     * The meaning of the hierarchy of concepts as represented in this resource.
     */
    hierarchyMeaning?: string;
    /**
     * The code system defines a compositional (post&ndash;coordination) grammar.
     */
    compositional?: boolean;
    /**
     * This flag is used to signify that the code system does not commit to concept permanence across versions. If true, a version must be specified when referencing this code system.
     */
    versionNeeded?: boolean;
    /**
     * The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
     */
    content: string;
    /**
     * The canonical URL of the code system that this code system supplement is adding designations and properties to.
     */
    supplements?: string;
    /**
     * The total number of concepts defined by the code system. Where the code system has a compositional grammar, the basis of this count is defined by the system steward.
     */
    count?: number;
    filter?: CodeSystem_Filter[];
    property?: CodeSystem_Property[];
    concept?: CodeSystem_Concept[];
};

export type CodeSystem_Concept = BackboneElement & {
    /**
     * A code &ndash; a text symbol &ndash; that uniquely identifies the concept within the code system.
     */
    code: string;
    /**
     * A human readable string that is the recommended default way to present this concept to a user.
     */
    display?: string;
    /**
     * The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.
     */
    definition?: string;
    designation?: CodeSystem_Concept_Designation[];
    property?: CodeSystem_Concept_Property[];
    concept?: CodeSystem_Concept[];
};

export type CodeSystem_Concept_Designation = BackboneElement & {
    /**
     * The language this designation is defined for.
     */
    language?: string;
    /**
     * A code that details how this designation would be used.
     */
    use?: Coding;
    /**
     * The text value for this designation.
     */
    value: string;
};

export type CodeSystem_Concept_Property = BackboneElement & {
    /**
     * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
     */
    code: string;
    /**
     * The value of this property.
     */
    valueCode?: string;
    /**
     * The value of this property.
     */
    valueCoding?: Coding;
    /**
     * The value of this property.
     */
    valueString?: string;
    /**
     * The value of this property.
     */
    valueInteger?: number;
    /**
     * The value of this property.
     */
    valueBoolean?: boolean;
    /**
     * The value of this property.
     */
    valueDateTime?: string;
    /**
     * The value of this property.
     */
    valueDecimal?: number;
};

export type CodeSystem_Filter = BackboneElement & {
    /**
     * The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.
     */
    code: string;
    /**
     * A description of how or why the filter is used.
     */
    description?: string;
    operator: string[];
    /**
     * A description of what the value for the filter should be.
     */
    value: string;
};

export type CodeSystem_Property = BackboneElement & {
    /**
     * A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.
     */
    code: string;
    /**
     * Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem&ndash;concept&ndash;properties.html) code system.
     */
    uri?: string;
    /**
     * A description of the property&ndash; why it is defined, and how its value might be used.
     */
    description?: string;
    /**
     * The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to another defined concept).
     */
    type: string;
};

export type Communication = DomainResource & {
    identifier?: Identifier[];
    instantiatesCanonical?: string[];
    instantiatesUri?: string[];
    basedOn?: Reference[];
    partOf?: Reference[];
    inResponseTo?: Reference[];
    /**
     * The status of the transmission.
     */
    status: string;
    /**
     * Captures the reason for the current state of the Communication.
     */
    statusReason?: CodeableConcept;
    category?: CodeableConcept[];
    /**
     * Characterizes how quickly the planned or in progress communication must be addressed. Includes concepts such as stat, urgent, routine.
     */
    priority?: string;
    medium?: CodeableConcept[];
    /**
     * The patient or group that was the focus of this communication.
     */
    subject?: Reference;
    /**
     * Description of the purpose/content, similar to a subject line in an email.
     */
    topic?: CodeableConcept;
    about?: Reference[];
    /**
     * The Encounter during which this Communication was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * The time when this communication was sent.
     */
    sent?: string;
    /**
     * The time when this communication arrived at the destination.
     */
    received?: string;
    recipient?: Reference[];
    /**
     * The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication.
     */
    sender?: Reference;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    payload?: Communication_Payload[];
    note?: Annotation[];
};

export type Communication_Payload = BackboneElement & {
    /**
     * A communicated content (or for multi&ndash;part communications, one portion of the communication).
     */
    contentString?: string;
    /**
     * A communicated content (or for multi&ndash;part communications, one portion of the communication).
     */
    contentAttachment?: Attachment;
    /**
     * A communicated content (or for multi&ndash;part communications, one portion of the communication).
     */
    contentReference?: Reference;
};

export type CommunicationRequest = DomainResource & {
    identifier?: Identifier[];
    basedOn?: Reference[];
    replaces?: Reference[];
    /**
     * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
     */
    groupIdentifier?: Identifier;
    /**
     * The status of the proposal or order.
     */
    status: string;
    /**
     * Captures the reason for the current state of the CommunicationRequest.
     */
    statusReason?: CodeableConcept;
    category?: CodeableConcept[];
    /**
     * Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
     */
    priority?: string;
    /**
     * If true indicates that the CommunicationRequest is asking for the specified action to *not* occur.
     */
    doNotPerform?: boolean;
    medium?: CodeableConcept[];
    /**
     * The patient or group that is the focus of this communication request.
     */
    subject?: Reference;
    about?: Reference[];
    /**
     * The Encounter during which this CommunicationRequest was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    payload?: CommunicationRequest_Payload[];
    /**
     * The time when this communication is to occur.
     */
    occurrenceDateTime?: string;
    /**
     * The time when this communication is to occur.
     */
    occurrencePeriod?: Period;
    /**
     * For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.
     */
    authoredOn?: string;
    /**
     * The device, individual, or organization who initiated the request and has responsibility for its activation.
     */
    requester?: Reference;
    recipient?: Reference[];
    /**
     * The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
     */
    sender?: Reference;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    note?: Annotation[];
};

export type CommunicationRequest_Payload = BackboneElement & {
    /**
     * The communicated content (or for multi&ndash;part communications, one portion of the communication).
     */
    contentString?: string;
    /**
     * The communicated content (or for multi&ndash;part communications, one portion of the communication).
     */
    contentAttachment?: Attachment;
    /**
     * The communicated content (or for multi&ndash;part communications, one portion of the communication).
     */
    contentReference?: Reference;
};

export type CompartmentDefinition = DomainResource & {
    /**
     * An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this compartment definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the compartment definition is stored on different servers.
     */
    url: string;
    /**
     * The identifier that is used to identify this version of the compartment definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the compartment definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * The status of this compartment definition. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the compartment definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the compartment definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the compartment definition from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    /**
     * Explanation of why this compartment definition is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * Which compartment this definition describes.
     */
    code: string;
    /**
     * Whether the search syntax is supported,.
     */
    search: boolean;
    resource?: CompartmentDefinition_Resource[];
};

export type CompartmentDefinition_Resource = BackboneElement & {
    /**
     * The name of a resource supported by the server.
     */
    code: string;
    param?: string[];
    /**
     * Additional documentation about the resource and compartment.
     */
    documentation?: string;
};

export type Composition = DomainResource & {
    /**
     * A version&ndash;independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
     */
    identifier?: Identifier;
    /**
     * The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
     */
    status: string;
    /**
     * Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
     */
    type: CodeableConcept;
    category?: CodeableConcept[];
    /**
     * Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
     */
    subject?: Reference;
    /**
     * Describes the clinical encounter or type of care this documentation is associated with.
     */
    encounter?: Reference;
    /**
     * The composition editing time, when the composition was last logically changed by the author.
     */
    date: string;
    author: Reference[];
    /**
     * Official human&ndash;readable label for the composition.
     */
    title: string;
    /**
     * The code specifying the level of confidentiality of the Composition.
     */
    confidentiality?: string;
    attester?: Composition_Attester[];
    /**
     * Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
     */
    custodian?: Reference;
    relatesTo?: Composition_RelatesTo[];
    event?: Composition_Event[];
    section?: Composition_Section[];
};

export type Composition_Attester = BackboneElement & {
    /**
     * The type of attestation the authenticator offers.
     */
    mode: string;
    /**
     * When the composition was attested by the party.
     */
    time?: string;
    /**
     * Who attested the composition in the specified way.
     */
    party?: Reference;
};

export type Composition_Event = BackboneElement & {
    code?: CodeableConcept[];
    /**
     * The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
     */
    period?: Period;
    detail?: Reference[];
};

export type Composition_RelatesTo = BackboneElement & {
    /**
     * The type of relationship that this composition has with anther composition or document.
     */
    code: string;
    /**
     * The target composition/document of this relationship.
     */
    targetIdentifier?: Identifier;
    /**
     * The target composition/document of this relationship.
     */
    targetReference?: Reference;
};

export type Composition_Section = BackboneElement & {
    /**
     * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
     */
    title?: string;
    /**
     * A code identifying the kind of content contained within the section. This must be consistent with the section title.
     */
    code?: CodeableConcept;
    author?: Reference[];
    /**
     * The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
     */
    focus?: Reference;
    /**
     * A human&ndash;readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
     */
    text?: Narrative;
    /**
     * How the entry list was prepared &ndash; whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
     */
    mode?: string;
    /**
     * Specifies the order applied to the items in the section entries.
     */
    orderedBy?: CodeableConcept;
    entry?: Reference[];
    /**
     * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
     */
    emptyReason?: CodeableConcept;
    section?: Composition_Section[];
};

export type ConceptMap = DomainResource & {
    /**
     * An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this concept map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the concept map is stored on different servers.
     */
    url?: string;
    /**
     * A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier;
    /**
     * The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the concept map.
     */
    title?: string;
    /**
     * The status of this concept map. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the concept map was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the concept map.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the concept map from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this concept map is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.
     */
    copyright?: string;
    /**
     * Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.
     */
    sourceUri?: string;
    /**
     * Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.
     */
    sourceCanonical?: string;
    /**
     * The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
     */
    targetUri?: string;
    /**
     * The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
     */
    targetCanonical?: string;
    group?: ConceptMap_Group[];
};

export type ConceptMap_Group = BackboneElement & {
    /**
     * An absolute URI that identifies the source system where the concepts to be mapped are defined.
     */
    source?: string;
    /**
     * The specific version of the code system, as determined by the code system authority.
     */
    sourceVersion?: string;
    /**
     * An absolute URI that identifies the target system that the concepts will be mapped to.
     */
    target?: string;
    /**
     * The specific version of the code system, as determined by the code system authority.
     */
    targetVersion?: string;
    element: ConceptMap_Group_Element[];
    /**
     * What to do when there is no mapping for the source concept. "Unmapped" does not include codes that are unmatched, and the unmapped element is ignored in a code is specified to have equivalence = unmatched.
     */
    unmapped?: ConceptMap_Group_Unmapped;
};

export type ConceptMap_Group_Element = BackboneElement & {
    /**
     * Identity (code or path) or the element/item being mapped.
     */
    code?: string;
    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    display?: string;
    target?: ConceptMap_Group_Element_Target[];
};

export type ConceptMap_Group_Element_Target = BackboneElement & {
    /**
     * Identity (code or path) or the element/item that the map refers to.
     */
    code?: string;
    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    display?: string;
    /**
     * The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
     */
    equivalence: string;
    /**
     * A description of status/issues in mapping that conveys additional information not represented in  the structured data.
     */
    comment?: string;
    dependsOn?: ConceptMap_Group_Element_Target_DependsOn[];
    product?: ConceptMap_Group_Element_Target_DependsOn[];
};

export type ConceptMap_Group_Element_Target_DependsOn = BackboneElement & {
    /**
     * A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somewhere that is labeled to correspond with a code system property.
     */
    property: string;
    /**
     * An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
     */
    system?: string;
    /**
     * Identity (code or path) or the element/item/ValueSet/text that the map depends on / refers to.
     */
    value: string;
    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    display?: string;
};

export type ConceptMap_Group_Unmapped = BackboneElement & {
    /**
     * Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
     */
    mode: string;
    /**
     * The fixed code to use when the mode = 'fixed'  &ndash; all unmapped codes are mapped to a single fixed code.
     */
    code?: string;
    /**
     * The display for the code. The display is only provided to help editors when editing the concept map.
     */
    display?: string;
    /**
     * The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.
     */
    url?: string;
};

export type Condition = DomainResource & {
    identifier?: Identifier[];
    /**
     * The clinical status of the condition.
     */
    clinicalStatus?: CodeableConcept;
    /**
     * The verification status to support the clinical status of the condition.
     */
    verificationStatus?: CodeableConcept;
    category?: CodeableConcept[];
    /**
     * A subjective assessment of the severity of the condition as evaluated by the clinician.
     */
    severity?: CodeableConcept;
    /**
     * Identification of the condition, problem or diagnosis.
     */
    code?: CodeableConcept;
    bodySite?: CodeableConcept[];
    /**
     * Indicates the patient or group who the condition record is associated with.
     */
    subject: Reference;
    /**
     * The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Estimated or actual date or date&ndash;time  the condition began, in the opinion of the clinician.
     */
    onsetDateTime?: string;
    /**
     * Estimated or actual date or date&ndash;time  the condition began, in the opinion of the clinician.
     */
    onsetAge?: Age;
    /**
     * Estimated or actual date or date&ndash;time  the condition began, in the opinion of the clinician.
     */
    onsetPeriod?: Period;
    /**
     * Estimated or actual date or date&ndash;time  the condition began, in the opinion of the clinician.
     */
    onsetRange?: Range;
    /**
     * Estimated or actual date or date&ndash;time  the condition began, in the opinion of the clinician.
     */
    onsetString?: string;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" &ndash; Conditions are never really resolved, but they can abate.
     */
    abatementDateTime?: string;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" &ndash; Conditions are never really resolved, but they can abate.
     */
    abatementAge?: Age;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" &ndash; Conditions are never really resolved, but they can abate.
     */
    abatementPeriod?: Period;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" &ndash; Conditions are never really resolved, but they can abate.
     */
    abatementRange?: Range;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" &ndash; Conditions are never really resolved, but they can abate.
     */
    abatementString?: string;
    /**
     * The recordedDate represents when this particular Condition record was created in the system, which is often a system&ndash;generated date.
     */
    recordedDate?: string;
    /**
     * Individual who recorded the record and takes responsibility for its content.
     */
    recorder?: Reference;
    /**
     * Individual who is making the condition statement.
     */
    asserter?: Reference;
    stage?: Condition_Stage[];
    evidence?: Condition_Evidence[];
    note?: Annotation[];
};

export type Condition_Evidence = BackboneElement & {
    code?: CodeableConcept[];
    detail?: Reference[];
};

export type Condition_Stage = BackboneElement & {
    /**
     * A simple summary of the stage such as "Stage 3". The determination of the stage is disease&ndash;specific.
     */
    summary?: CodeableConcept;
    assessment?: Reference[];
    /**
     * The kind of staging, such as pathological or clinical staging.
     */
    type?: CodeableConcept;
};

export type Consent = DomainResource & {
    identifier?: Identifier[];
    /**
     * Indicates the current state of this consent.
     */
    status: string;
    /**
     * A selector of the type of consent being presented: ADR, Privacy, Treatment, Research.  This list is now extensible.
     */
    scope: CodeableConcept;
    category: CodeableConcept[];
    /**
     * The patient/healthcare consumer to whom this consent applies.
     */
    patient?: Reference;
    /**
     * When this  Consent was issued / created / indexed.
     */
    dateTime?: string;
    performer?: Reference[];
    organization?: Reference[];
    /**
     * The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
     */
    sourceAttachment?: Attachment;
    /**
     * The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
     */
    sourceReference?: Reference;
    policy?: Consent_Policy[];
    /**
     * A reference to the specific base computable regulation or policy.
     */
    policyRule?: CodeableConcept;
    verification?: Consent_Verification[];
    /**
     * An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
     */
    provision?: Consent_Provision;
};

export type Consent_Policy = BackboneElement & {
    /**
     * Entity or Organization having regulatory jurisdiction or accountability for  enforcing policies pertaining to Consent Directives.
     */
    authority?: string;
    /**
     * The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
     */
    uri?: string;
};

export type Consent_Provision = BackboneElement & {
    /**
     * Action  to take &ndash; permit or deny &ndash; when the rule conditions are met.  Not permitted in root rule, required in all nested rules.
     */
    type?: string;
    /**
     * The timeframe in this rule is valid.
     */
    period?: Period;
    actor?: Consent_Provision_Actor[];
    action?: CodeableConcept[];
    securityLabel?: Coding[];
    purpose?: Coding[];
    class?: Coding[];
    code?: CodeableConcept[];
    /**
     * Clinical or Operational Relevant period of time that bounds the data controlled by this rule.
     */
    dataPeriod?: Period;
    data?: Consent_Provision_Data[];
    provision?: Consent_Provision[];
};

export type Consent_Provision_Actor = BackboneElement & {
    /**
     * How the individual is involved in the resources content that is described in the exception.
     */
    role: CodeableConcept;
    /**
     * The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
     */
    reference: Reference;
};

export type Consent_Provision_Data = BackboneElement & {
    /**
     * How the resource reference is interpreted when testing consent restrictions.
     */
    meaning: string;
    /**
     * A reference to a specific resource that defines which resources are covered by this consent.
     */
    reference: Reference;
};

export type Consent_Verification = BackboneElement & {
    /**
     * Has the instruction been verified.
     */
    verified: boolean;
    /**
     * Who verified the instruction (Patient, Relative or other Authorized Person).
     */
    verifiedWith?: Reference;
    /**
     * Date verification was collected.
     */
    verificationDate?: string;
};

export type Contract = DomainResource & {
    identifier?: Identifier[];
    /**
     * Canonical identifier for this contract, represented as a URI (globally unique).
     */
    url?: string;
    /**
     * An edition identifier used for business purposes to label business significant variants.
     */
    version?: string;
    /**
     * The status of the resource instance.
     */
    status?: string;
    /**
     * Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.
     */
    legalState?: CodeableConcept;
    /**
     * The URL pointing to a FHIR&ndash;defined Contract Definition that is adhered to in whole or part by this Contract.
     */
    instantiatesCanonical?: Reference;
    /**
     * The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract.
     */
    instantiatesUri?: string;
    /**
     * The minimal content derived from the basal information source at a specific stage in its lifecycle.
     */
    contentDerivative?: CodeableConcept;
    /**
     * When this  Contract was issued.
     */
    issued?: string;
    /**
     * Relevant time or time&ndash;period when this Contract is applicable.
     */
    applies?: Period;
    /**
     * Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.
     */
    expirationType?: CodeableConcept;
    subject?: Reference[];
    authority?: Reference[];
    domain?: Reference[];
    site?: Reference[];
    /**
     * A natural language name identifying this Contract definition, derivative, or instance in any legal state. Provides additional information about its content. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
     */
    title?: string;
    /**
     * An explanatory or alternate user&ndash;friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
     */
    subtitle?: string;
    alias?: string[];
    /**
     * The individual or organization that authored the Contract definition, derivative, or instance in any legal state.
     */
    author?: Reference;
    /**
     * A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.
     */
    scope?: CodeableConcept;
    /**
     * Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
     */
    topicCodeableConcept?: CodeableConcept;
    /**
     * Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
     */
    topicReference?: Reference;
    /**
     * A high&ndash;level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.
     */
    type?: CodeableConcept;
    subType?: CodeableConcept[];
    /**
     * Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
     */
    contentDefinition?: Contract_ContentDefinition;
    term?: Contract_Term[];
    supportingInfo?: Reference[];
    relevantHistory?: Reference[];
    signer?: Contract_Signer[];
    friendly?: Contract_Friendly[];
    legal?: Contract_Legal[];
    rule?: Contract_Rule[];
    /**
     * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
     */
    legallyBindingAttachment?: Attachment;
    /**
     * Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
     */
    legallyBindingReference?: Reference;
};

export type Contract_ContentDefinition = BackboneElement & {
    /**
     * Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.
     */
    type: CodeableConcept;
    /**
     * Detailed Precusory content type.
     */
    subType?: CodeableConcept;
    /**
     * The  individual or organization that published the Contract precursor content.
     */
    publisher?: Reference;
    /**
     * The date (and optionally time) when the contract was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.
     */
    publicationDate?: string;
    /**
     * amended | appended | cancelled | disputed | entered&ndash;in&ndash;error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated.
     */
    publicationStatus: string;
    /**
     * A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.
     */
    copyright?: string;
};

export type Contract_Friendly = BackboneElement & {
    /**
     * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
     */
    contentAttachment?: Attachment;
    /**
     * Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
     */
    contentReference?: Reference;
};

export type Contract_Legal = BackboneElement & {
    /**
     * Contract legal text in human renderable form.
     */
    contentAttachment?: Attachment;
    /**
     * Contract legal text in human renderable form.
     */
    contentReference?: Reference;
};

export type Contract_Rule = BackboneElement & {
    /**
     * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
     */
    contentAttachment?: Attachment;
    /**
     * Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
     */
    contentReference?: Reference;
};

export type Contract_Signer = BackboneElement & {
    /**
     * Role of this Contract signer, e.g. notary, grantee.
     */
    type: Coding;
    /**
     * Party which is a signator to this Contract.
     */
    party: Reference;
    signature: Signature[];
};

export type Contract_Term = BackboneElement & {
    /**
     * Unique identifier for this particular Contract Provision.
     */
    identifier?: Identifier;
    /**
     * When this Contract Provision was issued.
     */
    issued?: string;
    /**
     * Relevant time or time&ndash;period when this Contract Provision is applicable.
     */
    applies?: Period;
    /**
     * The entity that the term applies to.
     */
    topicCodeableConcept?: CodeableConcept;
    /**
     * The entity that the term applies to.
     */
    topicReference?: Reference;
    /**
     * A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
     */
    type?: CodeableConcept;
    /**
     * A specialized legal clause or condition based on overarching contract type.
     */
    subType?: CodeableConcept;
    /**
     * Statement of a provision in a policy or a contract.
     */
    text?: string;
    securityLabel?: Contract_Term_SecurityLabel[];
    /**
     * The matter of concern in the context of this provision of the agrement.
     */
    offer: Contract_Term_Offer;
    asset?: Contract_Term_Asset[];
    action?: Contract_Term_Action[];
    group?: Contract_Term[];
};

export type Contract_Term_Action = BackboneElement & {
    /**
     * True if the term prohibits the  action.
     */
    doNotPerform?: boolean;
    /**
     * Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.
     */
    type: CodeableConcept;
    subject?: Contract_Term_Action_Subject[];
    /**
     * Reason or purpose for the action stipulated by this Contract Provision.
     */
    intent: CodeableConcept;
    linkId?: string[];
    /**
     * Current state of the term action.
     */
    status: CodeableConcept;
    /**
     * Encounter or Episode with primary association to specified term activity.
     */
    context?: Reference;
    contextLinkId?: string[];
    /**
     * When action happens.
     */
    occurrenceDateTime?: string;
    /**
     * When action happens.
     */
    occurrencePeriod?: Period;
    /**
     * When action happens.
     */
    occurrenceTiming?: Timing;
    requester?: Reference[];
    requesterLinkId?: string[];
    performerType?: CodeableConcept[];
    /**
     * The type of role or competency of an individual desired or required to perform or not perform the action.
     */
    performerRole?: CodeableConcept;
    /**
     * Indicates who or what is being asked to perform (or not perform) the ction.
     */
    performer?: Reference;
    performerLinkId?: string[];
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    reason?: string[];
    reasonLinkId?: string[];
    note?: Annotation[];
    securityLabelNumber?: number[];
};

export type Contract_Term_Action_Subject = BackboneElement & {
    reference: Reference[];
    /**
     * Role type of agent assigned roles in this Contract.
     */
    role?: CodeableConcept;
};

export type Contract_Term_Asset = BackboneElement & {
    /**
     * Differentiates the kind of the asset .
     */
    scope?: CodeableConcept;
    type?: CodeableConcept[];
    typeReference?: Reference[];
    subtype?: CodeableConcept[];
    /**
     * Specifies the applicability of the term to an asset resource instance, and instances it refers to orinstances that refer to it, and/or are owned by the offeree.
     */
    relationship?: Coding;
    context?: Contract_Term_Asset_Context[];
    /**
     * Description of the quality and completeness of the asset that imay be a factor in its valuation.
     */
    condition?: string;
    periodType?: CodeableConcept[];
    period?: Period[];
    usePeriod?: Period[];
    /**
     * Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.
     */
    text?: string;
    linkId?: string[];
    answer?: Contract_Term_Offer_Answer[];
    securityLabelNumber?: number[];
    valuedItem?: Contract_Term_Asset_ValuedItem[];
};

export type Contract_Term_Asset_Context = BackboneElement & {
    /**
     * Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction.
     */
    reference?: Reference;
    code?: CodeableConcept[];
    /**
     * Context description.
     */
    text?: string;
};

export type Contract_Term_Asset_ValuedItem = BackboneElement & {
    /**
     * Specific type of Contract Valued Item that may be priced.
     */
    entityCodeableConcept?: CodeableConcept;
    /**
     * Specific type of Contract Valued Item that may be priced.
     */
    entityReference?: Reference;
    /**
     * Identifies a Contract Valued Item instance.
     */
    identifier?: Identifier;
    /**
     * Indicates the time during which this Contract ValuedItem information is effective.
     */
    effectiveTime?: string;
    /**
     * Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
     */
    quantity?: SimpleQuantity;
    /**
     * A Contract Valued Item unit valuation measure.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
     */
    points?: number;
    /**
     * Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
     */
    net?: Money;
    /**
     * Terms of valuation.
     */
    payment?: string;
    /**
     * When payment is due.
     */
    paymentDate?: string;
    /**
     * Who will make payment.
     */
    responsible?: Reference;
    /**
     * Who will receive payment.
     */
    recipient?: Reference;
    linkId?: string[];
    securityLabelNumber?: number[];
};

export type Contract_Term_Offer = BackboneElement & {
    identifier?: Identifier[];
    party?: Contract_Term_Offer_Party[];
    /**
     * The owner of an asset has the residual control rights over the asset: the right to decide all usages of the asset in any way not inconsistent with a prior contract, custom, or law (Hart, 1995, p. 30).
     */
    topic?: Reference;
    /**
     * Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
     */
    type?: CodeableConcept;
    /**
     * Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.
     */
    decision?: CodeableConcept;
    decisionMode?: CodeableConcept[];
    answer?: Contract_Term_Offer_Answer[];
    /**
     * Human readable form of this Contract Offer.
     */
    text?: string;
    linkId?: string[];
    securityLabelNumber?: number[];
};

export type Contract_Term_Offer_Answer = BackboneElement & {
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueBoolean?: boolean;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueDecimal?: number;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueInteger?: number;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueDate?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueDateTime?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueTime?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueString?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueUri?: string;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueAttachment?: Attachment;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueCoding?: Coding;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueQuantity?: Quantity;
    /**
     * Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
     */
    valueReference?: Reference;
};

export type Contract_Term_Offer_Party = BackboneElement & {
    reference: Reference[];
    /**
     * How the party participates in the offer.
     */
    role: CodeableConcept;
};

export type Contract_Term_SecurityLabel = BackboneElement & {
    number?: number[];
    /**
     * Security label privacy tag that species the level of confidentiality protection required for this term and/or term elements.
     */
    classification: Coding;
    category?: Coding[];
    control?: Coding[];
};

export type Coverage = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: string;
    /**
     * The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
     */
    type?: CodeableConcept;
    /**
     * The party who 'owns' the insurance policy.
     */
    policyHolder?: Reference;
    /**
     * The party who has signed&ndash;up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
     */
    subscriber?: Reference;
    /**
     * The insurer assigned ID for the Subscriber.
     */
    subscriberId?: string;
    /**
     * The party who benefits from the insurance coverage; the patient when products and/or services are provided.
     */
    beneficiary: Reference;
    /**
     * A unique identifier for a dependent under the coverage.
     */
    dependent?: string;
    /**
     * The relationship of beneficiary (patient) to the subscriber.
     */
    relationship?: CodeableConcept;
    /**
     * Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
     */
    period?: Period;
    payor: Reference[];
    class?: Coverage_Class[];
    /**
     * The order of applicability of this coverage relative to other coverages which are currently in force. Note, there may be gaps in the numbering and this does not imply primary, secondary etc. as the specific positioning of coverages depends upon the episode of care.
     */
    order?: number;
    /**
     * The insurer&ndash;specific identifier for the insurer&ndash;defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in&ndash;network' rate, otherwise 'out of network' terms and conditions apply.
     */
    network?: string;
    costToBeneficiary?: Coverage_CostToBeneficiary[];
    /**
     * When 'subrogation=true' this insurance instance has been included not for adjudication but to provide insurers with the details to recover costs.
     */
    subrogation?: boolean;
    contract?: Reference[];
};

export type Coverage_Class = BackboneElement & {
    /**
     * The type of classification for which an insurer&ndash;specific class label or number and optional name is provided, for example may be used to identify a class of coverage or employer group, Policy, Plan.
     */
    type: CodeableConcept;
    /**
     * The alphanumeric string value associated with the insurer issued label.
     */
    value: string;
    /**
     * A short description for the class.
     */
    name?: string;
};

export type Coverage_CostToBeneficiary = BackboneElement & {
    /**
     * The category of patient centric costs associated with treatment.
     */
    type?: CodeableConcept;
    /**
     * The amount due from the patient for the cost category.
     */
    valueQuantity?: SimpleQuantity;
    /**
     * The amount due from the patient for the cost category.
     */
    valueMoney?: Money;
    exception?: Coverage_CostToBeneficiary_Exception[];
};

export type Coverage_CostToBeneficiary_Exception = BackboneElement & {
    /**
     * The code for the specific exception.
     */
    type: CodeableConcept;
    /**
     * The timeframe during when the exception is in force.
     */
    period?: Period;
};

export type CoverageEligibilityRequest = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: string;
    /**
     * When the requestor expects the processor to complete processing.
     */
    priority?: CodeableConcept;
    purpose: string[];
    /**
     * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
     */
    patient: Reference;
    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedDate?: string;
    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * The date when this resource was created.
     */
    created: string;
    /**
     * Person who created the request.
     */
    enterer?: Reference;
    /**
     * The provider which is responsible for the request.
     */
    provider?: Reference;
    /**
     * The Insurer who issued the coverage in question and is the recipient of the request.
     */
    insurer: Reference;
    /**
     * Facility where the services are intended to be provided.
     */
    facility?: Reference;
    supportingInfo?: CoverageEligibilityRequest_SupportingInfo[];
    insurance?: CoverageEligibilityRequest_Insurance[];
    item?: CoverageEligibilityRequest_Item[];
};

export type CoverageEligibilityRequest_Insurance = BackboneElement & {
    /**
     * A flag to indicate that this Coverage is to be used for evaluation of this request when set to true.
     */
    focal?: boolean;
    /**
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * A business agreement number established between the provider and the insurer for special business processing purposes.
     */
    businessArrangement?: string;
};

export type CoverageEligibilityRequest_Item = BackboneElement & {
    supportingInfoSequence?: number[];
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * This contains the product, service, drug or other billing code for the item.
     */
    productOrService?: CodeableConcept;
    modifier?: CodeableConcept[];
    /**
     * The practitioner who is responsible for the product or service to be rendered to the patient.
     */
    provider?: Reference;
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * The amount charged to the patient by the provider for a single unit.
     */
    unitPrice?: Money;
    /**
     * Facility where the services will be provided.
     */
    facility?: Reference;
    diagnosis?: CoverageEligibilityRequest_Item_Diagnosis[];
    detail?: Reference[];
};

export type CoverageEligibilityRequest_Item_Diagnosis = BackboneElement & {
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisCodeableConcept?: CodeableConcept;
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisReference?: Reference;
};

export type CoverageEligibilityRequest_SupportingInfo = BackboneElement & {
    /**
     * A number to uniquely identify supporting information entries.
     */
    sequence: number;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    information: Reference;
    /**
     * The supporting materials are applicable for all detail items, product/servce categories and specific billing codes.
     */
    appliesToAll?: boolean;
};

export type CoverageEligibilityResponse = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: string;
    purpose: string[];
    /**
     * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
     */
    patient: Reference;
    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedDate?: string;
    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * The date this resource was created.
     */
    created: string;
    /**
     * The provider which is responsible for the request.
     */
    requestor?: Reference;
    /**
     * Reference to the original request resource.
     */
    request: Reference;
    /**
     * The outcome of the request processing.
     */
    outcome: string;
    /**
     * A human readable description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * The Insurer who issued the coverage in question and is the author of the response.
     */
    insurer: Reference;
    insurance?: CoverageEligibilityResponse_Insurance[];
    /**
     * A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
     */
    preAuthRef?: string;
    /**
     * A code for the form to be used for printing the content.
     */
    form?: CodeableConcept;
    error?: CoverageEligibilityResponse_Error[];
};

export type CoverageEligibilityResponse_Error = BackboneElement & {
    /**
     * An error code,from a specified code system, which details why the eligibility check could not be performed.
     */
    code: CodeableConcept;
};

export type CoverageEligibilityResponse_Insurance = BackboneElement & {
    /**
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    /**
     * Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
     */
    inforce?: boolean;
    /**
     * The term of the benefits documented in this response.
     */
    benefitPeriod?: Period;
    item?: CoverageEligibilityResponse_Insurance_Item[];
};

export type CoverageEligibilityResponse_Insurance_Item = BackboneElement & {
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * This contains the product, service, drug or other billing code for the item.
     */
    productOrService?: CodeableConcept;
    modifier?: CodeableConcept[];
    /**
     * The practitioner who is eligible for the provision of the product or service.
     */
    provider?: Reference;
    /**
     * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
     */
    excluded?: boolean;
    /**
     * A short name or tag for the benefit.
     */
    name?: string;
    /**
     * A richer description of the benefit or services covered.
     */
    description?: string;
    /**
     * Is a flag to indicate whether the benefits refer to in&ndash;network providers or out&ndash;of&ndash;network providers.
     */
    network?: CodeableConcept;
    /**
     * Indicates if the benefits apply to an individual or to the family.
     */
    unit?: CodeableConcept;
    /**
     * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
     */
    term?: CodeableConcept;
    benefit?: CoverageEligibilityResponse_Insurance_Item_Benefit[];
    /**
     * A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
     */
    authorizationRequired?: boolean;
    authorizationSupporting?: CodeableConcept[];
    /**
     * A web location for obtaining requirements or descriptive information regarding the preauthorization.
     */
    authorizationUrl?: string;
};

export type CoverageEligibilityResponse_Insurance_Item_Benefit =
    BackboneElement & {
        /**
         * Classification of benefit being provided.
         */
        type: CodeableConcept;
        /**
         * The quantity of the benefit which is permitted under the coverage.
         */
        allowedUnsignedInt?: number;
        /**
         * The quantity of the benefit which is permitted under the coverage.
         */
        allowedString?: string;
        /**
         * The quantity of the benefit which is permitted under the coverage.
         */
        allowedMoney?: Money;
        /**
         * The quantity of the benefit which have been consumed to date.
         */
        usedUnsignedInt?: number;
        /**
         * The quantity of the benefit which have been consumed to date.
         */
        usedString?: string;
        /**
         * The quantity of the benefit which have been consumed to date.
         */
        usedMoney?: Money;
    };

export type DetectedIssue = DomainResource & {
    identifier?: Identifier[];
    /**
     * Indicates the status of the detected issue.
     */
    status: string;
    /**
     * Identifies the general type of issue identified.
     */
    code?: CodeableConcept;
    /**
     * Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
     */
    severity?: string;
    /**
     * Indicates the patient whose record the detected issue is associated with.
     */
    patient?: Reference;
    /**
     * The date or period when the detected issue was initially identified.
     */
    identifiedDateTime?: string;
    /**
     * The date or period when the detected issue was initially identified.
     */
    identifiedPeriod?: Period;
    /**
     * Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.
     */
    author?: Reference;
    implicated?: Reference[];
    evidence?: DetectedIssue_Evidence[];
    /**
     * Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
     */
    detail?: string;
    /**
     * The literature, knowledge&ndash;base or similar reference that describes the propensity for the detected issue identified.
     */
    reference?: string;
    mitigation?: DetectedIssue_Mitigation[];
};

export type DetectedIssue_Evidence = BackboneElement & {
    code?: CodeableConcept[];
    detail?: Reference[];
};

export type DetectedIssue_Mitigation = BackboneElement & {
    /**
     * Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
     */
    action: CodeableConcept;
    /**
     * Indicates when the mitigating action was documented.
     */
    date?: string;
    /**
     * Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
     */
    author?: Reference;
};

export type Device = DomainResource & {
    identifier?: Identifier[];
    /**
     * The reference to the definition for the device.
     */
    definition?: Reference;
    udiCarrier?: Device_UdiCarrier[];
    /**
     * Status of the Device availability.
     */
    status?: string;
    statusReason?: CodeableConcept[];
    /**
     * The distinct identification string as required by regulation for a human cell, tissue, or cellular and tissue&ndash;based product.
     */
    distinctIdentifier?: string;
    /**
     * A name of the manufacturer.
     */
    manufacturer?: string;
    /**
     * The date and time when the device was manufactured.
     */
    manufactureDate?: string;
    /**
     * The date and time beyond which this device is no longer valid or should not be used (if applicable).
     */
    expirationDate?: string;
    /**
     * Lot number assigned by the manufacturer.
     */
    lotNumber?: string;
    /**
     * The serial number assigned by the organization when the device was manufactured.
     */
    serialNumber?: string;
    deviceName?: Device_DeviceName[];
    /**
     * The manufacturer's model number for the device.
     */
    modelNumber?: string;
    /**
     * The part number or catalog number of the device.
     */
    partNumber?: string;
    /**
     * The type of deviceName.
     * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
     */
    type?: CodeableConcept;
    specialization?: Device_Specialization[];
    version?: Device_Version[];
    property?: Device_Property[];
    /**
     * Patient information, If the device is affixed to a person.
     */
    patient?: Reference;
    /**
     * An organization that is responsible for the provision and ongoing maintenance of the device.
     */
    owner?: Reference;
    contact?: ContactPoint[];
    /**
     * The place where the device can be found.
     */
    location?: Reference;
    /**
     * A network address on which the device may be contacted directly.
     */
    url?: string;
    note?: Annotation[];
    safety?: CodeableConcept[];
    /**
     * The device that this device is attached to or is part of.
     */
    parent?: Reference;
};

export type Device_DeviceName = BackboneElement & {
    /**
     * The name that identifies the device.
     */
    name: string;
    /**
     * The type of deviceName.
     * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
     */
    type: string;
};

export type Device_Property = BackboneElement & {
    /**
     * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
     */
    type: CodeableConcept;
    valueQuantity?: Quantity[];
    valueCode?: CodeableConcept[];
};

export type Device_Specialization = BackboneElement & {
    /**
     * The standard that is used to operate and communicate.
     */
    systemType: CodeableConcept;
    /**
     * The version of the standard that is used to operate and communicate.
     */
    version?: string;
};

export type Device_UdiCarrier = BackboneElement & {
    /**
     * The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
     */
    deviceIdentifier?: string;
    /**
     * Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
     * 1) GS1:
     * http://hl7.org/fhir/NamingSystem/gs1&ndash;di,
     * 2) HIBCC:
     * http://hl7.org/fhir/NamingSystem/hibcc&ndash;dI,
     * 3) ICCBBA for blood containers:
     * http://hl7.org/fhir/NamingSystem/iccbba&ndash;blood&ndash;di,
     * 4) ICCBA for other devices:
     * http://hl7.org/fhir/NamingSystem/iccbba&ndash;other&ndash;di.
     */
    issuer?: string;
    /**
     * The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda&ndash;udi.
     */
    jurisdiction?: string;
    /**
     * The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device &ndash; e.g., a barcode or RFID.   Because of limitations on character sets in XML and the need to round&ndash;trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded.
     */
    carrierAIDC?: string;
    /**
     * The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device.
     */
    carrierHRF?: string;
    /**
     * A coded entry to indicate how the data was entered.
     */
    entryType?: string;
};

export type Device_Version = BackboneElement & {
    /**
     * The type of the device version, e.g. manufacturer, approved, internal.
     */
    type?: CodeableConcept;
    /**
     * A single component of the device version.
     */
    component?: Identifier;
    /**
     * The version text.
     */
    value: string;
};

export type RiskAssessment = DomainResource & {
    identifier?: Identifier[];
    /**
     * A reference to the request that is fulfilled by this risk assessment.
     */
    basedOn?: Reference;
    /**
     * A reference to a resource that this risk assessment is part of, such as a Procedure.
     */
    parent?: Reference;
    /**
     * The status of the RiskAssessment, using the same statuses as an Observation.
     */
    status: string;
    /**
     * The algorithm, process or mechanism used to evaluate the risk.
     */
    method?: CodeableConcept;
    /**
     * The type of the risk assessment performed.
     */
    code?: CodeableConcept;
    /**
     * The patient or group the risk assessment applies to.
     */
    subject: Reference;
    /**
     * The encounter where the assessment was performed.
     */
    encounter?: Reference;
    /**
     * The date (and possibly time) the risk assessment was performed.
     */
    occurrenceDateTime?: string;
    /**
     * The date (and possibly time) the risk assessment was performed.
     */
    occurrencePeriod?: Period;
    /**
     * For assessments or prognosis specific to a particular condition, indicates the condition being assessed.
     */
    condition?: Reference;
    /**
     * The provider or software application that performed the assessment.
     */
    performer?: Reference;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    basis?: Reference[];
    prediction?: RiskAssessment_Prediction[];
    /**
     * A description of the steps that might be taken to reduce the identified risk(s).
     */
    mitigation?: string;
    note?: Annotation[];
};

export type RiskAssessment_Prediction = BackboneElement & {
    /**
     * One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).
     */
    outcome?: CodeableConcept;
    /**
     * Indicates how likely the outcome is (in the specified timeframe).
     */
    probabilityDecimal?: number;
    /**
     * Indicates how likely the outcome is (in the specified timeframe).
     */
    probabilityRange?: Range;
    /**
     * Indicates how likely the outcome is (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, or high).
     */
    qualitativeRisk?: CodeableConcept;
    /**
     * Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).
     */
    relativeRisk?: number;
    /**
     * Indicates the period of time or age range of the subject to which the specified probability applies.
     */
    whenPeriod?: Period;
    /**
     * Indicates the period of time or age range of the subject to which the specified probability applies.
     */
    whenRange?: Range;
    /**
     * Additional information explaining the basis for the prediction.
     */
    rationale?: string;
};

export type Group = DomainResource & {
    identifier?: Identifier[];
    /**
     * Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
     */
    active?: boolean;
    /**
     * Identifies the broad classification of the kind of resources the group includes.
     */
    type: string;
    /**
     * If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
     */
    actual: boolean;
    /**
     * Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
     */
    code?: CodeableConcept;
    /**
     * A label assigned to the group for human identification and communication.
     */
    name?: string;
    /**
     * A count of the number of resource instances that are part of the group.
     */
    quantity?: number;
    /**
     * Entity responsible for defining and maintaining Group characteristics and/or registered members.
     */
    managingEntity?: Reference;
    characteristic?: Group_Characteristic[];
    member?: Group_Member[];
};

export type Group_Characteristic = BackboneElement & {
    /**
     * A code that identifies the kind of trait being asserted.
     */
    code: CodeableConcept;
    /**
     * The value of the trait that holds (or does not hold &ndash; see 'exclude') for members of the group.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The value of the trait that holds (or does not hold &ndash; see 'exclude') for members of the group.
     */
    valueBoolean?: boolean;
    /**
     * The value of the trait that holds (or does not hold &ndash; see 'exclude') for members of the group.
     */
    valueQuantity?: Quantity;
    /**
     * The value of the trait that holds (or does not hold &ndash; see 'exclude') for members of the group.
     */
    valueRange?: Range;
    /**
     * The value of the trait that holds (or does not hold &ndash; see 'exclude') for members of the group.
     */
    valueReference?: Reference;
    /**
     * If true, indicates the characteristic is one that is NOT held by members of the group.
     */
    exclude: boolean;
    /**
     * The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
     */
    period?: Period;
};

export type Group_Member = BackboneElement & {
    /**
     * A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
     */
    entity: Reference;
    /**
     * The period that the member was in the group, if known.
     */
    period?: Period;
    /**
     * A flag to indicate that the member is no longer in the group, but previously may have been a member.
     */
    inactive?: boolean;
};

export type Provenance = DomainResource & {
    target: Reference[];
    /**
     * The period during which the activity occurred.
     */
    occurredPeriod?: Period;
    /**
     * The period during which the activity occurred.
     */
    occurredDateTime?: string;
    /**
     * The instant of time at which the activity was recorded.
     */
    recorded: string;
    policy?: string[];
    /**
     * Where the activity occurred, if relevant.
     */
    location?: Reference;
    reason?: CodeableConcept[];
    /**
     * An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.
     */
    activity?: CodeableConcept;
    agent: Provenance_Agent[];
    entity?: Provenance_Entity[];
    signature?: Signature[];
};

export type Provenance_Agent = BackboneElement & {
    /**
     * The participation the agent had with respect to the activity.
     */
    type?: CodeableConcept;
    role?: CodeableConcept[];
    /**
     * The individual, device or organization that participated in the event.
     */
    who: Reference;
    /**
     * The individual, device, or organization for whom the change was made.
     */
    onBehalfOf?: Reference;
};

export type Provenance_Entity = BackboneElement & {
    /**
     * How the entity was used during the activity.
     */
    role: string;
    /**
     * Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.
     */
    what: Reference;
    agent?: Provenance_Agent[];
};

export type Invoice = DomainResource & {
    identifier?: Identifier[];
    /**
     * The current state of the Invoice.
     */
    status: string;
    /**
     * In case of Invoice cancellation a reason must be given (entered in error, superseded by corrected invoice etc.).
     */
    cancelledReason?: string;
    /**
     * Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary).
     */
    type?: CodeableConcept;
    /**
     * The individual or set of individuals receiving the goods and services billed in this invoice.
     */
    subject?: Reference;
    /**
     * The individual or Organization responsible for balancing of this invoice.
     */
    recipient?: Reference;
    /**
     * Date/time(s) of when this Invoice was posted.
     */
    date?: string;
    participant?: Invoice_Participant[];
    /**
     * The organizationissuing the Invoice.
     */
    issuer?: Reference;
    /**
     * Account which is supposed to be balanced with this Invoice.
     */
    account?: Reference;
    lineItem?: Invoice_LineItem[];
    totalPriceComponent?: Invoice_LineItem_PriceComponent[];
    /**
     * Invoice total , taxes excluded.
     */
    totalNet?: Money;
    /**
     * Invoice total, tax included.
     */
    totalGross?: Money;
    /**
     * Payment details such as banking details, period of payment, deductibles, methods of payment.
     */
    paymentTerms?: string;
    note?: Annotation[];
};

export type Invoice_LineItem = BackboneElement & {
    /**
     * Sequence in which the items appear on the invoice.
     */
    sequence?: number;
    /**
     * The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
     */
    chargeItemReference?: Reference;
    /**
     * The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
     */
    chargeItemCodeableConcept?: CodeableConcept;
    priceComponent?: Invoice_LineItem_PriceComponent[];
};

export type Invoice_LineItem_PriceComponent = BackboneElement & {
    /**
     * This code identifies the type of the component.
     */
    type: string;
    /**
     * A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
     */
    code?: CodeableConcept;
    /**
     * The factor that has been applied on the base price for calculating this component.
     */
    factor?: number;
    /**
     * The amount calculated for this component.
     */
    amount?: Money;
};

export type Invoice_Participant = BackboneElement & {
    /**
     * Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.
     */
    role?: CodeableConcept;
    /**
     * The device, practitioner, etc. who performed or participated in the service.
     */
    actor: Reference;
};

export type DiagnosticReport = DomainResource & {
    identifier?: Identifier[];
    basedOn?: Reference[];
    /**
     * The status of the diagnostic report.
     */
    status: string;
    category?: CodeableConcept[];
    /**
     * A code or name that describes this diagnostic report.
     */
    code: CodeableConcept;
    /**
     * The subject of the report. Usually, but not always, this is a patient. However, diagnostic services also perform analyses on specimens collected from a variety of other sources.
     */
    subject?: Reference;
    /**
     * The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport is about.
     */
    encounter?: Reference;
    /**
     * The time or time&ndash;period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveDateTime?: string;
    /**
     * The time or time&ndash;period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.
     */
    effectivePeriod?: Period;
    /**
     * The date and time that this version of the report was made available to providers, typically after the report was reviewed and verified.
     */
    issued?: string;
    performer?: Reference[];
    resultsInterpreter?: Reference[];
    specimen?: Reference[];
    result?: Reference[];
    imagingStudy?: Reference[];
    media?: DiagnosticReport_Media[];
    /**
     * Concise and clinically contextualized summary conclusion (interpretation/impression) of the diagnostic report.
     */
    conclusion?: string;
    conclusionCode?: CodeableConcept[];
    presentedForm?: Attachment[];
};

export type DiagnosticReport_Media = BackboneElement & {
    /**
     * A comment about the image. Typically, this is used to provide an explanation for why the image is included, or to draw the viewer's attention to important features.
     */
    comment?: string;
    /**
     * Reference to the image source.
     */
    link: Reference;
};

export type ExplanationOfBenefit = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: string;
    /**
     * The category of claim, e.g. oral, pharmacy, vision, institutional, professional.
     */
    type: CodeableConcept;
    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    subType?: CodeableConcept;
    /**
     * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non&ndash;binding adjudication of the listed products and services which could be provided in the future.
     */
    use: string;
    /**
     * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.
     */
    patient: Reference;
    /**
     * The period for which charges are being submitted.
     */
    billablePeriod?: Period;
    /**
     * The date this resource was created.
     */
    created: string;
    /**
     * Individual who created the claim, predetermination or preauthorization.
     */
    enterer?: Reference;
    /**
     * The party responsible for authorization, adjudication and reimbursement.
     */
    insurer: Reference;
    /**
     * The provider which is responsible for the claim, predetermination or preauthorization.
     */
    provider: Reference;
    /**
     * The provider&ndash;required urgency of processing the request. Typical values include: stat, routine deferred.
     */
    priority?: CodeableConcept;
    /**
     * A code to indicate whether and for whom funds are to be reserved for future claims.
     */
    fundsReserveRequested?: CodeableConcept;
    /**
     * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
     */
    fundsReserve?: CodeableConcept;
    related?: ExplanationOfBenefit_Related[];
    /**
     * Prescription to support the dispensing of pharmacy, device or vision products.
     */
    prescription?: Reference;
    /**
     * Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.
     */
    originalPrescription?: Reference;
    /**
     * The party to be reimbursed for cost of the products and services according to the terms of the policy.
     */
    payee?: ExplanationOfBenefit_Payee;
    /**
     * A reference to a referral resource.
     */
    referral?: Reference;
    /**
     * Facility where the services were provided.
     */
    facility?: Reference;
    /**
     * Reference to a related claim.
     */
    claim?: Reference;
    /**
     * The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.
     */
    claimResponse?: Reference;
    /**
     * The outcome of the claim, predetermination, or preauthorization processing.
     */
    outcome: string;
    /**
     * A human readable description of the status of the adjudication.
     */
    disposition?: string;
    preAuthRef?: string[];
    preAuthRefPeriod?: Period[];
    careTeam?: ExplanationOfBenefit_CareTeam[];
    supportingInfo?: ExplanationOfBenefit_SupportingInfo[];
    diagnosis?: ExplanationOfBenefit_Diagnosis[];
    procedure?: ExplanationOfBenefit_Procedure[];
    /**
     * This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.
     */
    precedence?: number;
    insurance: ExplanationOfBenefit_Insurance[];
    /**
     * Details of a accident which resulted in injuries which required the products and services listed in the claim.
     */
    accident?: ExplanationOfBenefit_Accident;
    item?: ExplanationOfBenefit_Item[];
    addItem?: ExplanationOfBenefit_AddItem[];
    adjudication?: ExplanationOfBenefit_Item_Adjudication[];
    total?: ExplanationOfBenefit_Total[];
    /**
     * Payment details for the adjudication of the claim.
     */
    payment?: ExplanationOfBenefit_Payment;
    /**
     * A code for the form to be used for printing the content.
     */
    formCode?: CodeableConcept;
    /**
     * The actual form, by reference or inclusion, for printing the content or an EOB.
     */
    form?: Attachment;
    processNote?: ExplanationOfBenefit_ProcessNote[];
    /**
     * The term of the benefits documented in this response.
     */
    benefitPeriod?: Period;
    benefitBalance?: ExplanationOfBenefit_BenefitBalance[];
};

export type ExplanationOfBenefit_Accident = BackboneElement & {
    /**
     * Date of an accident event  related to the products and services contained in the claim.
     */
    date?: string;
    /**
     * The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
     */
    type?: CodeableConcept;
    /**
     * The physical location of the accident event.
     */
    locationAddress?: Address;
    /**
     * The physical location of the accident event.
     */
    locationReference?: Reference;
};

export type ExplanationOfBenefit_AddItem = BackboneElement & {
    itemSequence?: number[];
    detailSequence?: number[];
    subDetailSequence?: number[];
    provider?: Reference[];
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: string;
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    bodySite?: CodeableConcept;
    subSite?: CodeableConcept[];
    noteNumber?: number[];
    adjudication?: ExplanationOfBenefit_Item_Adjudication[];
    detail?: ExplanationOfBenefit_AddItem_Detail[];
};

export type ExplanationOfBenefit_AddItem_Detail = BackboneElement & {
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    noteNumber?: number[];
    adjudication?: ExplanationOfBenefit_Item_Adjudication[];
    subDetail?: ExplanationOfBenefit_AddItem_Detail_SubDetail[];
};

export type ExplanationOfBenefit_AddItem_Detail_SubDetail = BackboneElement & {
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    noteNumber?: number[];
    adjudication?: ExplanationOfBenefit_Item_Adjudication[];
};

export type ExplanationOfBenefit_BenefitBalance = BackboneElement & {
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category: CodeableConcept;
    /**
     * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
     */
    excluded?: boolean;
    /**
     * A short name or tag for the benefit.
     */
    name?: string;
    /**
     * A richer description of the benefit or services covered.
     */
    description?: string;
    /**
     * Is a flag to indicate whether the benefits refer to in&ndash;network providers or out&ndash;of&ndash;network providers.
     */
    network?: CodeableConcept;
    /**
     * Indicates if the benefits apply to an individual or to the family.
     */
    unit?: CodeableConcept;
    /**
     * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
     */
    term?: CodeableConcept;
    financial?: ExplanationOfBenefit_BenefitBalance_Financial[];
};

export type ExplanationOfBenefit_BenefitBalance_Financial = BackboneElement & {
    /**
     * Classification of benefit being provided.
     */
    type: CodeableConcept;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedUnsignedInt?: number;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedString?: string;
    /**
     * The quantity of the benefit which is permitted under the coverage.
     */
    allowedMoney?: Money;
    /**
     * The quantity of the benefit which have been consumed to date.
     */
    usedUnsignedInt?: number;
    /**
     * The quantity of the benefit which have been consumed to date.
     */
    usedMoney?: Money;
};

export type ExplanationOfBenefit_CareTeam = BackboneElement & {
    /**
     * A number to uniquely identify care team entries.
     */
    sequence: number;
    /**
     * Member of the team who provided the product or service.
     */
    provider: Reference;
    /**
     * The party who is billing and/or responsible for the claimed products or services.
     */
    responsible?: boolean;
    /**
     * The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.
     */
    role?: CodeableConcept;
    /**
     * The qualification of the practitioner which is applicable for this service.
     */
    qualification?: CodeableConcept;
};

export type ExplanationOfBenefit_Diagnosis = BackboneElement & {
    /**
     * A number to uniquely identify diagnosis entries.
     */
    sequence: number;
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisCodeableConcept?: CodeableConcept;
    /**
     * The nature of illness or problem in a coded form or as a reference to an external defined Condition.
     */
    diagnosisReference?: Reference;
    type?: CodeableConcept[];
    /**
     * Indication of whether the diagnosis was present on admission to a facility.
     */
    onAdmission?: CodeableConcept;
    /**
     * A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.
     */
    packageCode?: CodeableConcept;
};

export type ExplanationOfBenefit_Insurance = BackboneElement & {
    /**
     * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
     */
    focal: boolean;
    /**
     * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
     */
    coverage: Reference;
    preAuthRef?: string[];
};

export type ExplanationOfBenefit_Item = BackboneElement & {
    /**
     * A number to uniquely identify item entries.
     */
    sequence: number;
    careTeamSequence?: number[];
    diagnosisSequence?: number[];
    procedureSequence?: number[];
    informationSequence?: number[];
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    programCode?: CodeableConcept[];
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedDate?: string;
    /**
     * The date or dates when the service or product was supplied, performed or completed.
     */
    servicedPeriod?: Period;
    /**
     * Where the product or service was provided.
     */
    locationCodeableConcept?: CodeableConcept;
    /**
     * Where the product or service was provided.
     */
    locationAddress?: Address;
    /**
     * Where the product or service was provided.
     */
    locationReference?: Reference;
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    udi?: Reference[];
    /**
     * Physical service site on the patient (limb, tooth, etc.).
     */
    bodySite?: CodeableConcept;
    subSite?: CodeableConcept[];
    encounter?: Reference[];
    noteNumber?: number[];
    adjudication?: ExplanationOfBenefit_Item_Adjudication[];
    detail?: ExplanationOfBenefit_Item_Detail[];
};

export type ExplanationOfBenefit_Item_Adjudication = BackboneElement & {
    /**
     * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in&ndash;aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
     */
    category: CodeableConcept;
    /**
     * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
     */
    reason?: CodeableConcept;
    /**
     * Monetary amount associated with the category.
     */
    amount?: Money;
    /**
     * A non&ndash;monetary value associated with the category. Mutually exclusive to the amount element above.
     */
    value?: number;
};

export type ExplanationOfBenefit_Item_Detail = BackboneElement & {
    /**
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub&ndash;details which are simple items.
     */
    sequence: number;
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    programCode?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    udi?: Reference[];
    noteNumber?: number[];
    adjudication?: ExplanationOfBenefit_Item_Adjudication[];
    subDetail?: ExplanationOfBenefit_Item_Detail_SubDetail[];
};

export type ExplanationOfBenefit_Item_Detail_SubDetail = BackboneElement & {
    /**
     * A claim detail line. Either a simple (a product or service) or a 'group' of sub&ndash;details which are simple items.
     */
    sequence: number;
    /**
     * The type of revenue or cost center providing the product and/or service.
     */
    revenue?: CodeableConcept;
    /**
     * Code to identify the general type of benefits under which products and services are provided.
     */
    category?: CodeableConcept;
    /**
     * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
     */
    productOrService: CodeableConcept;
    modifier?: CodeableConcept[];
    programCode?: CodeableConcept[];
    /**
     * The number of repetitions of a service or product.
     */
    quantity?: SimpleQuantity;
    /**
     * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
     */
    unitPrice?: Money;
    /**
     * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
     */
    factor?: number;
    /**
     * The quantity times the unit price for an additional service or product or charge.
     */
    net?: Money;
    udi?: Reference[];
    noteNumber?: number[];
    adjudication?: ExplanationOfBenefit_Item_Adjudication[];
};

export type ExplanationOfBenefit_Payee = BackboneElement & {
    /**
     * Type of Party to be reimbursed: Subscriber, provider, other.
     */
    type?: CodeableConcept;
    /**
     * Reference to the individual or organization to whom any payment will be made.
     */
    party?: Reference;
};

export type ExplanationOfBenefit_Payment = BackboneElement & {
    /**
     * Whether this represents partial or complete payment of the benefits payable.
     */
    type?: CodeableConcept;
    /**
     * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
     */
    adjustment?: Money;
    /**
     * Reason for the payment adjustment.
     */
    adjustmentReason?: CodeableConcept;
    /**
     * Estimated date the payment will be issued or the actual issue date of payment.
     */
    date?: string;
    /**
     * Benefits payable less any payment adjustment.
     */
    amount?: Money;
    /**
     * Issuer's unique identifier for the payment instrument.
     */
    identifier?: Identifier;
};

export type ExplanationOfBenefit_Procedure = BackboneElement & {
    /**
     * A number to uniquely identify procedure entries.
     */
    sequence: number;
    type?: CodeableConcept[];
    /**
     * Date and optionally time the procedure was performed.
     */
    date?: string;
    /**
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureCodeableConcept?: CodeableConcept;
    /**
     * The code or reference to a Procedure resource which identifies the clinical intervention performed.
     */
    procedureReference?: Reference;
    udi?: Reference[];
};

export type ExplanationOfBenefit_ProcessNote = BackboneElement & {
    /**
     * A number to uniquely identify a note entry.
     */
    number?: number;
    /**
     * The business purpose of the note text.
     */
    type?: string;
    /**
     * The explanation or description associated with the processing.
     */
    text?: string;
    /**
     * A code to define the language used in the text of the note.
     */
    language?: CodeableConcept;
};

export type ExplanationOfBenefit_Related = BackboneElement & {
    /**
     * Reference to a related claim.
     */
    claim?: Reference;
    /**
     * A code to convey how the claims are related.
     */
    relationship?: CodeableConcept;
    /**
     * An alternate organizational reference to the case or file to which this particular claim pertains.
     */
    reference?: Identifier;
};

export type ExplanationOfBenefit_SupportingInfo = BackboneElement & {
    /**
     * A number to uniquely identify supporting information entries.
     */
    sequence: number;
    /**
     * The general class of the information supplied: information; exception; accident, employment; onset, etc.
     */
    category: CodeableConcept;
    /**
     * System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
     */
    code?: CodeableConcept;
    /**
     * The date when or period to which this information refers.
     */
    timingDate?: string;
    /**
     * The date when or period to which this information refers.
     */
    timingPeriod?: Period;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueBoolean?: boolean;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueString?: string;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueQuantity?: Quantity;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueAttachment?: Attachment;
    /**
     * Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.
     */
    valueReference?: Reference;
    /**
     * Provides the reason in the situation where a reason code is required in addition to the content.
     */
    reason?: Coding;
};

export type ExplanationOfBenefit_Total = BackboneElement & {
    /**
     * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
     */
    category: CodeableConcept;
    /**
     * Monetary total amount associated with the category.
     */
    amount: Money;
};

export type DocumentManifest = DomainResource & {
    /**
     * A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non&ndash;FHIR contexts.
     */
    masterIdentifier?: Identifier;
    identifier?: Identifier[];
    /**
     * The status of this document manifest.
     */
    status: string;
    /**
     * The code specifying the type of clinical activity that resulted in placing the associated content into the DocumentManifest.
     */
    type?: CodeableConcept;
    /**
     * Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).
     */
    subject?: Reference;
    /**
     * When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).
     */
    created?: string;
    author?: Reference[];
    recipient?: Reference[];
    /**
     * Identifies the source system, application, or software that produced the document manifest.
     */
    source?: string;
    /**
     * Human&ndash;readable description of the source document. This is sometimes known as the "title".
     */
    description?: string;
    content: Reference[];
    related?: DocumentManifest_Related[];
};

export type DocumentManifest_Related = BackboneElement & {
    /**
     * Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers.
     */
    identifier?: Identifier;
    /**
     * Related Resource to this DocumentManifest. For example, Order, ServiceRequest,  Procedure, EligibilityRequest, etc.
     */
    ref?: Reference;
};

export type Specimen = DomainResource & {
    identifier?: Identifier[];
    /**
     * The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.
     */
    accessionIdentifier?: Identifier;
    /**
     * The availability of the specimen.
     */
    status?: string;
    /**
     * The kind of material that forms the specimen.
     */
    type?: CodeableConcept;
    /**
     * Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance or a device.
     */
    subject?: Reference;
    /**
     * Time when specimen was received for processing or testing.
     */
    receivedTime?: string;
    parent?: Reference[];
    request?: Reference[];
    /**
     * Details concerning the specimen collection.
     */
    collection?: Specimen_Collection;
    processing?: Specimen_Processing[];
    container?: Specimen_Container[];
    condition?: CodeableConcept[];
    note?: Annotation[];
};

export type Specimen_Collection = BackboneElement & {
    /**
     * Person who collected the specimen.
     */
    collector?: Reference;
    /**
     * Time when specimen was collected from subject &ndash; the physiologically relevant time.
     */
    collectedDateTime?: string;
    /**
     * Time when specimen was collected from subject &ndash; the physiologically relevant time.
     */
    collectedPeriod?: Period;
    /**
     * The span of time over which the collection of a specimen occurred.
     */
    duration?: Duration;
    /**
     * The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.
     */
    quantity?: SimpleQuantity;
    /**
     * A coded value specifying the technique that is used to perform the procedure.
     */
    method?: CodeableConcept;
    /**
     * Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.
     */
    bodySite?: CodeableConcept;
    /**
     * Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.
     */
    fastingStatusCodeableConcept?: CodeableConcept;
    /**
     * Abstinence or reduction from some or all food, drink, or both, for a period of time prior to sample collection.
     */
    fastingStatusDuration?: Duration;
};

export type Specimen_Container = BackboneElement & {
    identifier?: Identifier[];
    /**
     * Textual description of the container.
     */
    description?: string;
    /**
     * The type of container associated with the specimen (e.g. slide, aliquot, etc.).
     */
    type?: CodeableConcept;
    /**
     * The capacity (volume or other measure) the container may contain.
     */
    capacity?: SimpleQuantity;
    /**
     * The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.
     */
    specimenQuantity?: SimpleQuantity;
    /**
     * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additiveCodeableConcept?: CodeableConcept;
    /**
     * Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
     */
    additiveReference?: Reference;
};

export type Specimen_Processing = BackboneElement & {
    /**
     * Textual description of procedure.
     */
    description?: string;
    /**
     * A coded value specifying the procedure used to process the specimen.
     */
    procedure?: CodeableConcept;
    additive?: Reference[];
    /**
     * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
     */
    timeDateTime?: string;
    /**
     * A record of the time or period when the specimen processing occurred.  For example the time of sample fixation or the period of time the sample was in formalin.
     */
    timePeriod?: Period;
};

export type List = DomainResource & {
    identifier?: Identifier[];
    /**
     * Indicates the current state of this list.
     */
    status: string;
    /**
     * How this list was prepared &ndash; whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
     */
    mode: string;
    /**
     * A label for the list assigned by the author.
     */
    title?: string;
    /**
     * This code defines the purpose of the list &ndash; why it was created.
     */
    code?: CodeableConcept;
    /**
     * The common subject (or patient) of the resources that are in the list if there is one.
     */
    subject?: Reference;
    /**
     * The encounter that is the context in which this list was created.
     */
    encounter?: Reference;
    /**
     * The date that the list was prepared.
     */
    date?: string;
    /**
     * The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.
     */
    source?: Reference;
    /**
     * What order applies to the items in the list.
     */
    orderedBy?: CodeableConcept;
    note?: Annotation[];
    entry?: List_Entry[];
    /**
     * If the list is empty, why the list is empty.
     */
    emptyReason?: CodeableConcept;
};

export type List_Entry = BackboneElement & {
    /**
     * The flag allows the system constructing the list to indicate the role and significance of the item in the list.
     */
    flag?: CodeableConcept;
    /**
     * True if this item is marked as deleted in the list.
     */
    deleted?: boolean;
    /**
     * When this item was added to the list.
     */
    date?: string;
    /**
     * A reference to the actual resource from which data was derived.
     */
    item: Reference;
};

export type DocumentReference = DomainResource & {
    /**
     * Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.
     */
    masterIdentifier?: Identifier;
    identifier?: Identifier[];
    /**
     * The status of this document reference.
     */
    status: string;
    /**
     * The status of the underlying document.
     */
    docStatus?: string;
    /**
     * Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
     */
    type?: CodeableConcept;
    category?: CodeableConcept[];
    /**
     * Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
     */
    subject?: Reference;
    /**
     * When the document reference was created.
     */
    date?: string;
    author?: Reference[];
    /**
     * Which person or organization authenticates that this document is valid.
     */
    authenticator?: Reference;
    /**
     * Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
     */
    custodian?: Reference;
    relatesTo?: DocumentReference_RelatesTo[];
    /**
     * Human&ndash;readable description of the source document.
     */
    description?: string;
    securityLabel?: CodeableConcept[];
    content: DocumentReference_Content[];
    /**
     * The clinical context in which the document was prepared.
     */
    context?: DocumentReference_Context;
};

export type DocumentReference_Content = BackboneElement & {
    /**
     * The document or URL of the document along with critical metadata to prove content has integrity.
     */
    attachment: Attachment;
    /**
     * An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
     */
    format?: Coding;
};

export type DocumentReference_Context = BackboneElement & {
    encounter?: Reference[];
    event?: CodeableConcept[];
    /**
     * The time period over which the service that is described by the document was provided.
     */
    period?: Period;
    /**
     * The kind of facility where the patient was seen.
     */
    facilityType?: CodeableConcept;
    /**
     * This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.
     */
    practiceSetting?: CodeableConcept;
    /**
     * The Patient Information as known when the document was published. May be a reference to a version specific, or contained.
     */
    sourcePatientInfo?: Reference;
    related?: Reference[];
};

export type DocumentReference_RelatesTo = BackboneElement & {
    /**
     * The type of relationship that this document has with anther document.
     */
    code: string;
    /**
     * The target document of this relationship.
     */
    target: Reference;
};

export type Media = DomainResource & {
    identifier?: Identifier[];
    basedOn?: Reference[];
    partOf?: Reference[];
    /**
     * The current state of the {{title}}.
     */
    status: string;
    /**
     * A code that classifies whether the media is an image, video or audio recording or some other media category.
     */
    type?: CodeableConcept;
    /**
     * Details of the type of the media &ndash; usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
     */
    modality?: CodeableConcept;
    /**
     * The name of the imaging view e.g. Lateral or Antero&ndash;posterior (AP).
     */
    view?: CodeableConcept;
    /**
     * Who/What this Media is a record of.
     */
    subject?: Reference;
    /**
     * The encounter that establishes the context for this media.
     */
    encounter?: Reference;
    /**
     * The date and time(s) at which the media was collected.
     */
    createdDateTime?: string;
    /**
     * The date and time(s) at which the media was collected.
     */
    createdPeriod?: Period;
    /**
     * The date and time this version of the media was made available to providers, typically after having been reviewed.
     */
    issued?: string;
    /**
     * The person who administered the collection of the image.
     */
    operator?: Reference;
    reasonCode?: CodeableConcept[];
    /**
     * Indicates the site on the subject's body where the observation was made (i.e. the target site).
     */
    bodySite?: CodeableConcept;
    /**
     * The name of the device / manufacturer of the device  that was used to make the recording.
     */
    deviceName?: string;
    /**
     * The device used to collect the media.
     */
    device?: Reference;
    /**
     * Height of the image in pixels (photo/video).
     */
    height?: number;
    /**
     * Width of the image in pixels (photo/video).
     */
    width?: number;
    /**
     * The number of frames in a photo. This is used with a multi&ndash;page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi&ndash;frame capable rendering widget is required.
     */
    frames?: number;
    /**
     * The duration of the recording in seconds &ndash; for audio and video.
     */
    duration?: number;
    /**
     * The actual content of the media &ndash; inline or by direct reference to the media source file.
     */
    content: Attachment;
    note?: Annotation[];
};

export type Flag = DomainResource & {
    identifier?: Identifier[];
    /**
     * Supports basic workflow.
     */
    status: string;
    category?: CodeableConcept[];
    /**
     * The coded value or textual component of the flag to display to the user.
     */
    code: CodeableConcept;
    /**
     * The patient, location, group, organization, or practitioner etc. this is about record this flag is associated with.
     */
    subject: Reference;
    /**
     * The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.
     */
    period?: Period;
    /**
     * This alert is only relevant during the encounter.
     */
    encounter?: Reference;
    /**
     * The person, organization or device that created the flag.
     */
    author?: Reference;
};

export type QuestionnaireResponse = DomainResource & {
    /**
     * A business identifier assigned to a particular completed (or partially completed) questionnaire.
     */
    identifier?: Identifier;
    basedOn?: Reference[];
    partOf?: Reference[];
    /**
     * The Questionnaire that defines and organizes the questions for which answers are being provided.
     */
    questionnaire?: string;
    /**
     * The position of the questionnaire response within its overall lifecycle.
     */
    status: string;
    /**
     * The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.
     */
    subject?: Reference;
    /**
     * The Encounter during which this questionnaire response was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * The date and/or time that this set of answers were last changed.
     */
    authored?: string;
    /**
     * Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system.
     */
    author?: Reference;
    /**
     * The person who answered the questions about the subject.
     */
    source?: Reference;
    item?: QuestionnaireResponse_Item[];
};

export type QuestionnaireResponse_Item = BackboneElement & {
    /**
     * The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.
     */
    linkId: string;
    /**
     * A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item.
     */
    definition?: string;
    /**
     * Text that is displayed above the contents of the group or as the text of the question being answered.
     */
    text?: string;
    answer?: QuestionnaireResponse_Item_Answer[];
    item?: QuestionnaireResponse_Item[];
};

export type QuestionnaireResponse_Item_Answer = BackboneElement & {
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueBoolean?: boolean;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueDecimal?: number;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueInteger?: number;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueDate?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueDateTime?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueTime?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueString?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueUri?: string;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueAttachment?: Attachment;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueCoding?: Coding;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueQuantity?: Quantity;
    /**
     * The answer (or one of the answers) provided by the respondent to the question.
     */
    valueReference?: Reference;
    item?: QuestionnaireResponse_Item[];
};

export type ServiceRequest = DomainResource & {
    identifier?: Identifier[];
    instantiatesCanonical?: string[];
    instantiatesUri?: string[];
    basedOn?: Reference[];
    replaces?: Reference[];
    /**
     * A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
     */
    requisition?: Identifier;
    /**
     * The status of the order.
     */
    status: string;
    /**
     * Whether the request is a proposal, plan, an original order or a reflex order.
     */
    intent: string;
    category?: CodeableConcept[];
    /**
     * Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
     */
    priority?: string;
    /**
     * Set this to true if the record is saying that the service/procedure should NOT be performed.
     */
    doNotPerform?: boolean;
    /**
     * A code that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
     */
    code?: CodeableConcept;
    orderDetail?: CodeableConcept[];
    /**
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    quantityQuantity?: Quantity;
    /**
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    quantityRatio?: Ratio;
    /**
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    quantityRange?: Range;
    /**
     * On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
     */
    subject: Reference;
    /**
     * An encounter that provides additional information about the healthcare context in which this request is made.
     */
    encounter?: Reference;
    /**
     * The date/time at which the requested service should occur.
     */
    occurrenceDateTime?: string;
    /**
     * The date/time at which the requested service should occur.
     */
    occurrencePeriod?: Period;
    /**
     * The date/time at which the requested service should occur.
     */
    occurrenceTiming?: Timing;
    /**
     * If a CodeableConcept is present, it indicates the pre&ndash;condition for performing the service.  For example "pain", "on flare&ndash;up", etc.
     */
    asNeededBoolean?: boolean;
    /**
     * If a CodeableConcept is present, it indicates the pre&ndash;condition for performing the service.  For example "pain", "on flare&ndash;up", etc.
     */
    asNeededCodeableConcept?: CodeableConcept;
    /**
     * When the request transitioned to being actionable.
     */
    authoredOn?: string;
    /**
     * The individual who initiated the request and has responsibility for its activation.
     */
    requester?: Reference;
    /**
     * Desired type of performer for doing the requested service.
     */
    performerType?: CodeableConcept;
    performer?: Reference[];
    locationCode?: CodeableConcept[];
    locationReference?: Reference[];
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    insurance?: Reference[];
    supportingInfo?: Reference[];
    specimen?: Reference[];
    bodySite?: CodeableConcept[];
    note?: Annotation[];
    /**
     * Instructions in terms that are understood by the patient or consumer.
     */
    patientInstruction?: string;
    relevantHistory?: Reference[];
};

export type DeviceUseStatement = DomainResource & {
    identifier?: Identifier[];
    basedOn?: Reference[];
    /**
     * A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.
     */
    status: string;
    /**
     * The patient who used the device.
     */
    subject: Reference;
    derivedFrom?: Reference[];
    /**
     * How often the device was used.
     */
    timingTiming?: Timing;
    /**
     * How often the device was used.
     */
    timingPeriod?: Period;
    /**
     * How often the device was used.
     */
    timingDateTime?: string;
    /**
     * The time at which the statement was made/recorded.
     */
    recordedOn?: string;
    /**
     * Who reported the device was being used by the patient.
     */
    source?: Reference;
    /**
     * The details of the device used.
     */
    device: Reference;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    /**
     * Indicates the anotomic location on the subject's body where the device was used ( i.e. the target).
     */
    bodySite?: CodeableConcept;
    note?: Annotation[];
};

export type SupplyRequest = DomainResource & {
    identifier?: Identifier[];
    /**
     * Status of the supply request.
     */
    status?: string;
    /**
     * Category of supply, e.g.  central, non&ndash;stock, etc. This is used to support work flows associated with the supply process.
     */
    category?: CodeableConcept;
    /**
     * Indicates how quickly this SupplyRequest should be addressed with respect to other requests.
     */
    priority?: string;
    /**
     * The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     */
    itemReference?: Reference;
    /**
     * The amount that is being ordered of the indicated item.
     */
    quantity: Quantity;
    parameter?: SupplyRequest_Parameter[];
    /**
     * When the request should be fulfilled.
     */
    occurrenceDateTime?: string;
    /**
     * When the request should be fulfilled.
     */
    occurrencePeriod?: Period;
    /**
     * When the request should be fulfilled.
     */
    occurrenceTiming?: Timing;
    /**
     * When the request was made.
     */
    authoredOn?: string;
    /**
     * The device, practitioner, etc. who initiated the request.
     */
    requester?: Reference;
    supplier?: Reference[];
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    /**
     * Where the supply is expected to come from.
     */
    deliverFrom?: Reference;
    /**
     * Where the supply is destined to go.
     */
    deliverTo?: Reference;
};

export type SupplyRequest_Parameter = BackboneElement & {
    /**
     * A code or string that identifies the device detail being asserted.
     */
    code?: CodeableConcept;
    /**
     * The value of the device detail.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The value of the device detail.
     */
    valueQuantity?: Quantity;
    /**
     * The value of the device detail.
     */
    valueRange?: Range;
    /**
     * The value of the device detail.
     */
    valueBoolean?: boolean;
};

export type RequestGroup = DomainResource & {
    identifier?: Identifier[];
    instantiatesCanonical?: string[];
    instantiatesUri?: string[];
    basedOn?: Reference[];
    replaces?: Reference[];
    /**
     * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
     */
    groupIdentifier?: Identifier;
    /**
     * The current state of the request. For request groups, the status reflects the status of all the requests in the group.
     */
    status: string;
    /**
     * Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.
     */
    intent: string;
    /**
     * Indicates how quickly the request should be addressed with respect to other requests.
     */
    priority?: string;
    /**
     * A code that identifies what the overall request group is.
     */
    code?: CodeableConcept;
    /**
     * The subject for which the request group was created.
     */
    subject?: Reference;
    /**
     * Describes the context of the request group, if any.
     */
    encounter?: Reference;
    /**
     * Indicates when the request group was created.
     */
    authoredOn?: string;
    /**
     * Provides a reference to the author of the request group.
     */
    author?: Reference;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    note?: Annotation[];
    action?: RequestGroup_Action[];
};

export type RequestGroup_Action = BackboneElement & {
    /**
     * A user&ndash;visible prefix for the action.
     */
    prefix?: string;
    /**
     * The title of the action displayed to a user.
     */
    title?: string;
    /**
     * A short description of the action used to provide a summary to display to the user.
     */
    description?: string;
    /**
     * A text equivalent of the action to be performed. This provides a human&ndash;interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
     */
    textEquivalent?: string;
    /**
     * Indicates how quickly the action should be addressed with respect to other actions.
     */
    priority?: string;
    code?: CodeableConcept[];
    documentation?: RelatedArtifact[];
    condition?: RequestGroup_Action_Condition[];
    relatedAction?: RequestGroup_Action_RelatedAction[];
    /**
     * An optional value describing when the action should be performed.
     */
    timingDateTime?: string;
    /**
     * An optional value describing when the action should be performed.
     */
    timingAge?: Age;
    /**
     * An optional value describing when the action should be performed.
     */
    timingPeriod?: Period;
    /**
     * An optional value describing when the action should be performed.
     */
    timingDuration?: Duration;
    /**
     * An optional value describing when the action should be performed.
     */
    timingRange?: Range;
    /**
     * An optional value describing when the action should be performed.
     */
    timingTiming?: Timing;
    participant?: Reference[];
    /**
     * The type of action to perform (create, update, remove).
     */
    type?: CodeableConcept;
    /**
     * Defines the grouping behavior for the action and its children.
     */
    groupingBehavior?: string;
    /**
     * Defines the selection behavior for the action and its children.
     */
    selectionBehavior?: string;
    /**
     * Defines expectations around whether an action is required.
     */
    requiredBehavior?: string;
    /**
     * Defines whether the action should usually be preselected.
     */
    precheckBehavior?: string;
    /**
     * Defines whether the action can be selected multiple times.
     */
    cardinalityBehavior?: string;
    /**
     * The resource that is the target of the action (e.g. CommunicationRequest).
     */
    resource?: Reference;
    action?: RequestGroup_Action[];
};

export type RequestGroup_Action_Condition = BackboneElement & {
    /**
     * The kind of condition.
     */
    kind: string;
    /**
     * An expression that returns true or false, indicating whether or not the condition is satisfied.
     */
    expression?: Expression;
};

export type RequestGroup_Action_RelatedAction = BackboneElement & {
    /**
     * The element id of the action this is related to.
     */
    actionId: string;
    /**
     * The relationship of this action to the related action.
     */
    relationship: string;
    /**
     * A duration or range of durations to apply to the relationship. For example, 30&ndash;60 minutes before.
     */
    offsetDuration?: Duration;
    /**
     * A duration or range of durations to apply to the relationship. For example, 30&ndash;60 minutes before.
     */
    offsetRange?: Range;
};

export type Schedule = DomainResource & {
    identifier?: Identifier[];
    /**
     * Whether this schedule record is in active use or should not be used (such as was entered in error).
     */
    active?: boolean;
    serviceCategory?: CodeableConcept[];
    serviceType?: CodeableConcept[];
    specialty?: CodeableConcept[];
    actor: Reference[];
    /**
     * The period of time that the slots that reference this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a "template" for planning outside these dates.
     */
    planningHorizon?: Period;
    /**
     * Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated.
     */
    comment?: string;
};

export type Observation = DomainResource & {
    identifier?: Identifier[];
    basedOn?: Reference[];
    partOf?: Reference[];
    /**
     * The status of the result value.
     */
    status: string;
    category?: CodeableConcept[];
    /**
     * Describes what was observed. Sometimes this is called the observation "name".
     */
    code: CodeableConcept;
    /**
     * The patient, or group of patients, location, or device this observation is about and into whose record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.
     */
    subject?: Reference;
    focus?: Reference[];
    /**
     * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
     */
    encounter?: Reference;
    /**
     * The time or time&ndash;period the observed value is asserted as being true. For biological subjects &ndash; e.g. human patients &ndash; this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveDateTime?: string;
    /**
     * The time or time&ndash;period the observed value is asserted as being true. For biological subjects &ndash; e.g. human patients &ndash; this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     */
    effectivePeriod?: Period;
    /**
     * The time or time&ndash;period the observed value is asserted as being true. For biological subjects &ndash; e.g. human patients &ndash; this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveTiming?: Timing;
    /**
     * The time or time&ndash;period the observed value is asserted as being true. For biological subjects &ndash; e.g. human patients &ndash; this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
     */
    effectiveInstant?: string;
    /**
     * The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
     */
    issued?: string;
    performer?: Reference[];
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueQuantity?: Quantity;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueString?: string;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueBoolean?: boolean;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueInteger?: number;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueRange?: Range;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueRatio?: Ratio;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueSampledData?: SampledData;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueTime?: string;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueDateTime?: string;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valuePeriod?: Period;
    /**
     * Provides a reason why the expected value in the element Observation.value[x] is missing.
     */
    dataAbsentReason?: CodeableConcept;
    interpretation?: CodeableConcept[];
    note?: Annotation[];
    /**
     * Indicates the site on the subject's body where the observation was made (i.e. the target site).
     */
    bodySite?: CodeableConcept;
    /**
     * Indicates the mechanism used to perform the observation.
     */
    method?: CodeableConcept;
    /**
     * The specimen that was used when this observation was made.
     */
    specimen?: Reference;
    /**
     * The device used to generate the observation data.
     */
    device?: Reference;
    referenceRange?: Observation_ReferenceRange[];
    hasMember?: Reference[];
    derivedFrom?: Reference[];
    component?: Observation_Component[];
};

export type Observation_Component = BackboneElement & {
    /**
     * Describes what was observed. Sometimes this is called the observation "code".
     */
    code: CodeableConcept;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueQuantity?: Quantity;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueString?: string;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueBoolean?: boolean;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueInteger?: number;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueRange?: Range;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueRatio?: Ratio;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueSampledData?: SampledData;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueTime?: string;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valueDateTime?: string;
    /**
     * The information determined as a result of making the observation, if the information has a simple value.
     */
    valuePeriod?: Period;
    /**
     * Provides a reason why the expected value in the element Observation.component.value[x] is missing.
     */
    dataAbsentReason?: CodeableConcept;
    interpretation?: CodeableConcept[];
    referenceRange?: Observation_ReferenceRange[];
};

export type Observation_ReferenceRange = BackboneElement & {
    /**
     * The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 &ndash; <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
     */
    low?: SimpleQuantity;
    /**
     * The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 &ndash; <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
     */
    high?: SimpleQuantity;
    /**
     * Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
     */
    type?: CodeableConcept;
    appliesTo?: CodeableConcept[];
    /**
     * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
     */
    age?: Range;
    /**
     * Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
     */
    text?: string;
};

export type MedicationAdministration = DomainResource & {
    identifier?: Identifier[];
    instantiates?: string[];
    partOf?: Reference[];
    /**
     * Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions, it is possible for an administration to be started but not completed or it may be paused while some other process is under way.
     */
    status: string;
    statusReason?: CodeableConcept[];
    /**
     * Indicates where the medication is expected to be consumed or administered.
     */
    category?: CodeableConcept;
    /**
     * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationCodeableConcept?: CodeableConcept;
    /**
     * Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationReference?: Reference;
    /**
     * The person or animal or group receiving the medication.
     */
    subject: Reference;
    /**
     * The visit, admission, or other contact between patient and health care provider during which the medication administration was performed.
     */
    context?: Reference;
    supportingInformation?: Reference[];
    /**
     * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
     */
    effectiveDateTime?: string;
    /**
     * A specific date/time or interval of time during which the administration took place (or did not take place, when the 'notGiven' attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.
     */
    effectivePeriod?: Period;
    performer?: MedicationAdministration_Performer[];
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    /**
     * The original request, instruction or authority to perform the administration.
     */
    request?: Reference;
    device?: Reference[];
    note?: Annotation[];
    /**
     * Describes the medication dosage information details e.g. dose, rate, site, route, etc.
     */
    dosage?: MedicationAdministration_Dosage;
    eventHistory?: Reference[];
};

export type MedicationAdministration_Dosage = BackboneElement & {
    /**
     * Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.\r\rThe dosage instructions should reflect the dosage of the medication that was administered.
     */
    text?: string;
    /**
     * A coded specification of the anatomic site where the medication first entered the body.  For example, "left arm".
     */
    site?: CodeableConcept;
    /**
     * A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.
     */
    route?: CodeableConcept;
    /**
     * A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.
     */
    method?: CodeableConcept;
    /**
     * The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.
     */
    dose?: SimpleQuantity;
    /**
     * Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
     */
    rateRatio?: Ratio;
    /**
     * Identifies the speed with which the medication was or will be introduced into the patient.  Typically, the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time, e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.
     */
    rateQuantity?: SimpleQuantity;
};

export type MedicationAdministration_Performer = BackboneElement & {
    /**
     * Distinguishes the type of involvement of the performer in the medication administration.
     */
    function?: CodeableConcept;
    /**
     * Indicates who or what performed the medication administration.
     */
    actor: Reference;
};

export type DeviceRequest = DomainResource & {
    identifier?: Identifier[];
    instantiatesCanonical?: string[];
    instantiatesUri?: string[];
    basedOn?: Reference[];
    priorRequest?: Reference[];
    /**
     * Composite request this is part of.
     */
    groupIdentifier?: Identifier;
    /**
     * The status of the request.
     */
    status?: string;
    /**
     * Whether the request is a proposal, plan, an original order or a reflex order.
     */
    intent: string;
    /**
     * Indicates how quickly the {{title}} should be addressed with respect to other requests.
     */
    priority?: string;
    /**
     * The details of the device to be used.
     */
    codeReference?: Reference;
    /**
     * The details of the device to be used.
     */
    codeCodeableConcept?: CodeableConcept;
    parameter?: DeviceRequest_Parameter[];
    /**
     * The patient who will use the device.
     */
    subject: Reference;
    /**
     * An encounter that provides additional context in which this request is made.
     */
    encounter?: Reference;
    /**
     * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23&ndash;Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    occurrenceDateTime?: string;
    /**
     * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23&ndash;Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    occurrencePeriod?: Period;
    /**
     * The timing schedule for the use of the device. The Schedule data type allows many different expressions, for example. "Every 8 hours"; "Three times a day"; "1/2 an hour before breakfast for 10 days from 23&ndash;Dec 2011:"; "15 Oct 2013, 17 Oct 2013 and 1 Nov 2013".
     */
    occurrenceTiming?: Timing;
    /**
     * When the request transitioned to being actionable.
     */
    authoredOn?: string;
    /**
     * The individual who initiated the request and has responsibility for its activation.
     */
    requester?: Reference;
    /**
     * Desired type of performer for doing the diagnostic testing.
     */
    performerType?: CodeableConcept;
    /**
     * The desired performer for doing the diagnostic testing.
     */
    performer?: Reference;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    insurance?: Reference[];
    supportingInfo?: Reference[];
    note?: Annotation[];
    relevantHistory?: Reference[];
};

export type DeviceRequest_Parameter = BackboneElement & {
    /**
     * A code or string that identifies the device detail being asserted.
     */
    code?: CodeableConcept;
    /**
     * The value of the device detail.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The value of the device detail.
     */
    valueQuantity?: Quantity;
    /**
     * The value of the device detail.
     */
    valueRange?: Range;
    /**
     * The value of the device detail.
     */
    valueBoolean?: boolean;
};

export type MessageHeader = DomainResource & {
    /**
     * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://terminology.hl7.org/CodeSystem/message&ndash;events".  Alternatively uri to the EventDefinition.
     */
    eventCoding?: Coding;
    /**
     * Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value "http://terminology.hl7.org/CodeSystem/message&ndash;events".  Alternatively uri to the EventDefinition.
     */
    eventUri?: string;
    destination?: MessageHeader_Destination[];
    /**
     * Identifies the sending system to allow the use of a trust relationship.
     */
    sender?: Reference;
    /**
     * The person or device that performed the data entry leading to this message. When there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.
     */
    enterer?: Reference;
    /**
     * The logical author of the message &ndash; the person or device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.
     */
    author?: Reference;
    /**
     * The source application from which this message originated.
     */
    source: MessageHeader_Source;
    /**
     * The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.
     */
    responsible?: Reference;
    /**
     * Coded indication of the cause for the event &ndash; indicates  a reason for the occurrence of the event that is a focus of this message.
     */
    reason?: CodeableConcept;
    /**
     * Information about the message that this message is a response to.  Only present if this message is a response.
     */
    response?: MessageHeader_Response;
    focus?: Reference[];
    /**
     * Permanent link to the MessageDefinition for this message.
     */
    definition?: string;
};

export type MessageHeader_Destination = BackboneElement & {
    /**
     * Human&ndash;readable name for the target system.
     */
    name?: string;
    /**
     * Identifies the target end system in situations where the initial message transmission is to an intermediary system.
     */
    target?: Reference;
    /**
     * Indicates where the message should be routed to.
     */
    endpoint: string;
    /**
     * Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.
     */
    receiver?: Reference;
};

export type MessageHeader_Response = BackboneElement & {
    /**
     * The MessageHeader.id of the message to which this message is a response.
     */
    identifier: string;
    /**
     * Code that identifies the type of response to the message &ndash; whether it was successful or not, and whether it should be resent or not.
     */
    code: string;
    /**
     * Full details of any issues found in the message.
     */
    details?: Reference;
};

export type MessageHeader_Source = BackboneElement & {
    /**
     * Human&ndash;readable name for the source system.
     */
    name?: string;
    /**
     * May include configuration or other information useful in debugging.
     */
    software?: string;
    /**
     * Can convey versions of multiple systems in situations where a message passes through multiple hands.
     */
    version?: string;
    /**
     * An e&ndash;mail, phone, website or other contact point to use to resolve issues with message communications.
     */
    contact?: ContactPoint;
    /**
     * Identifies the routing target to send acknowledgements to.
     */
    endpoint: string;
};

export type DeviceDefinition = DomainResource & {
    identifier?: Identifier[];
    udiDeviceIdentifier?: DeviceDefinition_UdiDeviceIdentifier[];
    /**
     * A name of the manufacturer.
     */
    manufacturerString?: string;
    /**
     * A name of the manufacturer.
     */
    manufacturerReference?: Reference;
    deviceName?: DeviceDefinition_DeviceName[];
    /**
     * The model number for the device.
     */
    modelNumber?: string;
    /**
     * The type of deviceName.
     * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
     */
    type?: CodeableConcept;
    specialization?: DeviceDefinition_Specialization[];
    version?: string[];
    safety?: CodeableConcept[];
    shelfLifeStorage?: ProductShelfLife[];
    /**
     * Dimensions, color etc.
     */
    physicalCharacteristics?: ProdCharacteristic;
    languageCode?: CodeableConcept[];
    capability?: DeviceDefinition_Capability[];
    property?: DeviceDefinition_Property[];
    /**
     * An organization that is responsible for the provision and ongoing maintenance of the device.
     */
    owner?: Reference;
    contact?: ContactPoint[];
    /**
     * A network address on which the device may be contacted directly.
     */
    url?: string;
    /**
     * Access to on&ndash;line information about the device.
     */
    onlineInformation?: string;
    note?: Annotation[];
    /**
     * The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
     */
    quantity?: Quantity;
    /**
     * The parent device it can be part of.
     */
    parentDevice?: Reference;
    material?: DeviceDefinition_Material[];
};

export type DeviceDefinition_Capability = BackboneElement & {
    /**
     * Type of capability.
     */
    type: CodeableConcept;
    description?: CodeableConcept[];
};

export type DeviceDefinition_DeviceName = BackboneElement & {
    /**
     * The name of the device.
     */
    name: string;
    /**
     * The type of deviceName.
     * UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
     */
    type: string;
};

export type DeviceDefinition_Material = BackboneElement & {
    /**
     * The substance.
     */
    substance: CodeableConcept;
    /**
     * Indicates an alternative material of the device.
     */
    alternate?: boolean;
    /**
     * Whether the substance is a known or suspected allergen.
     */
    allergenicIndicator?: boolean;
};

export type DeviceDefinition_Property = BackboneElement & {
    /**
     * Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
     */
    type: CodeableConcept;
    valueQuantity?: Quantity[];
    valueCode?: CodeableConcept[];
};

export type DeviceDefinition_Specialization = BackboneElement & {
    /**
     * The standard that is used to operate and communicate.
     */
    systemType: string;
    /**
     * The version of the standard that is used to operate and communicate.
     */
    version?: string;
};

export type DeviceDefinition_UdiDeviceIdentifier = BackboneElement & {
    /**
     * The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
     */
    deviceIdentifier: string;
    /**
     * The organization that assigns the identifier algorithm.
     */
    issuer: string;
    /**
     * The jurisdiction to which the deviceIdentifier applies.
     */
    jurisdiction: string;
};

export type MarketingStatus = BackboneElement & {
    /**
     * The country in which the marketing authorisation has been granted shall be specified It should be specified using the ISO 3166 &#8209; 1 alpha&ndash;2 code elements.
     */
    country?: CodeableConcept;
    /**
     * Where a Medicines Regulatory Agency has granted a marketing authorisation for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified.
     */
    jurisdiction?: CodeableConcept;
    /**
     * This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples.
     */
    status: CodeableConcept;
    /**
     * The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE &ldquo;Placed on the market&rdquo; refers to the release of the Medicinal Product into the distribution chain.
     */
    dateRange?: Period;
    /**
     * The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE &ldquo;Placed on the market&rdquo; refers to the release of the Medicinal Product into the distribution chain.
     */
    restoreDate?: string;
};

export type ProductShelfLife = BackboneElement & {
    /**
     * Unique identifier for the packaged Medicinal Product.
     */
    identifier?: Identifier;
    /**
     * This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
     */
    type: CodeableConcept;
    /**
     * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    period: Quantity;
    specialPrecautionsForStorage?: CodeableConcept[];
};

export type ProdCharacteristic = BackboneElement & {
    /**
     * Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    height?: Quantity;
    /**
     * Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    width?: Quantity;
    /**
     * Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    depth?: Quantity;
    /**
     * Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    weight?: Quantity;
    /**
     * Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    nominalVolume?: Quantity;
    /**
     * Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
     */
    externalDiameter?: Quantity;
    /**
     * Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
     */
    shape?: string;
    color?: string[];
    imprint?: string[];
    image?: Attachment[];
    /**
     * Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
     */
    scoring?: CodeableConcept;
};

export type DeviceMetric = DomainResource & {
    identifier?: Identifier[];
    /**
     * Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.
     */
    type: CodeableConcept;
    /**
     * Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.
     */
    unit?: CodeableConcept;
    /**
     * Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacturer, serial number, etc.
     */
    source?: Reference;
    /**
     * Describes the link to the  Device that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a Device that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.
     */
    parent?: Reference;
    /**
     * Indicates current operational state of the device. For example: On, Off, Standby, etc.
     */
    operationalStatus?: string;
    /**
     * Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR&ndash;blue, BP&ndash;green, and PR and SpO2&ndash; magenta.
     */
    color?: string;
    /**
     * Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.
     */
    category: string;
    /**
     * Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.
     */
    measurementPeriod?: Timing;
    calibration?: DeviceMetric_Calibration[];
};

export type DeviceMetric_Calibration = BackboneElement & {
    /**
     * Describes the type of the calibration method.
     */
    type?: string;
    /**
     * Describes the state of the calibration.
     */
    state?: string;
    /**
     * Describes the time last calibration has been performed.
     */
    time?: string;
};

export type Encounter = DomainResource & {
    identifier?: Identifier[];
    /**
     * planned | arrived | triaged | in&ndash;progress | onleave | finished | cancelled +.
     */
    status: string;
    statusHistory?: Encounter_StatusHistory[];
    /**
     * Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
     */
    class: Coding;
    classHistory?: Encounter_ClassHistory[];
    type?: CodeableConcept[];
    /**
     * Broad categorization of the service that is to be provided (e.g. cardiology).
     */
    serviceType?: CodeableConcept;
    /**
     * Indicates the urgency of the encounter.
     */
    priority?: CodeableConcept;
    /**
     * The patient or group present at the encounter.
     */
    subject?: Reference;
    episodeOfCare?: Reference[];
    basedOn?: Reference[];
    participant?: Encounter_Participant[];
    appointment?: Reference[];
    /**
     * The time that the episode was in the specified status.
     */
    period?: Period;
    /**
     * Quantity of time the encounter lasted. This excludes the time during leaves of absence.
     */
    length?: Duration;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    diagnosis?: Encounter_Diagnosis[];
    account?: Reference[];
    /**
     * Details about the admission to a healthcare service.
     */
    hospitalization?: Encounter_Hospitalization;
    location?: Encounter_Location[];
    /**
     * The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed seperately) for an external consultation.  Refer to the example bundle showing an abbreviated set of Encounters for a colonoscopy.
     */
    serviceProvider?: Reference;
    /**
     * Another Encounter of which this encounter is a part of (administratively or in time).
     */
    partOf?: Reference;
};

export type Encounter_ClassHistory = BackboneElement & {
    /**
     * inpatient | outpatient | ambulatory | emergency +.
     */
    class: Coding;
    /**
     * The time that the episode was in the specified class.
     */
    period: Period;
};

export type Encounter_Diagnosis = BackboneElement & {
    /**
     * Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
     */
    condition: Reference;
    /**
     * Role that this diagnosis has within the encounter (e.g. admission, billing, discharge &hellip;).
     */
    use?: CodeableConcept;
    /**
     * Ranking of the diagnosis (for each role type).
     */
    rank?: number;
};

export type Encounter_Hospitalization = BackboneElement & {
    /**
     * Pre&ndash;admission identifier.
     */
    preAdmissionIdentifier?: Identifier;
    /**
     * The location/organization from which the patient came before admission.
     */
    origin?: Reference;
    /**
     * From where patient was admitted (physician referral, transfer).
     */
    admitSource?: CodeableConcept;
    /**
     * Whether this hospitalization is a readmission and why if known.
     */
    reAdmission?: CodeableConcept;
    dietPreference?: CodeableConcept[];
    specialCourtesy?: CodeableConcept[];
    specialArrangement?: CodeableConcept[];
    /**
     * Location/organization to which the patient is discharged.
     */
    destination?: Reference;
    /**
     * Category or kind of location after discharge.
     */
    dischargeDisposition?: CodeableConcept;
};

export type Encounter_Location = BackboneElement & {
    /**
     * The location where the encounter takes place.
     */
    location: Reference;
    /**
     * The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
     */
    status?: string;
    /**
     * This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
     */
    physicalType?: CodeableConcept;
    /**
     * Time period during which the patient was present at the location.
     */
    period?: Period;
};

export type Encounter_Participant = BackboneElement & {
    type?: CodeableConcept[];
    /**
     * The period of time that the specified participant participated in the encounter. These can overlap or be sub&ndash;sets of the overall encounter's period.
     */
    period?: Period;
    /**
     * Persons involved in the encounter other than the patient.
     */
    individual?: Reference;
};

export type Encounter_StatusHistory = BackboneElement & {
    /**
     * planned | arrived | triaged | in&ndash;progress | onleave | finished | cancelled +.
     */
    status: string;
    /**
     * The time that the episode was in the specified status.
     */
    period: Period;
};

export type NutritionOrder = DomainResource & {
    identifier?: Identifier[];
    instantiatesCanonical?: string[];
    instantiatesUri?: string[];
    instantiates?: string[];
    /**
     * The workflow status of the nutrition order/request.
     */
    status: string;
    /**
     * Indicates the level of authority/intentionality associated with the NutrionOrder and where the request fits into the workflow chain.
     */
    intent: string;
    /**
     * The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.
     */
    patient: Reference;
    /**
     * An encounter that provides additional information about the healthcare context in which this request is made.
     */
    encounter?: Reference;
    /**
     * The date and time that this nutrition order was requested.
     */
    dateTime: string;
    /**
     * The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.
     */
    orderer?: Reference;
    allergyIntolerance?: Reference[];
    foodPreferenceModifier?: CodeableConcept[];
    excludeFoodModifier?: CodeableConcept[];
    /**
     * Diet given orally in contrast to enteral (tube) feeding.
     */
    oralDiet?: NutritionOrder_OralDiet;
    supplement?: NutritionOrder_Supplement[];
    /**
     * Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
     */
    enteralFormula?: NutritionOrder_EnteralFormula;
    note?: Annotation[];
};

export type NutritionOrder_EnteralFormula = BackboneElement & {
    /**
     * The type of enteral or infant formula such as an adult standard formula with fiber or a soy&ndash;based infant formula.
     */
    baseFormulaType?: CodeableConcept;
    /**
     * The product or brand name of the enteral or infant formula product such as "ACME Adult Standard Formula".
     */
    baseFormulaProductName?: string;
    /**
     * Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.
     */
    additiveType?: CodeableConcept;
    /**
     * The product or brand name of the type of modular component to be added to the formula.
     */
    additiveProductName?: string;
    /**
     * The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.
     */
    caloricDensity?: SimpleQuantity;
    /**
     * The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.
     */
    routeofAdministration?: CodeableConcept;
    administration?: NutritionOrder_EnteralFormula_Administration[];
    /**
     * The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.
     */
    maxVolumeToDeliver?: SimpleQuantity;
    /**
     * Free text formula administration, feeding instructions or additional instructions or information.
     */
    administrationInstruction?: string;
};

export type NutritionOrder_EnteralFormula_Administration = BackboneElement & {
    /**
     * The time period and frequency at which the enteral formula should be delivered to the patient.
     */
    schedule?: Timing;
    /**
     * The volume of formula to provide to the patient per the specified administration schedule.
     */
    quantity?: SimpleQuantity;
    /**
     * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
     */
    rateQuantity?: SimpleQuantity;
    /**
     * The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.
     */
    rateRatio?: Ratio;
};

export type NutritionOrder_OralDiet = BackboneElement & {
    type?: CodeableConcept[];
    schedule?: Timing[];
    nutrient?: NutritionOrder_OralDiet_Nutrient[];
    texture?: NutritionOrder_OralDiet_Texture[];
    fluidConsistencyType?: CodeableConcept[];
    /**
     * Free text or additional instructions or information pertaining to the oral diet.
     */
    instruction?: string;
};

export type NutritionOrder_OralDiet_Nutrient = BackboneElement & {
    /**
     * The nutrient that is being modified such as carbohydrate or sodium.
     */
    modifier?: CodeableConcept;
    /**
     * The quantity of the specified nutrient to include in diet.
     */
    amount?: SimpleQuantity;
};

export type NutritionOrder_OralDiet_Texture = BackboneElement & {
    /**
     * Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.
     */
    modifier?: CodeableConcept;
    /**
     * The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.
     */
    foodType?: CodeableConcept;
};

export type NutritionOrder_Supplement = BackboneElement & {
    /**
     * The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.
     */
    type?: CodeableConcept;
    /**
     * The product or brand name of the nutritional supplement such as "Acme Protein Shake".
     */
    productName?: string;
    schedule?: Timing[];
    /**
     * The amount of the nutritional supplement to be given.
     */
    quantity?: SimpleQuantity;
    /**
     * Free text or additional instructions or information pertaining to the oral supplement.
     */
    instruction?: string;
};

export type Procedure = DomainResource & {
    identifier?: Identifier[];
    instantiatesCanonical?: string[];
    instantiatesUri?: string[];
    basedOn?: Reference[];
    partOf?: Reference[];
    /**
     * A code specifying the state of the procedure. Generally, this will be the in&ndash;progress or completed state.
     */
    status: string;
    /**
     * Captures the reason for the current state of the procedure.
     */
    statusReason?: CodeableConcept;
    /**
     * A code that classifies the procedure for searching, sorting and display purposes (e.g. "Surgical Procedure").
     */
    category?: CodeableConcept;
    /**
     * The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. "Laparoscopic Appendectomy").
     */
    code?: CodeableConcept;
    /**
     * The person, animal or group on which the procedure was performed.
     */
    subject: Reference;
    /**
     * The Encounter during which this Procedure was created or performed or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Estimated or actual date, date&ndash;time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedDateTime?: string;
    /**
     * Estimated or actual date, date&ndash;time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedPeriod?: Period;
    /**
     * Estimated or actual date, date&ndash;time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedString?: string;
    /**
     * Estimated or actual date, date&ndash;time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedAge?: Age;
    /**
     * Estimated or actual date, date&ndash;time, period, or age when the procedure was performed.  Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.
     */
    performedRange?: Range;
    /**
     * Individual who recorded the record and takes responsibility for its content.
     */
    recorder?: Reference;
    /**
     * Individual who is making the procedure statement.
     */
    asserter?: Reference;
    performer?: Procedure_Performer[];
    /**
     * The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.
     */
    location?: Reference;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    bodySite?: CodeableConcept[];
    /**
     * The outcome of the procedure &ndash; did it resolve the reasons for the procedure being performed?
     */
    outcome?: CodeableConcept;
    report?: Reference[];
    complication?: CodeableConcept[];
    complicationDetail?: Reference[];
    followUp?: CodeableConcept[];
    note?: Annotation[];
    focalDevice?: Procedure_FocalDevice[];
    usedReference?: Reference[];
    usedCode?: CodeableConcept[];
};

export type Procedure_FocalDevice = BackboneElement & {
    /**
     * The kind of change that happened to the device during the procedure.
     */
    action?: CodeableConcept;
    /**
     * The device that was manipulated (changed) during the procedure.
     */
    manipulated: Reference;
};

export type Procedure_Performer = BackboneElement & {
    /**
     * Distinguishes the type of involvement of the performer in the procedure. For example, surgeon, anaesthetist, endoscopist.
     */
    function?: CodeableConcept;
    /**
     * The practitioner who was involved in the procedure.
     */
    actor: Reference;
    /**
     * The organization the device or practitioner was acting on behalf of.
     */
    onBehalfOf?: Reference;
};

export type MedicationRequest = DomainResource & {
    identifier?: Identifier[];
    /**
     * A code specifying the current state of the order.  Generally, this will be active or completed state.
     */
    status: string;
    /**
     * Captures the reason for the current state of the MedicationRequest.
     */
    statusReason?: CodeableConcept;
    /**
     * Whether the request is a proposal, plan, or an original order.
     */
    intent: string;
    category?: CodeableConcept[];
    /**
     * Indicates how quickly the Medication Request should be addressed with respect to other requests.
     */
    priority?: string;
    /**
     * If true indicates that the provider is asking for the medication request not to occur.
     */
    doNotPerform?: boolean;
    /**
     * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source&ndash;of&ndash;truth record.  It may also indicate the source of the report.
     */
    reportedBoolean?: boolean;
    /**
     * Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source&ndash;of&ndash;truth record.  It may also indicate the source of the report.
     */
    reportedReference?: Reference;
    /**
     * Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationCodeableConcept?: CodeableConcept;
    /**
     * Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationReference?: Reference;
    /**
     * A link to a resource representing the person or set of individuals to whom the medication will be given.
     */
    subject: Reference;
    /**
     * The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    supportingInformation?: Reference[];
    /**
     * The date (and perhaps time) when the prescription was initially written or authored on.
     */
    authoredOn?: string;
    /**
     * The individual, organization, or device that initiated the request and has responsibility for its activation.
     */
    requester?: Reference;
    /**
     * The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
     */
    performer?: Reference;
    /**
     * Indicates the type of performer of the administration of the medication.
     */
    performerType?: CodeableConcept;
    /**
     * The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
     */
    recorder?: Reference;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    instantiatesCanonical?: string[];
    instantiatesUri?: string[];
    basedOn?: Reference[];
    /**
     * A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
     */
    groupIdentifier?: Identifier;
    /**
     * The description of the overall patte3rn of the administration of the medication to the patient.
     */
    courseOfTherapyType?: CodeableConcept;
    insurance?: Reference[];
    note?: Annotation[];
    dosageInstruction?: Dosage[];
    /**
     * Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
     */
    dispenseRequest?: MedicationRequest_DispenseRequest;
    /**
     * Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
     */
    substitution?: MedicationRequest_Substitution;
    /**
     * A link to a resource representing an earlier order related order or prescription.
     */
    priorPrescription?: Reference;
    detectedIssue?: Reference[];
    eventHistory?: Reference[];
};

export type MedicationRequest_DispenseRequest = BackboneElement & {
    /**
     * Indicates the quantity or duration for the first dispense of the medication.
     */
    initialFill?: MedicationRequest_DispenseRequest_InitialFill;
    /**
     * The minimum period of time that must occur between dispenses of the medication.
     */
    dispenseInterval?: Duration;
    /**
     * This indicates the validity period of a prescription (stale dating the Prescription).
     */
    validityPeriod?: Period;
    /**
     * An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.
     */
    numberOfRepeatsAllowed?: number;
    /**
     * The amount that is to be dispensed for one fill.
     */
    quantity?: SimpleQuantity;
    /**
     * Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
     */
    expectedSupplyDuration?: Duration;
    /**
     * Indicates the intended dispensing Organization specified by the prescriber.
     */
    performer?: Reference;
};

export type MedicationRequest_DispenseRequest_InitialFill = BackboneElement & {
    /**
     * The amount or quantity to provide as part of the first dispense.
     */
    quantity?: SimpleQuantity;
    /**
     * The length of time that the first dispense is expected to last.
     */
    duration?: Duration;
};

export type MedicationRequest_Substitution = BackboneElement & {
    /**
     * True if the prescriber allows a different drug to be dispensed from what was prescribed.
     */
    allowedBoolean?: boolean;
    /**
     * True if the prescriber allows a different drug to be dispensed from what was prescribed.
     */
    allowedCodeableConcept?: CodeableConcept;
    /**
     * Indicates the reason for the substitution, or why substitution must or must not be performed.
     */
    reason?: CodeableConcept;
};

export type VisionPrescription = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: string;
    /**
     * The date this resource was created.
     */
    created: string;
    /**
     * A resource reference to the person to whom the vision prescription applies.
     */
    patient: Reference;
    /**
     * A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.
     */
    encounter?: Reference;
    /**
     * The date (and perhaps time) when the prescription was written.
     */
    dateWritten: string;
    /**
     * The healthcare professional responsible for authorizing the prescription.
     */
    prescriber: Reference;
    lensSpecification: VisionPrescription_LensSpecification[];
};

export type VisionPrescription_LensSpecification = BackboneElement & {
    /**
     * Identifies the type of vision correction product which is required for the patient.
     */
    product: CodeableConcept;
    /**
     * The eye for which the lens specification applies.
     */
    eye: string;
    /**
     * Lens power measured in dioptres (0.25 units).
     */
    sphere?: number;
    /**
     * Power adjustment for astigmatism measured in dioptres (0.25 units).
     */
    cylinder?: number;
    /**
     * Adjustment for astigmatism measured in integer degrees.
     */
    axis?: number;
    prism?: VisionPrescription_LensSpecification_Prism[];
    /**
     * Power adjustment for multifocal lenses measured in dioptres (0.25 units).
     */
    add?: number;
    /**
     * Contact lens power measured in dioptres (0.25 units).
     */
    power?: number;
    /**
     * Back curvature measured in millimetres.
     */
    backCurve?: number;
    /**
     * Contact lens diameter measured in millimetres.
     */
    diameter?: number;
    /**
     * The recommended maximum wear period for the lens.
     */
    duration?: SimpleQuantity;
    /**
     * Special color or pattern.
     */
    color?: string;
    /**
     * Brand recommendations or restrictions.
     */
    brand?: string;
    note?: Annotation[];
};

export type VisionPrescription_LensSpecification_Prism = BackboneElement & {
    /**
     * Amount of prism to compensate for eye alignment in fractional units.
     */
    amount: number;
    /**
     * The relative base, or reference lens edge, for the prism.
     */
    base: string;
};

export type Endpoint = DomainResource & {
    identifier?: Identifier[];
    /**
     * active | suspended | error | off | test.
     */
    status: string;
    /**
     * A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds&ndash;hook).
     */
    connectionType: Coding;
    /**
     * A friendly name that this endpoint can be referred to with.
     */
    name?: string;
    /**
     * The organization that manages this endpoint (even if technically another organization is hosting this in the cloud, it is the organization associated with the data).
     */
    managingOrganization?: Reference;
    contact?: ContactPoint[];
    /**
     * The interval during which the endpoint is expected to be operational.
     */
    period?: Period;
    payloadType: CodeableConcept[];
    payloadMimeType?: string[];
    /**
     * The uri that describes the actual end&ndash;point to connect to.
     */
    address: string;
    header?: string[];
};

export type EnrollmentRequest = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status?: string;
    /**
     * The date when this resource was created.
     */
    created?: string;
    /**
     * The Insurer who is target  of the request.
     */
    insurer?: Reference;
    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    provider?: Reference;
    /**
     * Patient Resource.
     */
    candidate?: Reference;
    /**
     * Reference to the program or plan identification, underwriter or payor.
     */
    coverage?: Reference;
};

export type EnrollmentResponse = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status?: string;
    /**
     * Original request resource reference.
     */
    request?: Reference;
    /**
     * Processing status: error, complete.
     */
    outcome?: string;
    /**
     * A description of the status of the adjudication.
     */
    disposition?: string;
    /**
     * The date when the enclosed suite of services were performed or completed.
     */
    created?: string;
    /**
     * The Insurer who produced this adjudicated response.
     */
    organization?: Reference;
    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    requestProvider?: Reference;
};

export type EpisodeOfCare = DomainResource & {
    identifier?: Identifier[];
    /**
     * planned | waitlist | active | onhold | finished | cancelled.
     */
    status: string;
    statusHistory?: EpisodeOfCare_StatusHistory[];
    type?: CodeableConcept[];
    diagnosis?: EpisodeOfCare_Diagnosis[];
    /**
     * The patient who is the focus of this episode of care.
     */
    patient: Reference;
    /**
     * The organization that has assumed the specific responsibilities for the specified duration.
     */
    managingOrganization?: Reference;
    /**
     * The period during this EpisodeOfCare that the specific status applied.
     */
    period?: Period;
    referralRequest?: Reference[];
    /**
     * The practitioner that is the care manager/care coordinator for this patient.
     */
    careManager?: Reference;
    team?: Reference[];
    account?: Reference[];
};

export type EpisodeOfCare_Diagnosis = BackboneElement & {
    /**
     * A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
     */
    condition: Reference;
    /**
     * Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge &hellip;).
     */
    role?: CodeableConcept;
    /**
     * Ranking of the diagnosis (for each role type).
     */
    rank?: number;
};

export type EpisodeOfCare_StatusHistory = BackboneElement & {
    /**
     * planned | waitlist | active | onhold | finished | cancelled.
     */
    status: string;
    /**
     * The period during this EpisodeOfCare that the specific status applied.
     */
    period: Period;
};

export type EventDefinition = DomainResource & {
    /**
     * An absolute URI that is used to identify this event definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this event definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the event definition is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the event definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the event definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the event definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the event definition.
     */
    title?: string;
    /**
     * An explanatory or alternate title for the event definition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * The status of this event definition. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this event definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * A code or group definition that describes the intended subject of the event definition.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A code or group definition that describes the intended subject of the event definition.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the event definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the event definition changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the event definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the event definition from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this event definition is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A detailed description of how the event definition is used from a clinical perspective.
     */
    usage?: string;
    /**
     * A copyright statement relating to the event definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the event definition.
     */
    copyright?: string;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the event definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    topic?: CodeableConcept[];
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    relatedArtifact?: RelatedArtifact[];
    trigger: TriggerDefinition[];
};

export type TriggerDefinition = Element & {
    /**
     * The type of triggering event.
     */
    type: string;
    /**
     * A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.
     */
    name?: string;
    /**
     * The timing of the event (if this is a periodic trigger).
     */
    timingTiming?: Timing;
    /**
     * The timing of the event (if this is a periodic trigger).
     */
    timingReference?: Reference;
    /**
     * The timing of the event (if this is a periodic trigger).
     */
    timingDate?: string;
    /**
     * The timing of the event (if this is a periodic trigger).
     */
    timingDateTime?: string;
    data?: DataRequirement[];
    /**
     * A boolean&ndash;valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.
     */
    condition?: Expression;
};

export type Evidence = DomainResource & {
    /**
     * An absolute URI that is used to identify this evidence when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the summary when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the summary author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the summary.
     */
    title?: string;
    /**
     * Citation Resource or display of suggested citation for this evidence.
     */
    citeAsReference?: Reference;
    /**
     * Citation Resource or display of suggested citation for this evidence.
     */
    citeAsMarkdown?: string;
    /**
     * The status of this summary. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * The date  (and optionally time) when the summary was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the summary changes.
     */
    date?: string;
    useContext?: UsageContext[];
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The name of the organization or individual that published the evidence.
     */
    publisher?: string;
    contact?: ContactDetail[];
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    relatedArtifact?: RelatedArtifact[];
    /**
     * A free text natural language description of the evidence from a consumer's perspective.
     */
    description?: string;
    /**
     * Declarative description of the Evidence.
     */
    assertion?: string;
    note?: Annotation[];
    variableDefinition: Evidence_VariableDefinition[];
    /**
     * The method to combine studies.
     */
    synthesisType?: CodeableConcept;
    /**
     * The type of study that produced this evidence.
     */
    studyType?: CodeableConcept;
    statistic?: Evidence_Statistic[];
    certainty?: Evidence_Certainty[];
};

export type Evidence_Certainty = BackboneElement & {
    /**
     * Textual description of certainty.
     */
    description?: string;
    note?: Annotation[];
    /**
     * Aspect of certainty being rated.
     */
    type?: CodeableConcept;
    /**
     * Assessment or judgement of the aspect.
     */
    rating?: CodeableConcept;
    /**
     * Individual or group who did the rating.
     */
    rater?: string;
    subcomponent?: Evidence_Certainty[];
};

export type Evidence_Statistic = BackboneElement & {
    /**
     * A description of the content value of the statistic.
     */
    description?: string;
    note?: Annotation[];
    /**
     * Type of statistic, eg relative risk.
     */
    statisticType?: CodeableConcept;
    /**
     * When the measured variable is handled categorically, the category element is used to define which category the statistic is reporting.
     */
    category?: CodeableConcept;
    /**
     * Statistic value.
     */
    quantity?: Quantity;
    /**
     * The number of events associated with the statistic, where the unit of analysis is different from numberAffected, sampleSize.knownDataCount and sampleSize.numberOfParticipants.
     */
    numberOfEvents?: number;
    /**
     * The number of participants affected where the unit of analysis is the same as sampleSize.knownDataCount and sampleSize.numberOfParticipants.
     */
    numberAffected?: number;
    /**
     * Number of samples in the statistic.
     */
    sampleSize?: Evidence_Statistic_SampleSize;
    attributeEstimate?: Evidence_Statistic_AttributeEstimate[];
    modelCharacteristic?: Evidence_Statistic_ModelCharacteristic[];
};

export type Evidence_Statistic_AttributeEstimate = BackboneElement & {
    /**
     * Human&ndash;readable summary of the estimate.
     */
    description?: string;
    note?: Annotation[];
    /**
     * The type of attribute estimate, eg confidence interval or p value.
     */
    type?: CodeableConcept;
    /**
     * The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure.
     */
    quantity?: Quantity;
    /**
     * Use 95 for a 95% confidence interval.
     */
    level?: number;
    /**
     * Lower bound of confidence interval.
     */
    range?: Range;
    attributeEstimate?: Evidence_Statistic_AttributeEstimate[];
};

export type Evidence_Statistic_ModelCharacteristic = BackboneElement & {
    /**
     * Description of a component of the method to generate the statistic.
     */
    code: CodeableConcept;
    /**
     * Further specification of the quantified value of the component of the method to generate the statistic.
     */
    value?: SimpleQuantity;
    variable?: Evidence_Statistic_ModelCharacteristic_Variable[];
    attributeEstimate?: Evidence_Statistic_AttributeEstimate[];
};

export type Evidence_Statistic_ModelCharacteristic_Variable =
    BackboneElement & {
        /**
         * Description of the variable.
         */
        variableDefinition: Reference;
        /**
         * How the variable is classified for use in adjusted analysis.
         */
        handling?: string;
        valueCategory?: CodeableConcept[];
        valueQuantity?: Quantity[];
        valueRange?: Range[];
    };

export type Evidence_Statistic_SampleSize = BackboneElement & {
    /**
     * Human&ndash;readable summary of population sample size.
     */
    description?: string;
    note?: Annotation[];
    /**
     * Number of participants in the population.
     */
    numberOfStudies?: number;
    /**
     * A human&ndash;readable string to clarify or explain concepts about the sample size.
     */
    numberOfParticipants?: number;
    /**
     * Number of participants with known results for measured variables.
     */
    knownDataCount?: number;
};

export type Evidence_VariableDefinition = BackboneElement & {
    /**
     * A text description or summary of the variable.
     */
    description?: string;
    note?: Annotation[];
    /**
     * population | subpopulation | exposure | referenceExposure | measuredVariable | confounder.
     */
    variableRole: CodeableConcept;
    /**
     * Definition of the actual variable related to the statistic(s).
     */
    observed?: Reference;
    /**
     * Definition of the intended variable related to the Evidence.
     */
    intended?: Reference;
    /**
     * Indication of quality of match between intended variable to actual variable.
     */
    directnessMatch?: CodeableConcept;
};

export type EvidenceReport = DomainResource & {
    /**
     * An absolute URI that is used to identify this EvidenceReport when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
     */
    url?: string;
    /**
     * The status of this summary. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    useContext?: UsageContext[];
    identifier?: Identifier[];
    relatedIdentifier?: Identifier[];
    /**
     * Citation Resource or display of suggested citation for this report.
     */
    citeAsReference?: Reference;
    /**
     * Citation Resource or display of suggested citation for this report.
     */
    citeAsMarkdown?: string;
    /**
     * Specifies the kind of report, such as grouping of classifiers, search results, or human&ndash;compiled expression.
     */
    type?: CodeableConcept;
    note?: Annotation[];
    relatedArtifact?: RelatedArtifact[];
    /**
     * Specifies the subject or focus of the report. Answers "What is this report about?".
     */
    subject: EvidenceReport_Subject;
    /**
     * The name of the organization or individual that published the evidence report.
     */
    publisher?: string;
    contact?: ContactDetail[];
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    relatesTo?: EvidenceReport_RelatesTo[];
    section?: EvidenceReport_Section[];
};

export type EvidenceReport_RelatesTo = BackboneElement & {
    /**
     * The type of relationship that this composition has with anther composition or document.
     */
    code: string;
    /**
     * The target composition/document of this relationship.
     */
    targetIdentifier?: Identifier;
    /**
     * The target composition/document of this relationship.
     */
    targetReference?: Reference;
};

export type EvidenceReport_Section = BackboneElement & {
    /**
     * The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
     */
    title?: string;
    /**
     * A code identifying the kind of content contained within the section. This should be consistent with the section title.
     */
    focus?: CodeableConcept;
    /**
     * A definitional Resource identifying the kind of content contained within the section. This should be consistent with the section title.
     */
    focusReference?: Reference;
    author?: Reference[];
    /**
     * A human&ndash;readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is peferred to contain sufficient detail to make it acceptable for a human to just read the narrative.
     */
    text?: Narrative;
    /**
     * How the entry list was prepared &ndash; whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
     */
    mode?: string;
    /**
     * Specifies the order applied to the items in the section entries.
     */
    orderedBy?: CodeableConcept;
    entryClassifier?: CodeableConcept[];
    entryReference?: Reference[];
    entryQuantity?: Quantity[];
    /**
     * If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
     */
    emptyReason?: CodeableConcept;
    section?: EvidenceReport_Section[];
};

export type EvidenceReport_Subject = BackboneElement & {
    characteristic?: EvidenceReport_Subject_Characteristic[];
    note?: Annotation[];
};

export type EvidenceReport_Subject_Characteristic = BackboneElement & {
    /**
     * Characteristic code.
     */
    code: CodeableConcept;
    /**
     * Characteristic value.
     */
    valueReference?: Reference;
    /**
     * Characteristic value.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Characteristic value.
     */
    valueBoolean?: boolean;
    /**
     * Characteristic value.
     */
    valueQuantity?: Quantity;
    /**
     * Characteristic value.
     */
    valueRange?: Range;
    /**
     * Is used to express not the characteristic.
     */
    exclude?: boolean;
    /**
     * Timeframe for the characteristic.
     */
    period?: Period;
};

export type EvidenceVariable = DomainResource & {
    /**
     * An absolute URI that is used to identify this evidence variable when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this evidence variable is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the evidence variable is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the evidence variable when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the evidence variable author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non&ndash;experimental active artifacts.
     */
    version?: string;
    /**
     * A natural language name identifying the evidence variable. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the evidence variable.
     */
    title?: string;
    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    shortTitle?: string;
    /**
     * An explanatory or alternate title for the EvidenceVariable giving additional information about its content.
     */
    subtitle?: string;
    /**
     * The status of this evidence variable. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * The date  (and optionally time) when the evidence variable was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the evidence variable changes.
     */
    date?: string;
    /**
     * A free text natural language description of the evidence variable from a consumer's perspective.
     */
    description?: string;
    note?: Annotation[];
    useContext?: UsageContext[];
    /**
     * The name of the organization or individual that published the evidence variable.
     */
    publisher?: string;
    contact?: ContactDetail[];
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    relatedArtifact?: RelatedArtifact[];
    /**
     * True if the actual variable measured, false if a conceptual representation of the intended variable.
     */
    actual?: boolean;
    /**
     * Used to specify if two or more characteristics are combined with OR or AND.
     */
    characteristicCombination?: string;
    characteristic?: EvidenceVariable_Characteristic[];
    /**
     * Used for an outcome to classify.
     */
    handling?: string;
    category?: EvidenceVariable_Category[];
};

export type EvidenceVariable_Category = BackboneElement & {
    /**
     * A human&ndash;readable title or representation of the grouping.
     */
    name?: string;
    /**
     * Value or set of values that define the grouping.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Value or set of values that define the grouping.
     */
    valueQuantity?: Quantity;
    /**
     * Value or set of values that define the grouping.
     */
    valueRange?: Range;
};

export type EvidenceVariable_Characteristic = BackboneElement & {
    /**
     * A short, natural language description of the characteristic that could be used to communicate the criteria to an end&ndash;user.
     */
    description?: string;
    /**
     * Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionReference?: Reference;
    /**
     * Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionCanonical?: string;
    /**
     * Define members of the evidence element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionCodeableConcept?: CodeableConcept;
    /**
     * Method used for describing characteristic.
     */
    method?: CodeableConcept;
    /**
     * Device used for determining characteristic.
     */
    device?: Reference;
    /**
     * When true, members with this characteristic are excluded from the element.
     */
    exclude?: boolean;
    /**
     * Indicates duration, period, or point of observation from the participant's study entry.
     */
    timeFromStart?: EvidenceVariable_Characteristic_TimeFromStart;
    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    groupMeasure?: string;
};

export type EvidenceVariable_Characteristic_TimeFromStart = BackboneElement & {
    /**
     * A short, natural language description.
     */
    description?: string;
    /**
     * Used to express the observation at a defined amount of time after the study start.
     */
    quantity?: Quantity;
    /**
     * Used to express the observation within a period after the study start.
     */
    range?: Range;
    note?: Annotation[];
};

export type DataRequirement = Element & {
    /**
     * The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.
     */
    type: string;
    profile?: string[];
    /**
     * The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
     */
    subjectReference?: Reference;
    mustSupport?: string[];
    codeFilter?: DataRequirement_CodeFilter[];
    dateFilter?: DataRequirement_DateFilter[];
    /**
     * Specifies a maximum number of results that are required (uses the _count search parameter).
     */
    limit?: number;
    sort?: DataRequirement_Sort[];
};

export type DataRequirement_CodeFilter = BackboneElement & {
    /**
     * The code&ndash;valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub&ndash;elements, as well as indexers ([x]) to traverse multiple&ndash;cardinality sub&ndash;elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.
     */
    path?: string;
    /**
     * A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.
     */
    searchParam?: string;
    /**
     * The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code&ndash;valued element specified in the path is a member of the specified valueset.
     */
    valueSet?: string;
    code?: Coding[];
};

export type DataRequirement_DateFilter = BackboneElement & {
    /**
     * The date&ndash;valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub&ndash;elements, as well as indexers ([x]) to traverse multiple&ndash;cardinality sub&ndash;elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.
     */
    path?: string;
    /**
     * A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.
     */
    searchParam?: string;
    /**
     * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
     */
    valueDateTime?: string;
    /**
     * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
     */
    valuePeriod?: Period;
    /**
     * The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
     */
    valueDuration?: Duration;
};

export type DataRequirement_Sort = BackboneElement & {
    /**
     * The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub&ndash;elements, as well as indexers ([x]) to traverse multiple&ndash;cardinality sub&ndash;elements. Note that the index must be an integer constant.
     */
    path: string;
    /**
     * The direction of the sort, ascending or descending.
     */
    direction: string;
};

export type ExampleScenario = DomainResource & {
    /**
     * An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the example scenario. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * The status of this example scenario. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the example scenario was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition').
     */
    date?: string;
    /**
     * The name of the organization or individual that published the example scenario.
     */
    publisher?: string;
    contact?: ContactDetail[];
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario.
     */
    copyright?: string;
    /**
     * What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario.
     */
    purpose?: string;
    actor?: ExampleScenario_Actor[];
    instance?: ExampleScenario_Instance[];
    process?: ExampleScenario_Process[];
    workflow?: string[];
};

export type ExampleScenario_Actor = BackboneElement & {
    /**
     * ID or acronym of actor.
     */
    actorId: string;
    /**
     * The type of actor &ndash; person or system.
     */
    type: string;
    /**
     * The name of the actor as shown in the page.
     */
    name?: string;
    /**
     * The description of the actor.
     */
    description?: string;
};

export type ExampleScenario_Instance = BackboneElement & {
    /**
     * The id of the resource for referencing.
     */
    resourceId: string;
    /**
     * The type of the resource.
     */
    resourceType: string;
    /**
     * A short name for the resource instance.
     */
    name?: string;
    /**
     * Human&ndash;friendly description of the resource instance.
     */
    description?: string;
    version?: ExampleScenario_Instance_Version[];
    containedInstance?: ExampleScenario_Instance_ContainedInstance[];
};

export type ExampleScenario_Instance_ContainedInstance = BackboneElement & {
    /**
     * Each resource contained in the instance.
     */
    resourceId: string;
    /**
     * A specific version of a resource contained in the instance.
     */
    versionId?: string;
};

export type ExampleScenario_Instance_Version = BackboneElement & {
    /**
     * The identifier of a specific version of a resource.
     */
    versionId: string;
    /**
     * The description of the resource version.
     */
    description: string;
};

export type ExampleScenario_Process = BackboneElement & {
    /**
     * The diagram title of the group of operations.
     */
    title: string;
    /**
     * A longer description of the group of operations.
     */
    description?: string;
    /**
     * Description of initial status before the process starts.
     */
    preConditions?: string;
    /**
     * Description of final status after the process ends.
     */
    postConditions?: string;
    step?: ExampleScenario_Process_Step[];
};

export type ExampleScenario_Process_Step = BackboneElement & {
    process?: ExampleScenario_Process[];
    /**
     * If there is a pause in the flow.
     */
    pause?: boolean;
    /**
     * Each interaction or action.
     */
    operation?: ExampleScenario_Process_Step_Operation;
    alternative?: ExampleScenario_Process_Step_Alternative[];
};

export type ExampleScenario_Process_Step_Alternative = BackboneElement & {
    /**
     * The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
     */
    title: string;
    /**
     * A human&ndash;readable description of the alternative explaining when the alternative should occur rather than the base step.
     */
    description?: string;
    step?: ExampleScenario_Process_Step[];
};

export type ExampleScenario_Process_Step_Operation = BackboneElement & {
    /**
     * The sequential number of the interaction, e.g. 1.2.5.
     */
    number: string;
    /**
     * The type of operation &ndash; CRUD.
     */
    type?: string;
    /**
     * The human&ndash;friendly name of the interaction.
     */
    name?: string;
    /**
     * Who starts the transaction.
     */
    initiator?: string;
    /**
     * Who receives the transaction.
     */
    receiver?: string;
    /**
     * A comment to be inserted in the diagram.
     */
    description?: string;
    /**
     * Whether the initiator is deactivated right after the transaction.
     */
    initiatorActive?: boolean;
    /**
     * Whether the receiver is deactivated right after the transaction.
     */
    receiverActive?: boolean;
    /**
     * Each resource instance used by the initiator.
     */
    request?: ExampleScenario_Instance_ContainedInstance;
    /**
     * Each resource instance used by the responder.
     */
    response?: ExampleScenario_Instance_ContainedInstance;
};

export type FamilyMemberHistory = DomainResource & {
    identifier?: Identifier[];
    instantiatesCanonical?: string[];
    instantiatesUri?: string[];
    /**
     * A code specifying the status of the record of the family history of a specific family member.
     */
    status: string;
    /**
     * Describes why the family member's history is not available.
     */
    dataAbsentReason?: CodeableConcept;
    /**
     * The person who this history concerns.
     */
    patient: Reference;
    /**
     * The date (and possibly time) when the family member history was recorded or last updated.
     */
    date?: string;
    /**
     * This will either be a name or a description; e.g. "Aunt Susan", "my cousin with the red hair".
     */
    name?: string;
    /**
     * The type of relationship this person has to the patient (father, mother, brother etc.).
     */
    relationship: CodeableConcept;
    /**
     * The birth sex of the family member.
     */
    sex?: CodeableConcept;
    /**
     * The actual or approximate date of birth of the relative.
     */
    bornPeriod?: Period;
    /**
     * The actual or approximate date of birth of the relative.
     */
    bornDate?: string;
    /**
     * The actual or approximate date of birth of the relative.
     */
    bornString?: string;
    /**
     * The age of the relative at the time the family member history is recorded.
     */
    ageAge?: Age;
    /**
     * The age of the relative at the time the family member history is recorded.
     */
    ageRange?: Range;
    /**
     * The age of the relative at the time the family member history is recorded.
     */
    ageString?: string;
    /**
     * If true, indicates that the age value specified is an estimated value.
     */
    estimatedAge?: boolean;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedBoolean?: boolean;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedAge?: Age;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedRange?: Range;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedDate?: string;
    /**
     * Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.
     */
    deceasedString?: string;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    note?: Annotation[];
    condition?: FamilyMemberHistory_Condition[];
};

export type FamilyMemberHistory_Condition = BackboneElement & {
    /**
     * The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
     */
    code: CodeableConcept;
    /**
     * Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.
     */
    outcome?: CodeableConcept;
    /**
     * This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
     */
    contributedToDeath?: boolean;
    /**
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetAge?: Age;
    /**
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetRange?: Range;
    /**
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetPeriod?: Period;
    /**
     * Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
     */
    onsetString?: string;
    note?: Annotation[];
};

export type Goal = DomainResource & {
    identifier?: Identifier[];
    /**
     * The state of the goal throughout its lifecycle.
     */
    lifecycleStatus: string;
    /**
     * Describes the progression, or lack thereof, towards the goal against the target.
     */
    achievementStatus?: CodeableConcept;
    category?: CodeableConcept[];
    /**
     * Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.
     */
    priority?: CodeableConcept;
    /**
     * Human&ndash;readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
     */
    description: CodeableConcept;
    /**
     * Identifies the patient, group or organization for whom the goal is being established.
     */
    subject: Reference;
    /**
     * The date or event after which the goal should begin being pursued.
     */
    startDate?: string;
    /**
     * The date or event after which the goal should begin being pursued.
     */
    startCodeableConcept?: CodeableConcept;
    target?: Goal_Target[];
    /**
     * Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.
     */
    statusDate?: string;
    /**
     * Captures the reason for the current status.
     */
    statusReason?: string;
    /**
     * Indicates whose goal this is &ndash; patient goal, practitioner goal, etc.
     */
    expressedBy?: Reference;
    addresses?: Reference[];
    note?: Annotation[];
    outcomeCode?: CodeableConcept[];
    outcomeReference?: Reference[];
};

export type Goal_Target = BackboneElement & {
    /**
     * The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
     */
    measure?: CodeableConcept;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailQuantity?: Quantity;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailRange?: Range;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailCodeableConcept?: CodeableConcept;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailString?: string;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailBoolean?: boolean;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailInteger?: number;
    /**
     * The target value of the focus to be achieved to signify the fulfillment of the goal, e.g. 150 pounds, 7.0%. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any focus value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any focus value at or above the low value.
     */
    detailRatio?: Ratio;
    /**
     * Indicates either the date or the duration after start by which the goal should be met.
     */
    dueDate?: string;
    /**
     * Indicates either the date or the duration after start by which the goal should be met.
     */
    dueDuration?: Duration;
};

export type GraphDefinition = DomainResource & {
    /**
     * An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this graph definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the graph definition is stored on different servers.
     */
    url?: string;
    /**
     * The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * The status of this graph definition. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the graph definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the graph definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the graph definition from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this graph definition is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * The type of FHIR resource at which instances of this graph start.
     */
    start: string;
    /**
     * The profile that describes the use of the base resource.
     */
    profile?: string;
    link?: GraphDefinition_Link[];
};

export type GraphDefinition_Link = BackboneElement & {
    /**
     * A FHIR expression that identifies one of FHIR References to other resources.
     */
    path?: string;
    /**
     * Which slice (if profiled).
     */
    sliceName?: string;
    /**
     * Minimum occurrences for this link.
     */
    min?: number;
    /**
     * Maximum occurrences for this link.
     */
    max?: string;
    /**
     * Information about why this link is of interest in this graph definition.
     */
    description?: string;
    target?: GraphDefinition_Link_Target[];
};

export type GraphDefinition_Link_Target = BackboneElement & {
    /**
     * Type of resource this link refers to.
     */
    type: string;
    /**
     * A set of parameters to look up.
     */
    params?: string;
    /**
     * Profile for the target resource.
     */
    profile?: string;
    compartment?: GraphDefinition_Link_Target_Compartment[];
    link?: GraphDefinition_Link[];
};

export type GraphDefinition_Link_Target_Compartment = BackboneElement & {
    /**
     * Defines how the compartment rule is used &ndash; whether it it is used to test whether resources are subject to the rule, or whether it is a rule that must be followed.
     */
    use: string;
    /**
     * Identifies the compartment.
     */
    code: string;
    /**
     * identical | matching | different | no&ndash;rule | custom.
     */
    rule: string;
    /**
     * Custom rule, as a FHIRPath expression.
     */
    expression?: string;
    /**
     * Documentation for FHIRPath expression.
     */
    description?: string;
};

export type GuidanceResponse = DomainResource & {
    /**
     * The identifier of the request associated with this response. If an identifier was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi&ndash;request scenario.
     */
    requestIdentifier?: Identifier;
    identifier?: Identifier[];
    /**
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleUri?: string;
    /**
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleCanonical?: string;
    /**
     * An identifier, CodeableConcept or canonical reference to the guidance that was requested.
     */
    moduleCodeableConcept?: CodeableConcept;
    /**
     * The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data&ndash;required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data&ndash;requested, and the response will contain a description of the additional requested information.
     */
    status: string;
    /**
     * The patient for which the request was processed.
     */
    subject?: Reference;
    /**
     * The encounter during which this response was created or to which the creation of this record is tightly associated.
     */
    encounter?: Reference;
    /**
     * Indicates when the guidance response was processed.
     */
    occurrenceDateTime?: string;
    /**
     * Provides a reference to the device that performed the guidance.
     */
    performer?: Reference;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    note?: Annotation[];
    evaluationMessage?: Reference[];
    /**
     * The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.
     */
    outputParameters?: Reference;
    /**
     * The actions, if any, produced by the evaluation of the artifact.
     */
    result?: Reference;
    dataRequirement?: DataRequirement[];
};

export type HealthcareService = DomainResource & {
    identifier?: Identifier[];
    /**
     * This flag is used to mark the record to not be used. This is not used when a center is closed for maintenance, or for holidays, the notAvailable period is to be used for this.
     */
    active?: boolean;
    /**
     * The organization that provides this healthcare service.
     */
    providedBy?: Reference;
    category?: CodeableConcept[];
    type?: CodeableConcept[];
    specialty?: CodeableConcept[];
    location?: Reference[];
    /**
     * Further description of the service as it would be presented to a consumer while searching.
     */
    name?: string;
    /**
     * Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.
     */
    comment?: string;
    /**
     * Extra details about the service that can't be placed in the other fields.
     */
    extraDetails?: string;
    /**
     * If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.
     */
    photo?: Attachment;
    telecom?: ContactPoint[];
    coverageArea?: Reference[];
    serviceProvisionCode?: CodeableConcept[];
    eligibility?: HealthcareService_Eligibility[];
    program?: CodeableConcept[];
    characteristic?: CodeableConcept[];
    communication?: CodeableConcept[];
    referralMethod?: CodeableConcept[];
    /**
     * Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.
     */
    appointmentRequired?: boolean;
    availableTime?: HealthcareService_AvailableTime[];
    notAvailable?: HealthcareService_NotAvailable[];
    /**
     * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
     */
    availabilityExceptions?: string;
    endpoint?: Reference[];
};

export type HealthcareService_AvailableTime = BackboneElement & {
    daysOfWeek?: string[];
    /**
     * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
     */
    allDay?: boolean;
    /**
     * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    availableStartTime?: string;
    /**
     * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    availableEndTime?: string;
};

export type HealthcareService_Eligibility = BackboneElement & {
    /**
     * Coded value for the eligibility.
     */
    code?: CodeableConcept;
    /**
     * Describes the eligibility conditions for the service.
     */
    comment?: string;
};

export type HealthcareService_NotAvailable = BackboneElement & {
    /**
     * The reason that can be presented to the user as to why this time is not available.
     */
    description: string;
    /**
     * Service is not available (seasonally or for a public holiday) from this date.
     */
    during?: Period;
};

export type ImagingStudy = DomainResource & {
    identifier?: Identifier[];
    /**
     * The current state of the ImagingStudy.
     */
    status: string;
    modality?: Coding[];
    /**
     * The subject, typically a patient, of the imaging study.
     */
    subject: Reference;
    /**
     * The healthcare event (e.g. a patient and healthcare provider interaction) during which this ImagingStudy is made.
     */
    encounter?: Reference;
    /**
     * Date and time the study started.
     */
    started?: string;
    basedOn?: Reference[];
    /**
     * The requesting/referring physician.
     */
    referrer?: Reference;
    interpreter?: Reference[];
    endpoint?: Reference[];
    /**
     * Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
     */
    numberOfSeries?: number;
    /**
     * Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
     */
    numberOfInstances?: number;
    /**
     * The procedure which this ImagingStudy was part of.
     */
    procedureReference?: Reference;
    procedureCode?: CodeableConcept[];
    /**
     * The principal physical location where the ImagingStudy was performed.
     */
    location?: Reference;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    note?: Annotation[];
    /**
     * The Imaging Manager description of the study. Institution&ndash;generated description or classification of the Study (component) performed.
     */
    description?: string;
    series?: ImagingStudy_Series[];
};

export type ImagingStudy_Series = BackboneElement & {
    /**
     * The DICOM Series Instance UID for the series.
     */
    uid: string;
    /**
     * The numeric identifier of this series in the study.
     */
    number?: number;
    /**
     * The modality of this series sequence.
     */
    modality: Coding;
    /**
     * A description of the series.
     */
    description?: string;
    /**
     * Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
     */
    numberOfInstances?: number;
    endpoint?: Reference[];
    /**
     * The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED&ndash;CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
     */
    bodySite?: Coding;
    /**
     * The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
     */
    laterality?: Coding;
    specimen?: Reference[];
    /**
     * The date and time the series was started.
     */
    started?: string;
    performer?: ImagingStudy_Series_Performer[];
    instance?: ImagingStudy_Series_Instance[];
};

export type ImagingStudy_Series_Instance = BackboneElement & {
    /**
     * The DICOM SOP Instance UID for this image or other DICOM content.
     */
    uid: string;
    /**
     * DICOM instance  type.
     */
    sopClass: Coding;
    /**
     * The number of instance in the series.
     */
    number?: number;
    /**
     * The description of the instance.
     */
    title?: string;
};

export type ImagingStudy_Series_Performer = BackboneElement & {
    /**
     * Distinguishes the type of involvement of the performer in the series.
     */
    function?: CodeableConcept;
    /**
     * Indicates who or what performed the series.
     */
    actor: Reference;
};

export type Immunization = DomainResource & {
    identifier?: Identifier[];
    /**
     * Indicates the current status of the immunization event.
     */
    status: string;
    /**
     * Indicates the reason the immunization event was not performed.
     */
    statusReason?: CodeableConcept;
    /**
     * Vaccine that was administered or was to be administered.
     */
    vaccineCode: CodeableConcept;
    /**
     * The patient who either received or did not receive the immunization.
     */
    patient: Reference;
    /**
     * The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
     */
    encounter?: Reference;
    /**
     * Date vaccine administered or was to be administered.
     */
    occurrenceDateTime?: string;
    /**
     * Date vaccine administered or was to be administered.
     */
    occurrenceString?: string;
    /**
     * The date the occurrence of the immunization was first captured in the record &ndash; potentially significantly after the occurrence of the event.
     */
    recorded?: string;
    /**
     * An indication that the content of the record is based on information from the person who administered the vaccine. This reflects the context under which the data was originally recorded.
     */
    primarySource?: boolean;
    /**
     * The source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
     */
    reportOrigin?: CodeableConcept;
    /**
     * The service delivery location where the vaccine administration occurred.
     */
    location?: Reference;
    /**
     * Name of vaccine manufacturer.
     */
    manufacturer?: Reference;
    /**
     * Lot number of the  vaccine product.
     */
    lotNumber?: string;
    /**
     * Date vaccine batch expires.
     */
    expirationDate?: string;
    /**
     * Body site where vaccine was administered.
     */
    site?: CodeableConcept;
    /**
     * The path by which the vaccine product is taken into the body.
     */
    route?: CodeableConcept;
    /**
     * The quantity of vaccine product that was administered.
     */
    doseQuantity?: SimpleQuantity;
    performer?: Immunization_Performer[];
    note?: Annotation[];
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    /**
     * Indication if a dose is considered to be subpotent. By default, a dose should be considered to be potent.
     */
    isSubpotent?: boolean;
    subpotentReason?: CodeableConcept[];
    education?: Immunization_Education[];
    programEligibility?: CodeableConcept[];
    /**
     * Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
     */
    fundingSource?: CodeableConcept;
    reaction?: Immunization_Reaction[];
    protocolApplied?: Immunization_ProtocolApplied[];
};

export type Immunization_Education = BackboneElement & {
    /**
     * Identifier of the material presented to the patient.
     */
    documentType?: string;
    /**
     * Reference pointer to the educational material given to the patient if the information was on line.
     */
    reference?: string;
    /**
     * Date the educational material was published.
     */
    publicationDate?: string;
    /**
     * Date the educational material was given to the patient.
     */
    presentationDate?: string;
};

export type Immunization_Performer = BackboneElement & {
    /**
     * Describes the type of performance (e.g. ordering provider, administering provider, etc.).
     */
    function?: CodeableConcept;
    /**
     * The practitioner or organization who performed the action.
     */
    actor: Reference;
};

export type Immunization_ProtocolApplied = BackboneElement & {
    /**
     * One possible path to achieve presumed immunity against a disease &ndash; within the context of an authority.
     */
    series?: string;
    /**
     * Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
     */
    authority?: Reference;
    targetDisease?: CodeableConcept[];
    /**
     * Nominal position in a series.
     */
    doseNumberPositiveInt?: number;
    /**
     * Nominal position in a series.
     */
    doseNumberString?: string;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesPositiveInt?: number;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesString?: string;
};

export type Immunization_Reaction = BackboneElement & {
    /**
     * Date of reaction to the immunization.
     */
    date?: string;
    /**
     * Details of the reaction.
     */
    detail?: Reference;
    /**
     * Self&ndash;reported indicator.
     */
    reported?: boolean;
};

export type ImmunizationEvaluation = DomainResource & {
    identifier?: Identifier[];
    /**
     * Indicates the current status of the evaluation of the vaccination administration event.
     */
    status: string;
    /**
     * The individual for whom the evaluation is being done.
     */
    patient: Reference;
    /**
     * The date the evaluation of the vaccine administration event was performed.
     */
    date?: string;
    /**
     * Indicates the authority who published the protocol (e.g. ACIP).
     */
    authority?: Reference;
    /**
     * The vaccine preventable disease the dose is being evaluated against.
     */
    targetDisease: CodeableConcept;
    /**
     * The vaccine administration event being evaluated.
     */
    immunizationEvent: Reference;
    /**
     * Indicates if the dose is valid or not valid with respect to the published recommendations.
     */
    doseStatus: CodeableConcept;
    doseStatusReason?: CodeableConcept[];
    /**
     * Additional information about the evaluation.
     */
    description?: string;
    /**
     * One possible path to achieve presumed immunity against a disease &ndash; within the context of an authority.
     */
    series?: string;
    /**
     * Nominal position in a series.
     */
    doseNumberPositiveInt?: number;
    /**
     * Nominal position in a series.
     */
    doseNumberString?: string;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesPositiveInt?: number;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesString?: string;
};

export type ImmunizationRecommendation = DomainResource & {
    identifier?: Identifier[];
    /**
     * The patient the recommendation(s) are for.
     */
    patient: Reference;
    /**
     * The date the immunization recommendation(s) were created.
     */
    date: string;
    /**
     * Indicates the authority who published the protocol (e.g. ACIP).
     */
    authority?: Reference;
    recommendation: ImmunizationRecommendation_Recommendation[];
};

export type ImmunizationRecommendation_Recommendation = BackboneElement & {
    vaccineCode?: CodeableConcept[];
    /**
     * The targeted disease for the recommendation.
     */
    targetDisease?: CodeableConcept;
    contraindicatedVaccineCode?: CodeableConcept[];
    /**
     * Indicates the patient status with respect to the path to immunity for the target disease.
     */
    forecastStatus: CodeableConcept;
    forecastReason?: CodeableConcept[];
    dateCriterion?: ImmunizationRecommendation_Recommendation_DateCriterion[];
    /**
     * Contains the description about the protocol under which the vaccine was administered.
     */
    description?: string;
    /**
     * One possible path to achieve presumed immunity against a disease &ndash; within the context of an authority.
     */
    series?: string;
    /**
     * Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).
     */
    doseNumberPositiveInt?: number;
    /**
     * Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).
     */
    doseNumberString?: string;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesPositiveInt?: number;
    /**
     * The recommended number of doses to achieve immunity.
     */
    seriesDosesString?: string;
    supportingImmunization?: Reference[];
    supportingPatientInformation?: Reference[];
};

export type ImmunizationRecommendation_Recommendation_DateCriterion =
    BackboneElement & {
        /**
         * Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
         */
        code: CodeableConcept;
        /**
         * The date whose meaning is specified by dateCriterion.code.
         */
        value: string;
    };

export type ImplementationGuide = DomainResource & {
    /**
     * An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this implementation guide is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the implementation guide is stored on different servers.
     */
    url: string;
    /**
     * The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the implementation guide.
     */
    title?: string;
    /**
     * The status of this implementation guide. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the implementation guide was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the implementation guide.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the implementation guide from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
     */
    copyright?: string;
    /**
     * The NPM package name for this Implementation Guide, used in the NPM package distribution, which is the primary mechanism by which FHIR based tooling manages IG dependencies. This value must be globally unique, and should be assigned with care.
     */
    packageId: string;
    /**
     * The license that applies to this Implementation Guide, using an SPDX license code, or 'not&ndash;open&ndash;source'.
     */
    license?: string;
    fhirVersion: string[];
    dependsOn?: ImplementationGuide_DependsOn[];
    global?: ImplementationGuide_Global[];
    /**
     * The information needed by an IG publisher tool to publish the whole implementation guide.
     */
    definition?: ImplementationGuide_Definition;
    /**
     * Information about an assembled implementation guide, created by the publication tooling.
     */
    manifest?: ImplementationGuide_Manifest;
};

export type ImplementationGuide_Definition = BackboneElement & {
    grouping?: ImplementationGuide_Definition_Grouping[];
    resource: ImplementationGuide_Definition_Resource[];
    /**
     * A page / section in the implementation guide. The root page is the implementation guide home page.
     */
    page?: ImplementationGuide_Definition_Page;
    parameter?: ImplementationGuide_Definition_Parameter[];
    template?: ImplementationGuide_Definition_Template[];
};

export type ImplementationGuide_Definition_Grouping = BackboneElement & {
    /**
     * The human&ndash;readable title to display for the package of resources when rendering the implementation guide.
     */
    name: string;
    /**
     * Human readable text describing the package.
     */
    description?: string;
};

export type ImplementationGuide_Definition_Page = BackboneElement & {
    /**
     * The source address for the page.
     */
    nameUrl?: string;
    /**
     * The source address for the page.
     */
    nameReference?: Reference;
    /**
     * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
     */
    title: string;
    /**
     * A code that indicates how the page is generated.
     */
    generation: string;
    page?: ImplementationGuide_Definition_Page[];
};

export type ImplementationGuide_Definition_Parameter = BackboneElement & {
    /**
     * apply | path&ndash;resource | path&ndash;pages | path&ndash;tx&ndash;cache | expansion&ndash;parameter | rule&ndash;broken&ndash;links | generate&ndash;xml | generate&ndash;json | generate&ndash;turtle | html&ndash;template.
     */
    code: string;
    /**
     * Value for named type.
     */
    value: string;
};

export type ImplementationGuide_Definition_Resource = BackboneElement & {
    /**
     * Where this resource is found.
     */
    reference: Reference;
    fhirVersion?: string[];
    /**
     * A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
     */
    name?: string;
    /**
     * A description of the reason that a resource has been included in the implementation guide.
     */
    description?: string;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleBoolean?: boolean;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleCanonical?: string;
    /**
     * Reference to the id of the grouping this resource appears in.
     */
    groupingId?: string;
};

export type ImplementationGuide_Definition_Template = BackboneElement & {
    /**
     * Type of template specified.
     */
    code: string;
    /**
     * The source location for the template.
     */
    source: string;
    /**
     * The scope in which the template applies.
     */
    scope?: string;
};

export type ImplementationGuide_DependsOn = BackboneElement & {
    /**
     * A canonical reference to the Implementation guide for the dependency.
     */
    uri: string;
    /**
     * The NPM package name for the Implementation Guide that this IG depends on.
     */
    packageId?: string;
    /**
     * The version of the IG that is depended on, when the correct version is required to understand the IG correctly.
     */
    version?: string;
};

export type ImplementationGuide_Global = BackboneElement & {
    /**
     * The type of resource that all instances must conform to.
     */
    type: string;
    /**
     * A reference to the profile that all instances must conform to.
     */
    profile: string;
};

export type ImplementationGuide_Manifest = BackboneElement & {
    /**
     * A pointer to official web page, PDF or other rendering of the implementation guide.
     */
    rendering?: string;
    resource: ImplementationGuide_Manifest_Resource[];
    page?: ImplementationGuide_Manifest_Page[];
    image?: string[];
    other?: string[];
};

export type ImplementationGuide_Manifest_Page = BackboneElement & {
    /**
     * Relative path to the page.
     */
    name: string;
    /**
     * A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
     */
    title?: string;
    anchor?: string[];
};

export type ImplementationGuide_Manifest_Resource = BackboneElement & {
    /**
     * Where this resource is found.
     */
    reference: Reference;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleBoolean?: boolean;
    /**
     * If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
     */
    exampleCanonical?: string;
    /**
     * The relative path for primary page for this resource within the IG.
     */
    relativePath?: string;
};

export type Ingredient = DomainResource & {
    /**
     * The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
     */
    identifier?: Identifier;
    /**
     * The status of this ingredient. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    for?: Reference[];
    /**
     * A classification of the ingredient identifying its purpose within the product, e.g. active, inactive.
     */
    role: CodeableConcept;
    function?: CodeableConcept[];
    /**
     * If the ingredient is a known or suspected allergen. Note that this is a property of the substance, so if a reference to a SubstanceDefinition is used to decribe that (rather than just a code), the allergen information should go there, not here.
     */
    allergenicIndicator?: boolean;
    manufacturer?: Ingredient_Manufacturer[];
    /**
     * The substance that comprises this ingredient.
     */
    substance: Ingredient_Substance;
};

export type Ingredient_Manufacturer = BackboneElement & {
    /**
     * The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.
     */
    role?: string;
    /**
     * An organization that manufactures this ingredient.
     */
    manufacturer: Reference;
};

export type Ingredient_Substance = BackboneElement & {
    /**
     * A code or full resource that represents the ingredient's substance.
     */
    code: CodeableReference;
    strength?: Ingredient_Substance_Strength[];
};

export type Ingredient_Substance_Strength = BackboneElement & {
    /**
     * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
     */
    presentationRatio?: Ratio;
    /**
     * The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. Unit of presentation refers to the quantity that the item occurs in e.g. a strength per tablet size, perhaps 'per 20mg' (the size of the tablet). It is not generally normalized as a unitary unit, which would be 'per mg').
     */
    presentationRatioRange?: RatioRange;
    /**
     * A textual represention of either the whole of the presentation strength or a part of it &ndash; with the rest being in Strength.presentation as a ratio.
     */
    textPresentation?: string;
    /**
     * The strength per unitary volume (or mass).
     */
    concentrationRatio?: Ratio;
    /**
     * The strength per unitary volume (or mass).
     */
    concentrationRatioRange?: RatioRange;
    /**
     * A textual represention of either the whole of the concentration strength or a part of it &ndash; with the rest being in Strength.concentration as a ratio.
     */
    textConcentration?: string;
    /**
     * For when strength is measured at a particular point or distance. There are products where strength is measured at a particular point. For example, the strength of the ingredient in some inhalers is measured at a particular position relative to the point of aerosolization.
     */
    measurementPoint?: string;
    country?: CodeableConcept[];
    referenceStrength?: Ingredient_Substance_Strength_ReferenceStrength[];
};

export type Ingredient_Substance_Strength_ReferenceStrength =
    BackboneElement & {
        /**
         * Relevant reference substance.
         */
        substance?: CodeableReference;
        /**
         * Strength expressed in terms of a reference substance.
         */
        strengthRatio?: Ratio;
        /**
         * Strength expressed in terms of a reference substance.
         */
        strengthRatioRange?: RatioRange;
        /**
         * For when strength is measured at a particular point or distance.
         */
        measurementPoint?: string;
        country?: CodeableConcept[];
    };

export type InsurancePlan = DomainResource & {
    identifier?: Identifier[];
    /**
     * The current state of the health insurance product.
     */
    status?: string;
    type?: CodeableConcept[];
    /**
     * Official name of the health insurance product as designated by the owner.
     */
    name?: string;
    alias?: string[];
    /**
     * The period of time that the health insurance product is available.
     */
    period?: Period;
    /**
     * The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third&ndash;party payers, or health plan sponsors comonly referred to as 'payers'.
     */
    ownedBy?: Reference;
    /**
     * An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
     */
    administeredBy?: Reference;
    coverageArea?: Reference[];
    contact?: InsurancePlan_Contact[];
    endpoint?: Reference[];
    network?: Reference[];
    coverage?: InsurancePlan_Coverage[];
    plan?: InsurancePlan_Plan[];
};

export type InsurancePlan_Contact = BackboneElement & {
    /**
     * Indicates a purpose for which the contact can be reached.
     */
    purpose?: CodeableConcept;
    /**
     * A name associated with the contact.
     */
    name?: HumanName;
    telecom?: ContactPoint[];
    /**
     * Visiting or postal addresses for the contact.
     */
    address?: Address;
};

export type InsurancePlan_Coverage = BackboneElement & {
    /**
     * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
     */
    type: CodeableConcept;
    network?: Reference[];
    benefit: InsurancePlan_Coverage_Benefit[];
};

export type InsurancePlan_Coverage_Benefit = BackboneElement & {
    /**
     * Type of benefit (primary care; speciality care; inpatient; outpatient).
     */
    type: CodeableConcept;
    /**
     * The referral requirements to have access/coverage for this benefit.
     */
    requirement?: string;
    limit?: InsurancePlan_Coverage_Benefit_Limit[];
};

export type InsurancePlan_Coverage_Benefit_Limit = BackboneElement & {
    /**
     * The maximum amount of a service item a plan will pay for a covered benefit.  For examples. wellness visits, or eyeglasses.
     */
    value?: Quantity;
    /**
     * The specific limit on the benefit.
     */
    code?: CodeableConcept;
};

export type InsurancePlan_Plan = BackboneElement & {
    identifier?: Identifier[];
    /**
     * Type of plan. For example, "Platinum" or "High Deductable".
     */
    type?: CodeableConcept;
    coverageArea?: Reference[];
    network?: Reference[];
    generalCost?: InsurancePlan_Plan_GeneralCost[];
    specificCost?: InsurancePlan_Plan_SpecificCost[];
};

export type InsurancePlan_Plan_GeneralCost = BackboneElement & {
    /**
     * Type of cost.
     */
    type?: CodeableConcept;
    /**
     * Number of participants enrolled in the plan.
     */
    groupSize?: number;
    /**
     * Value of the cost.
     */
    cost?: Money;
    /**
     * Additional information about the general costs associated with this plan.
     */
    comment?: string;
};

export type InsurancePlan_Plan_SpecificCost = BackboneElement & {
    /**
     * General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
     */
    category: CodeableConcept;
    benefit?: InsurancePlan_Plan_SpecificCost_Benefit[];
};

export type InsurancePlan_Plan_SpecificCost_Benefit = BackboneElement & {
    /**
     * Type of benefit (primary care; speciality care; inpatient; outpatient).
     */
    type: CodeableConcept;
    cost?: InsurancePlan_Plan_SpecificCost_Benefit_Cost[];
};

export type InsurancePlan_Plan_SpecificCost_Benefit_Cost = BackboneElement & {
    /**
     * Type of cost (copay; individual cap; family cap; coinsurance; deductible).
     */
    type: CodeableConcept;
    /**
     * Whether the cost applies to in&ndash;network or out&ndash;of&ndash;network providers (in&ndash;network; out&ndash;of&ndash;network; other).
     */
    applicability?: CodeableConcept;
    qualifiers?: CodeableConcept[];
    /**
     * The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
     */
    value?: Quantity;
};

export type Library = DomainResource & {
    /**
     * An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this library is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the library is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non&ndash;experimental active artifacts.
     */
    version?: string;
    /**
     * A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the library.
     */
    title?: string;
    /**
     * An explanatory or alternate title for the library giving additional information about its content.
     */
    subtitle?: string;
    /**
     * The status of this library. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition.
     */
    type: CodeableConcept;
    /**
     * A code or group definition that describes the intended subject of the contents of the library.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A code or group definition that describes the intended subject of the contents of the library.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the library was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the library.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the library from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this library is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A detailed description of how the library is used from a clinical perspective.
     */
    usage?: string;
    /**
     * A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library.
     */
    copyright?: string;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the library content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    topic?: CodeableConcept[];
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    relatedArtifact?: RelatedArtifact[];
    parameter?: ParameterDefinition[];
    dataRequirement?: DataRequirement[];
    content?: Attachment[];
};

export type Linkage = DomainResource & {
    /**
     * Indicates whether the asserted set of linkages are considered to be "in effect".
     */
    active?: boolean;
    /**
     * Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.
     */
    author?: Reference;
    item: Linkage_Item[];
};

export type Linkage_Item = BackboneElement & {
    /**
     * Distinguishes which item is "source of truth" (if any) and which items are no longer considered to be current representations.
     */
    type: string;
    /**
     * The resource instance being linked as part of the group.
     */
    resource: Reference;
};

export type Location = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.
     */
    status?: string;
    /**
     * The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance.
     */
    operationalStatus?: Coding;
    /**
     * Name of the location as used by humans. Does not need to be unique.
     */
    name?: string;
    alias?: string[];
    /**
     * Description of the Location, which helps in finding or referencing the place.
     */
    description?: string;
    /**
     * Indicates whether a resource instance represents a specific location or a class of locations.
     */
    mode?: string;
    type?: CodeableConcept[];
    telecom?: ContactPoint[];
    /**
     * Physical location.
     */
    address?: Address;
    /**
     * Physical form of the location, e.g. building, room, vehicle, road.
     */
    physicalType?: CodeableConcept;
    /**
     * The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co&ndash;ordinate system used in KML).
     */
    position?: Location_Position;
    /**
     * The organization responsible for the provisioning and upkeep of the location.
     */
    managingOrganization?: Reference;
    /**
     * Another Location of which this Location is physically a part of.
     */
    partOf?: Reference;
    hoursOfOperation?: Location_HoursOfOperation[];
    /**
     * A description of when the locations opening ours are different to normal, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as detailed in the opening hours Times.
     */
    availabilityExceptions?: string;
    endpoint?: Reference[];
};

export type Location_HoursOfOperation = BackboneElement & {
    daysOfWeek?: string[];
    /**
     * The Location is open all day.
     */
    allDay?: boolean;
    /**
     * Time that the Location opens.
     */
    openingTime?: string;
    /**
     * Time that the Location closes.
     */
    closingTime?: string;
};

export type Location_Position = BackboneElement & {
    /**
     * Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).
     */
    longitude: number;
    /**
     * Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).
     */
    latitude: number;
    /**
     * Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).
     */
    altitude?: number;
};

export type ManufacturedItemDefinition = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of this item. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * Dose form as manufactured and before any transformation into the pharmaceutical product.
     */
    manufacturedDoseForm: CodeableConcept;
    /**
     * The &ldquo;real world&rdquo; units in which the quantity of the manufactured item is described.
     */
    unitOfPresentation?: CodeableConcept;
    manufacturer?: Reference[];
    ingredient?: CodeableConcept[];
    property?: ManufacturedItemDefinition_Property[];
};

export type ManufacturedItemDefinition_Property = BackboneElement & {
    /**
     * A code expressing the type of characteristic.
     */
    type: CodeableConcept;
    /**
     * A value for the characteristic.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value for the characteristic.
     */
    valueQuantity?: Quantity;
    /**
     * A value for the characteristic.
     */
    valueDate?: string;
    /**
     * A value for the characteristic.
     */
    valueBoolean?: boolean;
    /**
     * A value for the characteristic.
     */
    valueAttachment?: Attachment;
};

export type Measure = DomainResource & {
    /**
     * An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this measure is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the measure is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non&ndash;experimental active artifacts.
     */
    version?: string;
    /**
     * A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the measure.
     */
    title?: string;
    /**
     * An explanatory or alternate title for the measure giving additional information about its content.
     */
    subtitle?: string;
    /**
     * The status of this measure. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * The intended subjects for the measure. If this element is not provided, a Patient subject is assumed, but the subject of the measure can be anything.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the measure was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the measure.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the measure from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this measure is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A detailed description, from a clinical perspective, of how the measure is used.
     */
    usage?: string;
    /**
     * A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.
     */
    copyright?: string;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the measure content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    topic?: CodeableConcept[];
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    relatedArtifact?: RelatedArtifact[];
    library?: string[];
    /**
     * Notices and disclaimers regarding the use of the measure or related to intellectual property (such as code systems) referenced by the measure.
     */
    disclaimer?: string;
    /**
     * Indicates how the calculation is performed for the measure, including proportion, ratio, continuous&ndash;variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.
     */
    scoring?: CodeableConcept;
    /**
     * If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.
     */
    compositeScoring?: CodeableConcept;
    type?: CodeableConcept[];
    /**
     * A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.
     */
    riskAdjustment?: string;
    /**
     * Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.
     */
    rateAggregation?: string;
    /**
     * Provides a succinct statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.
     */
    rationale?: string;
    /**
     * Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.
     */
    clinicalRecommendationStatement?: string;
    /**
     * Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).
     */
    improvementNotation?: CodeableConcept;
    definition?: string[];
    /**
     * Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.
     */
    guidance?: string;
    group?: Measure_Group[];
    supplementalData?: Measure_SupplementalData[];
};

export type Measure_Group = BackboneElement & {
    /**
     * Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this population group.
     */
    description?: string;
    population?: Measure_Group_Population[];
    stratifier?: Measure_Group_Stratifier[];
};

export type Measure_Group_Population = BackboneElement & {
    /**
     * The type of population criteria.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this population criteria.
     */
    description?: string;
    /**
     * An expression that specifies the criteria for the population, typically the name of an expression in a library.
     */
    criteria: Expression;
};

export type Measure_Group_Stratifier = BackboneElement & {
    /**
     * Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this stratifier criteria.
     */
    description?: string;
    /**
     * An expression that specifies the criteria for the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
     */
    criteria?: Expression;
    component?: Measure_Group_Stratifier_Component[];
};

export type Measure_Group_Stratifier_Component = BackboneElement & {
    /**
     * Indicates a meaning for the stratifier component. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.
     */
    code?: CodeableConcept;
    /**
     * The human readable description of this stratifier criteria component.
     */
    description?: string;
    /**
     * An expression that specifies the criteria for this component of the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.
     */
    criteria: Expression;
};

export type Measure_SupplementalData = BackboneElement & {
    /**
     * Indicates a meaning for the supplemental data. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing supplemental data to be correlated across measures.
     */
    code?: CodeableConcept;
    usage?: CodeableConcept[];
    /**
     * The human readable description of this supplemental data.
     */
    description?: string;
    /**
     * The criteria for the supplemental data. This is typically the name of a valid expression defined within a referenced library, but it may also be a path to a specific data element. The criteria defines the data to be returned for this element.
     */
    criteria: Expression;
};

export type MeasureReport = DomainResource & {
    identifier?: Identifier[];
    /**
     * The MeasureReport status. No data will be available until the MeasureReport status is complete.
     */
    status: string;
    /**
     * The type of measure report. This may be an individual report, which provides the score for the measure for an individual member of the population; a subject&ndash;listing, which returns the list of members that meet the various criteria in the measure; a summary report, which returns a population count for each of the criteria in the measure; or a data&ndash;collection, which enables the MeasureReport to be used to exchange the data&ndash;of&ndash;interest for a quality measure.
     */
    type: string;
    /**
     * A reference to the Measure that was calculated to produce this report.
     */
    measure: string;
    /**
     * Optional subject identifying the individual or individuals the report is for.
     */
    subject?: Reference;
    /**
     * The date this measure report was generated.
     */
    date?: string;
    /**
     * The individual, location, or organization that is reporting the data.
     */
    reporter?: Reference;
    /**
     * The reporting period for which the report was calculated.
     */
    period: Period;
    /**
     * Whether improvement in the measure is noted by an increase or decrease in the measure score.
     */
    improvementNotation?: CodeableConcept;
    group?: MeasureReport_Group[];
    evaluatedResource?: Reference[];
};

export type MeasureReport_Group = BackboneElement & {
    /**
     * The meaning of the population group as defined in the measure definition.
     */
    code?: CodeableConcept;
    population?: MeasureReport_Group_Population[];
    /**
     * The measure score for this population group, calculated as appropriate for the measure type and scoring method, and based on the contents of the populations defined in the group.
     */
    measureScore?: Quantity;
    stratifier?: MeasureReport_Group_Stratifier[];
};

export type MeasureReport_Group_Population = BackboneElement & {
    /**
     * The type of the population.
     */
    code?: CodeableConcept;
    /**
     * The number of members of the population.
     */
    count?: number;
    /**
     * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
     */
    subjectResults?: Reference;
};

export type MeasureReport_Group_Stratifier = BackboneElement & {
    code?: CodeableConcept[];
    stratum?: MeasureReport_Group_Stratifier_Stratum[];
};

export type MeasureReport_Group_Stratifier_Stratum = BackboneElement & {
    /**
     * The value for this stratum, expressed as a CodeableConcept. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.
     */
    value?: CodeableConcept;
    component?: MeasureReport_Group_Stratifier_Stratum_Component[];
    population?: MeasureReport_Group_Stratifier_Stratum_Population[];
    /**
     * The measure score for this stratum, calculated as appropriate for the measure type and scoring method, and based on only the members of this stratum.
     */
    measureScore?: Quantity;
};

export type MeasureReport_Group_Stratifier_Stratum_Component =
    BackboneElement & {
        /**
         * The code for the stratum component value.
         */
        code: CodeableConcept;
        /**
         * The stratum component value.
         */
        value: CodeableConcept;
    };

export type MeasureReport_Group_Stratifier_Stratum_Population =
    BackboneElement & {
        /**
         * The type of the population.
         */
        code?: CodeableConcept;
        /**
         * The number of members of the population.
         */
        count?: number;
        /**
         * This element refers to a List of subject level MeasureReport resources, one for each subject in this population.
         */
        subjectResults?: Reference;
    };

export type Medication = DomainResource & {
    identifier?: Identifier[];
    /**
     * A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
     */
    code?: CodeableConcept;
    /**
     * A code to indicate if the medication is in active use.
     */
    status?: string;
    /**
     * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
     */
    manufacturer?: Reference;
    /**
     * Describes the form of the item.  Powder; tablets; capsule.
     */
    form?: CodeableConcept;
    /**
     * Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
     */
    amount?: Ratio;
    ingredient?: Medication_Ingredient[];
    /**
     * Information that only applies to packages (not products).
     */
    batch?: Medication_Batch;
};

export type Medication_Batch = BackboneElement & {
    /**
     * The assigned lot number of a batch of the specified product.
     */
    lotNumber?: string;
    /**
     * When this specific batch of product will expire.
     */
    expirationDate?: string;
};

export type Medication_Ingredient = BackboneElement & {
    /**
     * The actual ingredient &ndash; either a substance (simple ingredient) or another medication of a medication.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * The actual ingredient &ndash; either a substance (simple ingredient) or another medication of a medication.
     */
    itemReference?: Reference;
    /**
     * Indication of whether this ingredient affects the therapeutic action of the drug.
     */
    isActive?: boolean;
    /**
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
     */
    strength?: Ratio;
};

export type MedicationDispense = DomainResource & {
    identifier?: Identifier[];
    partOf?: Reference[];
    /**
     * A code specifying the state of the set of dispense events.
     */
    status: string;
    /**
     * Indicates the reason why a dispense was not performed.
     */
    statusReasonCodeableConcept?: CodeableConcept;
    /**
     * Indicates the reason why a dispense was not performed.
     */
    statusReasonReference?: Reference;
    /**
     * Indicates the type of medication dispense (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
     */
    category?: CodeableConcept;
    /**
     * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationCodeableConcept?: CodeableConcept;
    /**
     * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationReference?: Reference;
    /**
     * A link to a resource representing the person or the group to whom the medication will be given.
     */
    subject?: Reference;
    /**
     * The encounter or episode of care that establishes the context for this event.
     */
    context?: Reference;
    supportingInformation?: Reference[];
    performer?: MedicationDispense_Performer[];
    /**
     * The principal physical location where the dispense was performed.
     */
    location?: Reference;
    authorizingPrescription?: Reference[];
    /**
     * Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
     */
    type?: CodeableConcept;
    /**
     * The amount of medication that has been dispensed. Includes unit of measure.
     */
    quantity?: SimpleQuantity;
    /**
     * The amount of medication expressed as a timing amount.
     */
    daysSupply?: SimpleQuantity;
    /**
     * The time when the dispensed product was packaged and reviewed.
     */
    whenPrepared?: string;
    /**
     * The time the dispensed product was provided to the patient or their representative.
     */
    whenHandedOver?: string;
    /**
     * Identification of the facility/location where the medication was shipped to, as part of the dispense event.
     */
    destination?: Reference;
    receiver?: Reference[];
    note?: Annotation[];
    dosageInstruction?: Dosage[];
    /**
     * Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.
     */
    substitution?: MedicationDispense_Substitution;
    detectedIssue?: Reference[];
    eventHistory?: Reference[];
};

export type MedicationDispense_Performer = BackboneElement & {
    /**
     * Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.
     */
    function?: CodeableConcept;
    /**
     * The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.
     */
    actor: Reference;
};

export type MedicationDispense_Substitution = BackboneElement & {
    /**
     * True if the dispenser dispensed a different drug or product from what was prescribed.
     */
    wasSubstituted: boolean;
    /**
     * A code signifying whether a different drug was dispensed from what was prescribed.
     */
    type?: CodeableConcept;
    reason?: CodeableConcept[];
    responsibleParty?: Reference[];
};

export type MedicationKnowledge = DomainResource & {
    /**
     * A code that specifies this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
     */
    code?: CodeableConcept;
    /**
     * A code to indicate if the medication is in active use.  The status refers to the validity about the information of the medication and not to its medicinal properties.
     */
    status?: string;
    /**
     * Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
     */
    manufacturer?: Reference;
    /**
     * Describes the form of the item.  Powder; tablets; capsule.
     */
    doseForm?: CodeableConcept;
    /**
     * Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
     */
    amount?: SimpleQuantity;
    synonym?: string[];
    relatedMedicationKnowledge?: MedicationKnowledge_RelatedMedicationKnowledge[];
    associatedMedication?: Reference[];
    productType?: CodeableConcept[];
    monograph?: MedicationKnowledge_Monograph[];
    ingredient?: MedicationKnowledge_Ingredient[];
    /**
     * The instructions for preparing the medication.
     */
    preparationInstruction?: string;
    intendedRoute?: CodeableConcept[];
    cost?: MedicationKnowledge_Cost[];
    monitoringProgram?: MedicationKnowledge_MonitoringProgram[];
    administrationGuidelines?: MedicationKnowledge_AdministrationGuidelines[];
    medicineClassification?: MedicationKnowledge_MedicineClassification[];
    /**
     * Information that only applies to packages (not products).
     */
    packaging?: MedicationKnowledge_Packaging;
    drugCharacteristic?: MedicationKnowledge_DrugCharacteristic[];
    contraindication?: Reference[];
    regulatory?: MedicationKnowledge_Regulatory[];
    kinetics?: MedicationKnowledge_Kinetics[];
};

export type MedicationKnowledge_AdministrationGuidelines = BackboneElement & {
    dosage?: MedicationKnowledge_AdministrationGuidelines_Dosage[];
    /**
     * Indication for use that apply to the specific administration guidelines.
     */
    indicationCodeableConcept?: CodeableConcept;
    /**
     * Indication for use that apply to the specific administration guidelines.
     */
    indicationReference?: Reference;
    patientCharacteristics?: MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics[];
};

export type MedicationKnowledge_AdministrationGuidelines_Dosage =
    BackboneElement & {
        /**
         * The type of dosage (for example, prophylaxis, maintenance, therapeutic, etc.).
         */
        type: CodeableConcept;
        dosage: Dosage[];
    };

export type MedicationKnowledge_AdministrationGuidelines_PatientCharacteristics =
    BackboneElement & {
        /**
         * Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
         */
        characteristicCodeableConcept?: CodeableConcept;
        /**
         * Specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).
         */
        characteristicQuantity?: SimpleQuantity;
        value?: string[];
    };

export type MedicationKnowledge_Cost = BackboneElement & {
    /**
     * The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.
     */
    type: CodeableConcept;
    /**
     * The source or owner that assigns the price to the medication.
     */
    source?: string;
    /**
     * The price of the medication.
     */
    cost: Money;
};

export type MedicationKnowledge_DrugCharacteristic = BackboneElement & {
    /**
     * A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).
     */
    type?: CodeableConcept;
    /**
     * Description of the characteristic.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Description of the characteristic.
     */
    valueString?: string;
    /**
     * Description of the characteristic.
     */
    valueQuantity?: SimpleQuantity;
    /**
     * Description of the characteristic.
     */
    valueBase64Binary?: string;
};

export type MedicationKnowledge_Ingredient = BackboneElement & {
    /**
     * The actual ingredient &ndash; either a substance (simple ingredient) or another medication.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * The actual ingredient &ndash; either a substance (simple ingredient) or another medication.
     */
    itemReference?: Reference;
    /**
     * Indication of whether this ingredient affects the therapeutic action of the drug.
     */
    isActive?: boolean;
    /**
     * Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.  This is expressed as a ratio where the numerator is 250mg and the denominator is 1 tablet.
     */
    strength?: Ratio;
};

export type MedicationKnowledge_Kinetics = BackboneElement & {
    areaUnderCurve?: SimpleQuantity[];
    lethalDose50?: SimpleQuantity[];
    /**
     * The time required for any specified property (e.g., the concentration of a substance in the body) to decrease by half.
     */
    halfLifePeriod?: Duration;
};

export type MedicationKnowledge_MedicineClassification = BackboneElement & {
    /**
     * The type of category for the medication (for example, therapeutic classification, therapeutic sub&ndash;classification).
     */
    type: CodeableConcept;
    classification?: CodeableConcept[];
};

export type MedicationKnowledge_MonitoringProgram = BackboneElement & {
    /**
     * Type of program under which the medication is monitored.
     */
    type?: CodeableConcept;
    /**
     * Name of the reviewing program.
     */
    name?: string;
};

export type MedicationKnowledge_Monograph = BackboneElement & {
    /**
     * The category of documentation about the medication. (e.g. professional monograph, patient education monograph).
     */
    type?: CodeableConcept;
    /**
     * Associated documentation about the medication.
     */
    source?: Reference;
};

export type MedicationKnowledge_Packaging = BackboneElement & {
    /**
     * A code that defines the specific type of packaging that the medication can be found in (e.g. blister sleeve, tube, bottle).
     */
    type?: CodeableConcept;
    /**
     * The number of product units the package would contain if fully loaded.
     */
    quantity?: SimpleQuantity;
};

export type MedicationKnowledge_Regulatory = BackboneElement & {
    /**
     * The authority that is specifying the regulations.
     */
    regulatoryAuthority: Reference;
    substitution?: MedicationKnowledge_Regulatory_Substitution[];
    schedule?: MedicationKnowledge_Regulatory_Schedule[];
    /**
     * The maximum number of units of the medication that can be dispensed in a period.
     */
    maxDispense?: MedicationKnowledge_Regulatory_MaxDispense;
};

export type MedicationKnowledge_Regulatory_MaxDispense = BackboneElement & {
    /**
     * The maximum number of units of the medication that can be dispensed.
     */
    quantity: SimpleQuantity;
    /**
     * The period that applies to the maximum number of units.
     */
    period?: Duration;
};

export type MedicationKnowledge_Regulatory_Schedule = BackboneElement & {
    /**
     * Specifies the specific drug schedule.
     */
    schedule: CodeableConcept;
};

export type MedicationKnowledge_Regulatory_Substitution = BackboneElement & {
    /**
     * Specifies the type of substitution allowed.
     */
    type: CodeableConcept;
    /**
     * Specifies if regulation allows for changes in the medication when dispensing.
     */
    allowed: boolean;
};

export type MedicationKnowledge_RelatedMedicationKnowledge = BackboneElement & {
    /**
     * The category of the associated medication knowledge reference.
     */
    type: CodeableConcept;
    reference: Reference[];
};

export type MedicationStatement = DomainResource & {
    identifier?: Identifier[];
    basedOn?: Reference[];
    partOf?: Reference[];
    /**
     * A code representing the patient or other source's judgment about the state of the medication used that this statement is about.  Generally, this will be active or completed.
     */
    status: string;
    statusReason?: CodeableConcept[];
    /**
     * Indicates where the medication is expected to be consumed or administered.
     */
    category?: CodeableConcept;
    /**
     * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationCodeableConcept?: CodeableConcept;
    /**
     * Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.
     */
    medicationReference?: Reference;
    /**
     * The person, animal or group who is/was taking the medication.
     */
    subject: Reference;
    /**
     * The encounter or episode of care that establishes the context for this MedicationStatement.
     */
    context?: Reference;
    /**
     * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.taken element is No).
     */
    effectiveDateTime?: string;
    /**
     * The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.taken element is No).
     */
    effectivePeriod?: Period;
    /**
     * The date when the medication statement was asserted by the information source.
     */
    dateAsserted?: string;
    /**
     * The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g. Claim or MedicationRequest.
     */
    informationSource?: Reference;
    derivedFrom?: Reference[];
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference[];
    note?: Annotation[];
    dosage?: Dosage[];
};

export type MedicinalProductDefinition = DomainResource & {
    identifier?: Identifier[];
    /**
     * Regulatory type, e.g. Investigational or Authorized.
     */
    type?: CodeableConcept;
    /**
     * If this medicine applies to human or veterinary uses.
     */
    domain?: CodeableConcept;
    /**
     * A business identifier relating to a specific version of the product, this is commonly used to support revisions to an existing product.
     */
    version?: string;
    /**
     * The status within the lifecycle of this product record. A high&ndash;level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization status.
     */
    status?: CodeableConcept;
    /**
     * The date at which the given status became applicable.
     */
    statusDate?: string;
    /**
     * General description of this product.
     */
    description?: string;
    /**
     * The dose form for a single part product, or combined form of a multiple part product. This is one concept that describes all the components. It does not represent the form with components physically mixed, if that might be necessary, for which see (AdministrableProductDefinition.administrableDoseForm).
     */
    combinedPharmaceuticalDoseForm?: CodeableConcept;
    route?: CodeableConcept[];
    /**
     * Description of indication(s) for this product, used when structured indications are not required. In cases where structured indications are required, they are captured using the ClinicalUseDefinition resource. An indication is a medical situation for which using the product is appropriate.
     */
    indication?: string;
    /**
     * The legal status of supply of the medicinal product as classified by the regulator.
     */
    legalStatusOfSupply?: CodeableConcept;
    /**
     * Whether the Medicinal Product is subject to additional monitoring for regulatory reasons, such as heightened reporting requirements.
     */
    additionalMonitoringIndicator?: CodeableConcept;
    specialMeasures?: CodeableConcept[];
    /**
     * If authorised for use in children, or infants, neonates etc.
     */
    pediatricUseIndicator?: CodeableConcept;
    classification?: CodeableConcept[];
    marketingStatus?: MarketingStatus[];
    packagedMedicinalProduct?: CodeableConcept[];
    ingredient?: CodeableConcept[];
    impurity?: CodeableReference[];
    attachedDocument?: Reference[];
    masterFile?: Reference[];
    contact?: MedicinalProductDefinition_Contact[];
    clinicalTrial?: Reference[];
    code?: Coding[];
    name: MedicinalProductDefinition_Name[];
    crossReference?: MedicinalProductDefinition_CrossReference[];
    operation?: MedicinalProductDefinition_Operation[];
    characteristic?: MedicinalProductDefinition_Characteristic[];
};

export type MedicinalProductDefinition_Characteristic = BackboneElement & {
    /**
     * A code expressing the type of characteristic.
     */
    type: CodeableConcept;
    /**
     * A value for the characteristic.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value for the characteristic.
     */
    valueQuantity?: Quantity;
    /**
     * A value for the characteristic.
     */
    valueDate?: string;
    /**
     * A value for the characteristic.
     */
    valueBoolean?: boolean;
    /**
     * A value for the characteristic.
     */
    valueAttachment?: Attachment;
};

export type MedicinalProductDefinition_Contact = BackboneElement & {
    /**
     * Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry Information.
     */
    type?: CodeableConcept;
    /**
     * A product specific contact, person (in a role), or an organization.
     */
    contact: Reference;
};

export type MedicinalProductDefinition_CrossReference = BackboneElement & {
    /**
     * Reference to another product, e.g. for linking authorised to investigational product.
     */
    product: CodeableReference;
    /**
     * The type of relationship, for instance branded to generic, virtual to actual product, product to development product (investigational), parallel import version.
     */
    type?: CodeableConcept;
};

export type MedicinalProductDefinition_Name = BackboneElement & {
    /**
     * The full product name.
     */
    productName: string;
    /**
     * Type of product name, such as rINN, BAN, Proprietary, Non&ndash;Proprietary.
     */
    type?: CodeableConcept;
    namePart?: MedicinalProductDefinition_Name_NamePart[];
    countryLanguage?: MedicinalProductDefinition_Name_CountryLanguage[];
};

export type MedicinalProductDefinition_Name_CountryLanguage =
    BackboneElement & {
        /**
         * Country code for where this name applies.
         */
        country: CodeableConcept;
        /**
         * Jurisdiction code for where this name applies. A jurisdiction may be a sub&ndash; or supra&ndash;national entity (e.g. a state or a geographic region).
         */
        jurisdiction?: CodeableConcept;
        /**
         * Language code for this name.
         */
        language: CodeableConcept;
    };

export type MedicinalProductDefinition_Name_NamePart = BackboneElement & {
    /**
     * A fragment of a product name.
     */
    part: string;
    /**
     * Identifying type for this part of the name (e.g. strength part).
     */
    type: CodeableConcept;
};

export type MedicinalProductDefinition_Operation = BackboneElement & {
    /**
     * The type of manufacturing operation e.g. manufacturing itself, re&ndash;packaging. For the authorization of this, a RegulatedAuthorization would point to the same plan or activity referenced here.
     */
    type?: CodeableReference;
    /**
     * Date range of applicability.
     */
    effectiveDate?: Period;
    organization?: Reference[];
    /**
     * Specifies whether this particular business or manufacturing process is considered proprietary or confidential.
     */
    confidentialityIndicator?: CodeableConcept;
};

export type MessageDefinition = DomainResource & {
    /**
     * The business identifier that is used to reference the MessageDefinition and *is* expected to be consistent from server to server.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the message definition.
     */
    title?: string;
    replaces?: string[];
    /**
     * The status of this message definition. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the message definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the message definition changes.
     */
    date: string;
    /**
     * The name of the organization or individual that published the message definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the message definition from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this message definition is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.
     */
    copyright?: string;
    /**
     * The MessageDefinition that is the basis for the contents of this resource.
     */
    base?: string;
    parent?: string[];
    /**
     * Event code or link to the EventDefinition.
     */
    eventCoding?: Coding;
    /**
     * Event code or link to the EventDefinition.
     */
    eventUri?: string;
    /**
     * The impact of the content of the message.
     */
    category?: string;
    focus?: MessageDefinition_Focus[];
    /**
     * Declare at a message definition level whether a response is required or only upon error or success, or never.
     */
    responseRequired?: string;
    allowedResponse?: MessageDefinition_AllowedResponse[];
    graph?: string[];
};

export type MessageDefinition_AllowedResponse = BackboneElement & {
    /**
     * A reference to the message definition that must be adhered to by this supported response.
     */
    message: string;
    /**
     * Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).
     */
    situation?: string;
};

export type MessageDefinition_Focus = BackboneElement & {
    /**
     * The kind of resource that must be the focus for this message.
     */
    code: string;
    /**
     * A profile that reflects constraints for the focal resource (and potentially for related resources).
     */
    profile?: string;
    /**
     * Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
     */
    min: number;
    /**
     * Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.
     */
    max?: string;
};

export type MolecularSequence = DomainResource & {
    identifier?: Identifier[];
    /**
     * Amino Acid Sequence/ DNA Sequence / RNA Sequence.
     */
    type?: string;
    /**
     * Whether the sequence is numbered starting at 0 (0&ndash;based numbering or coordinates, inclusive start, exclusive end) or starting at 1 (1&ndash;based numbering, inclusive start and inclusive end).
     */
    coordinateSystem: number;
    /**
     * The patient whose sequencing results are described by this resource.
     */
    patient?: Reference;
    /**
     * Specimen used for sequencing.
     */
    specimen?: Reference;
    /**
     * The method for sequencing, for example, chip information.
     */
    device?: Reference;
    /**
     * The organization or lab that should be responsible for this result.
     */
    performer?: Reference;
    /**
     * The number of copies of the sequence of interest. (RNASeq).
     */
    quantity?: Quantity;
    /**
     * A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
     */
    referenceSeq?: MolecularSequence_ReferenceSeq;
    variant?: MolecularSequence_Variant[];
    /**
     * Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall start from referenceSeq.windowStart and end by referenceSeq.windowEnd.
     */
    observedSeq?: string;
    quality?: MolecularSequence_Quality[];
    /**
     * Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.
     */
    readCoverage?: number;
    repository?: MolecularSequence_Repository[];
    pointer?: Reference[];
    structureVariant?: MolecularSequence_StructureVariant[];
};

export type MolecularSequence_Quality = BackboneElement & {
    /**
     * INDEL / SNP / Undefined variant.
     */
    type: string;
    /**
     * Gold standard sequence used for comparing against.
     */
    standardSequence?: CodeableConcept;
    /**
     * Start position of the sequence. If the coordinate system is either 0&ndash;based or 1&ndash;based, then start position is inclusive.
     */
    start?: number;
    /**
     * End position of the sequence. If the coordinate system is 0&ndash;based then end is exclusive and does not include the last position. If the coordinate system is 1&ndash;base, then end is inclusive and includes the last position.
     */
    end?: number;
    /**
     * The score of an experimentally derived feature such as a p&ndash;value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
     */
    score?: Quantity;
    /**
     * Which method is used to get sequence quality.
     */
    method?: CodeableConcept;
    /**
     * True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
     */
    truthTP?: number;
    /**
     * True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
     */
    queryTP?: number;
    /**
     * False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here.
     */
    truthFN?: number;
    /**
     * False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here.
     */
    queryFP?: number;
    /**
     * The number of false positives where the non&ndash;REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar).
     */
    gtFP?: number;
    /**
     * QUERY.TP / (QUERY.TP + QUERY.FP).
     */
    precision?: number;
    /**
     * TRUTH.TP / (TRUTH.TP + TRUTH.FN).
     */
    recall?: number;
    /**
     * Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall).
     */
    fScore?: number;
    /**
     * Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
     */
    roc?: MolecularSequence_Quality_Roc;
};

export type MolecularSequence_Quality_Roc = BackboneElement & {
    score?: number[];
    numTP?: number[];
    numFP?: number[];
    numFN?: number[];
    precision?: number[];
    sensitivity?: number[];
    fMeasure?: number[];
};

export type MolecularSequence_ReferenceSeq = BackboneElement & {
    /**
     * Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
     */
    chromosome?: CodeableConcept;
    /**
     * The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version number must be included if a versioned release of a primary build was used.
     */
    genomeBuild?: string;
    /**
     * A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
     */
    orientation?: string;
    /**
     * Reference identifier of reference sequence submitted to NCBI. It must match the type in the MolecularSequence.type field. For example, the prefix, &ldquo;NG_&rdquo; identifies reference sequence for genes, &ldquo;NM_&rdquo; for messenger RNA transcripts, and &ldquo;NP_&rdquo; for amino acid sequences.
     */
    referenceSeqId?: CodeableConcept;
    /**
     * A pointer to another MolecularSequence entity as reference sequence.
     */
    referenceSeqPointer?: Reference;
    /**
     * A string like "ACGT".
     */
    referenceSeqString?: string;
    /**
     * An absolute reference to a strand. The Watson strand is the strand whose 5'&ndash;end is on the short arm of the chromosome, and the Crick strand as the one whose 5'&ndash;end is on the long arm.
     */
    strand?: string;
    /**
     * Start position of the window on the reference sequence. If the coordinate system is either 0&ndash;based or 1&ndash;based, then start position is inclusive.
     */
    windowStart?: number;
    /**
     * End position of the window on the reference sequence. If the coordinate system is 0&ndash;based then end is exclusive and does not include the last position. If the coordinate system is 1&ndash;base, then end is inclusive and includes the last position.
     */
    windowEnd?: number;
};

export type MolecularSequence_Repository = BackboneElement & {
    /**
     * Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource.
     */
    type: string;
    /**
     * URI of an external repository which contains further details about the genetics data.
     */
    url?: string;
    /**
     * URI of an external repository which contains further details about the genetics data.
     */
    name?: string;
    /**
     * Id of the variant in this external repository. The server will understand how to use this id to call for more info about datasets in external repository.
     */
    datasetId?: string;
    /**
     * Id of the variantset in this external repository. The server will understand how to use this id to call for more info about variantsets in external repository.
     */
    variantsetId?: string;
    /**
     * Id of the read in this external repository.
     */
    readsetId?: string;
};

export type MolecularSequence_StructureVariant = BackboneElement & {
    /**
     * Information about chromosome structure variation DNA change type.
     */
    variantType?: CodeableConcept;
    /**
     * Used to indicate if the outer and inner start&ndash;end values have the same meaning.
     */
    exact?: boolean;
    /**
     * Length of the variant chromosome.
     */
    length?: number;
    /**
     * Structural variant outer.
     */
    outer?: MolecularSequence_StructureVariant_Outer;
    /**
     * Structural variant inner.
     */
    inner?: MolecularSequence_StructureVariant_Inner;
};

export type MolecularSequence_StructureVariant_Inner = BackboneElement & {
    /**
     * Structural variant inner start. If the coordinate system is either 0&ndash;based or 1&ndash;based, then start position is inclusive.
     */
    start?: number;
    /**
     * Structural variant inner end. If the coordinate system is 0&ndash;based then end is exclusive and does not include the last position. If the coordinate system is 1&ndash;base, then end is inclusive and includes the last position.
     */
    end?: number;
};

export type MolecularSequence_StructureVariant_Outer = BackboneElement & {
    /**
     * Structural variant outer start. If the coordinate system is either 0&ndash;based or 1&ndash;based, then start position is inclusive.
     */
    start?: number;
    /**
     * Structural variant outer end. If the coordinate system is 0&ndash;based then end is exclusive and does not include the last position. If the coordinate system is 1&ndash;base, then end is inclusive and includes the last position.
     */
    end?: number;
};

export type MolecularSequence_Variant = BackboneElement & {
    /**
     * Start position of the variant on the  reference sequence. If the coordinate system is either 0&ndash;based or 1&ndash;based, then start position is inclusive.
     */
    start?: number;
    /**
     * End position of the variant on the reference sequence. If the coordinate system is 0&ndash;based then end is exclusive and does not include the last position. If the coordinate system is 1&ndash;base, then end is inclusive and includes the last position.
     */
    end?: number;
    /**
     * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
     */
    observedAllele?: string;
    /**
     * An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
     */
    referenceAllele?: string;
    /**
     * Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
     */
    cigar?: string;
    /**
     * A pointer to an Observation containing variant information.
     */
    variantPointer?: Reference;
};

export type NamingSystem = DomainResource & {
    /**
     * A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * The status of this naming system. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * Indicates the purpose for the naming system &ndash; what kinds of things does it make unique?
     */
    kind: string;
    /**
     * The date  (and optionally time) when the naming system was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes.
     */
    date: string;
    /**
     * The name of the organization or individual that published the naming system.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non&ndash;collision.
     */
    responsible?: string;
    /**
     * Categorizes a naming system for easier search by grouping related naming systems.
     */
    type?: CodeableConcept;
    /**
     * A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.
     */
    usage?: string;
    uniqueId: NamingSystem_UniqueId[];
};

export type NamingSystem_UniqueId = BackboneElement & {
    /**
     * Identifies the unique identifier scheme used for this particular identifier.
     */
    type: string;
    /**
     * The string that should be sent over the wire to identify the code system or identifier system.
     */
    value: string;
    /**
     * Indicates whether this identifier is the "preferred" identifier of this type.
     */
    preferred?: boolean;
    /**
     * Notes about the past or intended usage of this identifier.
     */
    comment?: string;
    /**
     * Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non&ndash;deterministic.
     */
    period?: Period;
};

export type NutritionProduct = DomainResource & {
    /**
     * The current state of the product.
     */
    status: string;
    category?: CodeableConcept[];
    /**
     * The code assigned to the product, for example a manufacturer number or other terminology.
     */
    code?: CodeableConcept;
    manufacturer?: Reference[];
    nutrient?: NutritionProduct_Nutrient[];
    ingredient?: NutritionProduct_Ingredient[];
    knownAllergen?: CodeableReference[];
    productCharacteristic?: NutritionProduct_ProductCharacteristic[];
    /**
     * Conveys instance&ndash;level information about this product item. One or several physical, countable instances or occurrences of the product.
     */
    instance?: NutritionProduct_Instance;
    note?: Annotation[];
};

export type NutritionProduct_Ingredient = BackboneElement & {
    /**
     * The ingredient contained in the product.
     */
    item: CodeableReference;
    amount?: Ratio[];
};

export type NutritionProduct_Instance = BackboneElement & {
    /**
     * The amount of items or instances that the resource considers, for instance when referring to 2 identical units together.
     */
    quantity?: SimpleQuantity;
    identifier?: Identifier[];
    /**
     * The identification of the batch or lot of the product.
     */
    lotNumber?: string;
    /**
     * The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
     */
    expiry?: string;
    /**
     * The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.
     */
    useBy?: string;
};

export type NutritionProduct_Nutrient = BackboneElement & {
    /**
     * The (relevant) nutrients in the product.
     */
    item?: CodeableReference;
    amount?: Ratio[];
};

export type NutritionProduct_ProductCharacteristic = BackboneElement & {
    /**
     * A code specifying which characteristic of the product is being described (for example, colour, shape).
     */
    type: CodeableConcept;
    /**
     * The actual characteristic value corresponding to the type.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The actual characteristic value corresponding to the type.
     */
    valueString?: string;
    /**
     * The actual characteristic value corresponding to the type.
     */
    valueQuantity?: SimpleQuantity;
    /**
     * The actual characteristic value corresponding to the type.
     */
    valueBase64Binary?: string;
    /**
     * The actual characteristic value corresponding to the type.
     */
    valueAttachment?: Attachment;
    /**
     * The actual characteristic value corresponding to the type.
     */
    valueBoolean?: boolean;
};

export type ObservationDefinition = DomainResource & {
    category?: CodeableConcept[];
    /**
     * Describes what will be observed. Sometimes this is called the observation "name".
     */
    code: CodeableConcept;
    identifier?: Identifier[];
    permittedDataType?: string[];
    /**
     * Multiple results allowed for observations conforming to this ObservationDefinition.
     */
    multipleResultsAllowed?: boolean;
    /**
     * The method or technique used to perform the observation.
     */
    method?: CodeableConcept;
    /**
     * The preferred name to be used when reporting the results of observations conforming to this ObservationDefinition.
     */
    preferredReportName?: string;
    /**
     * Characteristics for quantitative results of this observation.
     */
    quantitativeDetails?: ObservationDefinition_QuantitativeDetails;
    qualifiedInterval?: ObservationDefinition_QualifiedInterval[];
    /**
     * The set of valid coded results for the observations  conforming to this ObservationDefinition.
     */
    validCodedValueSet?: Reference;
    /**
     * The set of normal coded results for the observations conforming to this ObservationDefinition.
     */
    normalCodedValueSet?: Reference;
    /**
     * The set of abnormal coded results for the observation conforming to this ObservationDefinition.
     */
    abnormalCodedValueSet?: Reference;
    /**
     * The set of critical coded results for the observation conforming to this ObservationDefinition.
     */
    criticalCodedValueSet?: Reference;
};

export type ObservationDefinition_QualifiedInterval = BackboneElement & {
    /**
     * The category of interval of values for continuous or ordinal observations conforming to this ObservationDefinition.
     */
    category?: string;
    /**
     * The low and high values determining the interval. There may be only one of the two.
     */
    range?: Range;
    /**
     * Codes to indicate the health context the range applies to. For example, the normal or therapeutic range.
     */
    context?: CodeableConcept;
    appliesTo?: CodeableConcept[];
    /**
     * Sex of the population the range applies to.
     */
    gender?: string;
    /**
     * The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
     */
    age?: Range;
    /**
     * The gestational age to which this reference range is applicable, in the context of pregnancy.
     */
    gestationalAge?: Range;
    /**
     * Text based condition for which the reference range is valid.
     */
    condition?: string;
};

export type ObservationDefinition_QuantitativeDetails = BackboneElement & {
    /**
     * Customary unit used to report quantitative results of observations conforming to this ObservationDefinition.
     */
    customaryUnit?: CodeableConcept;
    /**
     * SI unit used to report quantitative results of observations conforming to this ObservationDefinition.
     */
    unit?: CodeableConcept;
    /**
     * Factor for converting value expressed with SI unit to value expressed with customary unit.
     */
    conversionFactor?: number;
    /**
     * Number of digits after decimal separator when the results of such observations are of type Quantity.
     */
    decimalPrecision?: number;
};

export type OperationDefinition = DomainResource & {
    /**
     * An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this operation definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the operation definition is stored on different servers.
     */
    url?: string;
    /**
     * The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the operation definition.
     */
    title?: string;
    /**
     * The status of this operation definition. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * Whether this is an operation or a named query.
     */
    kind: string;
    /**
     * A Boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the operation definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the operation definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the operation definition from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this operation definition is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * Whether the operation affects state. Side effects such as producing audit trail entries do not count as 'affecting  state'.
     */
    affectsState?: boolean;
    /**
     * The name used to invoke the operation.
     */
    code: string;
    /**
     * Additional information about how to use this operation or named query.
     */
    comment?: string;
    /**
     * Indicates that this operation definition is a constraining profile on the base.
     */
    base?: string;
    resource?: string[];
    /**
     * Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
     */
    system: boolean;
    /**
     * Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).
     */
    type: boolean;
    /**
     * Indicates whether this operation can be invoked on a particular instance of one of the given types.
     */
    instance: boolean;
    /**
     * Additional validation information for the in parameters &ndash; a single profile that covers all the parameters. The profile is a constraint on the parameters resource as a whole.
     */
    inputProfile?: string;
    /**
     * Additional validation information for the out parameters &ndash; a single profile that covers all the parameters. The profile is a constraint on the parameters resource.
     */
    outputProfile?: string;
    parameter?: OperationDefinition_Parameter[];
    overload?: OperationDefinition_Overload[];
};

export type OperationDefinition_Overload = BackboneElement & {
    parameterName?: string[];
    /**
     * Comments to go on overload.
     */
    comment?: string;
};

export type OperationDefinition_Parameter = BackboneElement & {
    /**
     * The name of used to identify the parameter.
     */
    name: string;
    /**
     * Whether this is an input or an output parameter.
     */
    use: string;
    /**
     * The minimum number of times this parameter SHALL appear in the request or response.
     */
    min: number;
    /**
     * The maximum number of times this element is permitted to appear in the request or response.
     */
    max: string;
    /**
     * Describes the meaning or use of this parameter.
     */
    documentation?: string;
    /**
     * The type for this parameter.
     */
    type?: string;
    targetProfile?: string[];
    /**
     * How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
     */
    searchType?: string;
    /**
     * Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
     */
    binding?: OperationDefinition_Parameter_Binding;
    referencedFrom?: OperationDefinition_Parameter_ReferencedFrom[];
    part?: OperationDefinition_Parameter[];
};

export type OperationDefinition_Parameter_Binding = BackboneElement & {
    /**
     * Indicates the degree of conformance expectations associated with this binding &ndash; that is, the degree to which the provided value set must be adhered to in the instances.
     */
    strength: string;
    /**
     * Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.
     */
    valueSet: string;
};

export type OperationDefinition_Parameter_ReferencedFrom = BackboneElement & {
    /**
     * The name of the parameter or dot&ndash;separated path of parameter names pointing to the resource parameter that is expected to contain a reference to this resource.
     */
    source: string;
    /**
     * The id of the element in the referencing resource that is expected to resolve to this resource.
     */
    sourceId?: string;
};

export type Organization = DomainResource & {
    identifier?: Identifier[];
    /**
     * Whether the organization's record is still in active use.
     */
    active?: boolean;
    type?: CodeableConcept[];
    /**
     * A name associated with the organization.
     */
    name?: string;
    alias?: string[];
    telecom?: ContactPoint[];
    address?: Address[];
    /**
     * The organization of which this organization forms a part.
     */
    partOf?: Reference;
    contact?: Organization_Contact[];
    endpoint?: Reference[];
};

export type Organization_Contact = BackboneElement & {
    /**
     * Indicates a purpose for which the contact can be reached.
     */
    purpose?: CodeableConcept;
    /**
     * A name associated with the contact.
     */
    name?: HumanName;
    telecom?: ContactPoint[];
    /**
     * Visiting or postal addresses for the contact.
     */
    address?: Address;
};

export type OrganizationAffiliation = DomainResource & {
    identifier?: Identifier[];
    /**
     * Whether this organization affiliation record is in active use.
     */
    active?: boolean;
    /**
     * The period during which the participatingOrganization is affiliated with the primary organization.
     */
    period?: Period;
    /**
     * Organization where the role is available (primary organization/has members).
     */
    organization?: Reference;
    /**
     * The Participating Organization provides/performs the role(s) defined by the code to the Primary Organization (e.g. providing services or is a member of).
     */
    participatingOrganization?: Reference;
    network?: Reference[];
    code?: CodeableConcept[];
    specialty?: CodeableConcept[];
    location?: Reference[];
    healthcareService?: Reference[];
    telecom?: ContactPoint[];
    endpoint?: Reference[];
};

export type PackagedProductDefinition = DomainResource & {
    identifier?: Identifier[];
    /**
     * A name for this package. Typically what it would be listed as in a drug formulary or catalogue, inventory etc.
     */
    name?: string;
    /**
     * A high level category e.g. medicinal product, raw material, shipping/transport container, etc.
     */
    type?: CodeableConcept;
    packageFor?: Reference[];
    /**
     * The status within the lifecycle of this item. A high level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization or marketing status.
     */
    status?: CodeableConcept;
    /**
     * The date at which the given status became applicable.
     */
    statusDate?: string;
    containedItemQuantity?: Quantity[];
    /**
     * Textual description. Note that this is not the name of the package or product.
     */
    description?: string;
    legalStatusOfSupply?: PackagedProductDefinition_LegalStatusOfSupply[];
    marketingStatus?: MarketingStatus[];
    characteristic?: CodeableConcept[];
    /**
     * States whether a drug product is supplied with another item such as a diluent or adjuvant.
     */
    copackagedIndicator?: boolean;
    manufacturer?: Reference[];
    /**
     * A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item).
     */
    package?: PackagedProductDefinition_Package;
};

export type PackagedProductDefinition_LegalStatusOfSupply = BackboneElement & {
    /**
     * The actual status of supply. Conveys in what situation this package type may be supplied for use.
     */
    code?: CodeableConcept;
    /**
     * The place where the legal status of supply applies. When not specified, this indicates it is unknown in this context.
     */
    jurisdiction?: CodeableConcept;
};

export type PackagedProductDefinition_Package = BackboneElement & {
    identifier?: Identifier[];
    /**
     * The physical type of the container of the items.
     */
    type?: CodeableConcept;
    /**
     * The quantity of this level of packaging in the package that contains it. If specified, the outermost level is always 1.
     */
    quantity?: number;
    material?: CodeableConcept[];
    alternateMaterial?: CodeableConcept[];
    shelfLifeStorage?: PackagedProductDefinition_Package_ShelfLifeStorage[];
    manufacturer?: Reference[];
    property?: PackagedProductDefinition_Package_Property[];
    containedItem?: PackagedProductDefinition_Package_ContainedItem[];
    package?: PackagedProductDefinition_Package[];
};

export type PackagedProductDefinition_Package_ContainedItem =
    BackboneElement & {
        /**
         * The actual item(s) of medication, as manufactured, or a device (typically, but not necessarily, a co&ndash;packaged one), or other medically related item (such as food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This also allows another whole packaged product to be included, which is solely for the case where a package of other entire packages is wanted &ndash; such as a wholesale or distribution pack (for layers within one package, use PackagedProductDefinition.package.package).
         */
        item: CodeableReference;
        /**
         * The number of this type of item within this packaging.
         */
        amount?: Quantity;
    };

export type PackagedProductDefinition_Package_Property = BackboneElement & {
    /**
     * A code expressing the type of characteristic.
     */
    type: CodeableConcept;
    /**
     * A value for the characteristic.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value for the characteristic.
     */
    valueQuantity?: Quantity;
    /**
     * A value for the characteristic.
     */
    valueDate?: string;
    /**
     * A value for the characteristic.
     */
    valueBoolean?: boolean;
    /**
     * A value for the characteristic.
     */
    valueAttachment?: Attachment;
};

export type PackagedProductDefinition_Package_ShelfLifeStorage =
    BackboneElement & {
        /**
         * This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
         */
        type?: CodeableConcept;
        /**
         * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
         */
        periodDuration?: Duration;
        /**
         * The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
         */
        periodString?: string;
        specialPrecautionsForStorage?: CodeableConcept[];
    };

export type Patient = DomainResource & {
    identifier?: Identifier[];
    /**
     * Whether this patient record is in active use.
     * Many systems use this property to mark as non&ndash;current patients, such as those that have not been seen for a period of time based on an organization's business rules.
     *
     * It is often used to filter patient lists to exclude inactive patients
     *
     * Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
     */
    active?: boolean;
    name?: HumanName[];
    telecom?: ContactPoint[];
    /**
     * Administrative Gender &ndash; the gender that the patient is considered to have for administration and record keeping purposes.
     */
    gender?: string;
    /**
     * The date of birth for the individual.
     */
    birthDate?: string;
    /**
     * Indicates if the individual is deceased or not.
     */
    deceasedBoolean?: boolean;
    /**
     * Indicates if the individual is deceased or not.
     */
    deceasedDateTime?: string;
    address?: Address[];
    /**
     * This field contains a patient's most recent marital (civil) status.
     */
    maritalStatus?: CodeableConcept;
    /**
     * Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
     */
    multipleBirthBoolean?: boolean;
    /**
     * Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
     */
    multipleBirthInteger?: number;
    photo?: Attachment[];
    contact?: Patient_Contact[];
    communication?: Patient_Communication[];
    generalPractitioner?: Reference[];
    /**
     * Organization that is the custodian of the patient record.
     */
    managingOrganization?: Reference;
    link?: Patient_Link[];
};

export type Patient_Communication = BackboneElement & {
    /**
     * The ISO&ndash;639&ndash;1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO&ndash;3166&ndash;1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en&ndash;US" for American English versus "en&ndash;EN" for England English.
     */
    language: CodeableConcept;
    /**
     * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
     */
    preferred?: boolean;
};

export type Patient_Contact = BackboneElement & {
    relationship?: CodeableConcept[];
    /**
     * A name associated with the contact person.
     */
    name?: HumanName;
    telecom?: ContactPoint[];
    /**
     * Address for the contact person.
     */
    address?: Address;
    /**
     * Administrative Gender &ndash; the gender that the contact person is considered to have for administration and record keeping purposes.
     */
    gender?: string;
    /**
     * Organization on behalf of which the contact is acting or for which the contact is working.
     */
    organization?: Reference;
    /**
     * The period during which this contact person or organization is valid to be contacted relating to this patient.
     */
    period?: Period;
};

export type Patient_Link = BackboneElement & {
    /**
     * The other patient resource that the link refers to.
     */
    other: Reference;
    /**
     * The type of link between this patient resource and another patient resource.
     */
    type: string;
};

export type ResearchSubject = DomainResource & {
    identifier?: Identifier[];
    /**
     * The current state of the subject.
     */
    status: string;
    /**
     * The dates the subject began and ended their participation in the study.
     */
    period?: Period;
    /**
     * Reference to the study the subject is participating in.
     */
    study: Reference;
    /**
     * The record of the person or animal who is involved in the study.
     */
    individual: Reference;
    /**
     * The name of the arm in the study the subject is expected to follow as part of this study.
     */
    assignedArm?: string;
    /**
     * The name of the arm in the study the subject actually followed as part of this study.
     */
    actualArm?: string;
    /**
     * A record of the patient's informed agreement to participate in the study.
     */
    consent?: Reference;
};

export type RelatedPerson = DomainResource & {
    identifier?: Identifier[];
    /**
     * Whether this related person record is in active use.
     */
    active?: boolean;
    /**
     * The patient this person is related to.
     */
    patient: Reference;
    relationship?: CodeableConcept[];
    name?: HumanName[];
    telecom?: ContactPoint[];
    /**
     * Administrative Gender &ndash; the gender that the person is considered to have for administration and record keeping purposes.
     */
    gender?: string;
    /**
     * The date on which the related person was born.
     */
    birthDate?: string;
    address?: Address[];
    photo?: Attachment[];
    /**
     * The period of time during which this relationship is or was active. If there are no dates defined, then the interval is unknown.
     */
    period?: Period;
    communication?: RelatedPerson_Communication[];
};

export type RelatedPerson_Communication = BackboneElement & {
    /**
     * The ISO&ndash;639&ndash;1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO&ndash;3166&ndash;1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en&ndash;US" for American English versus "en&ndash;EN" for England English.
     */
    language: CodeableConcept;
    /**
     * Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
     */
    preferred?: boolean;
};

export type Person = DomainResource & {
    identifier?: Identifier[];
    name?: HumanName[];
    telecom?: ContactPoint[];
    /**
     * Administrative Gender.
     */
    gender?: string;
    /**
     * The birth date for the person.
     */
    birthDate?: string;
    address?: Address[];
    /**
     * An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.
     */
    photo?: Attachment;
    /**
     * The organization that is the custodian of the person record.
     */
    managingOrganization?: Reference;
    /**
     * Whether this person's record is in active use.
     */
    active?: boolean;
    link?: Person_Link[];
};

export type Person_Link = BackboneElement & {
    /**
     * The resource to which this actual person is associated.
     */
    target: Reference;
    /**
     * Level of assurance that this link is associated with the target resource.
     */
    assurance?: string;
};

export type SupplyDelivery = DomainResource & {
    identifier?: Identifier[];
    basedOn?: Reference[];
    partOf?: Reference[];
    /**
     * A code specifying the state of the dispense event.
     */
    status?: string;
    /**
     * A link to a resource representing the person whom the delivered item is for.
     */
    patient?: Reference;
    /**
     * Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.
     */
    type?: CodeableConcept;
    /**
     * The item that is being delivered or has been supplied.
     */
    suppliedItem?: SupplyDelivery_SuppliedItem;
    /**
     * The date or time(s) the activity occurred.
     */
    occurrenceDateTime?: string;
    /**
     * The date or time(s) the activity occurred.
     */
    occurrencePeriod?: Period;
    /**
     * The date or time(s) the activity occurred.
     */
    occurrenceTiming?: Timing;
    /**
     * The individual responsible for dispensing the medication, supplier or device.
     */
    supplier?: Reference;
    /**
     * Identification of the facility/location where the Supply was shipped to, as part of the dispense event.
     */
    destination?: Reference;
    receiver?: Reference[];
};

export type SupplyDelivery_SuppliedItem = BackboneElement & {
    /**
     * The amount of supply that has been dispensed. Includes unit of measure.
     */
    quantity?: SimpleQuantity;
    /**
     * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     */
    itemCodeableConcept?: CodeableConcept;
    /**
     * Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.
     */
    itemReference?: Reference;
};

export type PaymentNotice = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: string;
    /**
     * Reference of resource for which payment is being made.
     */
    request?: Reference;
    /**
     * Reference of response to resource for which payment is being made.
     */
    response?: Reference;
    /**
     * The date when this resource was created.
     */
    created: string;
    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    provider?: Reference;
    /**
     * A reference to the payment which is the subject of this notice.
     */
    payment: Reference;
    /**
     * The date when the above payment action occurred.
     */
    paymentDate?: string;
    /**
     * The party who will receive or has received payment that is the subject of this notification.
     */
    payee?: Reference;
    /**
     * The party who is notified of the payment status.
     */
    recipient: Reference;
    /**
     * The amount sent to the payee.
     */
    amount: Money;
    /**
     * A code indicating whether payment has been sent or cleared.
     */
    paymentStatus?: CodeableConcept;
};

export type PaymentReconciliation = DomainResource & {
    identifier?: Identifier[];
    /**
     * The status of the resource instance.
     */
    status: string;
    /**
     * The period of time for which payments have been gathered into this bulk payment for settlement.
     */
    period?: Period;
    /**
     * The date when the resource was created.
     */
    created: string;
    /**
     * The party who generated the payment.
     */
    paymentIssuer?: Reference;
    /**
     * Original request resource reference.
     */
    request?: Reference;
    /**
     * The practitioner who is responsible for the services rendered to the patient.
     */
    requestor?: Reference;
    /**
     * The outcome of a request for a reconciliation.
     */
    outcome?: string;
    /**
     * A human readable description of the status of the request for the reconciliation.
     */
    disposition?: string;
    /**
     * The date of payment as indicated on the financial instrument.
     */
    paymentDate: string;
    /**
     * Total payment amount as indicated on the financial instrument.
     */
    paymentAmount: Money;
    /**
     * Issuer's unique identifier for the payment instrument.
     */
    paymentIdentifier?: Identifier;
    detail?: PaymentReconciliation_Detail[];
    /**
     * A code for the form to be used for printing the content.
     */
    formCode?: CodeableConcept;
    processNote?: PaymentReconciliation_ProcessNote[];
};

export type PaymentReconciliation_Detail = BackboneElement & {
    /**
     * Unique identifier for the current payment item for the referenced payable.
     */
    identifier?: Identifier;
    /**
     * Unique identifier for the prior payment item for the referenced payable.
     */
    predecessor?: Identifier;
    /**
     * Code to indicate the nature of the payment.
     */
    type: CodeableConcept;
    /**
     * A resource, such as a Claim, the evaluation of which could lead to payment.
     */
    request?: Reference;
    /**
     * The party which submitted the claim or financial transaction.
     */
    submitter?: Reference;
    /**
     * A resource, such as a ClaimResponse, which contains a commitment to payment.
     */
    response?: Reference;
    /**
     * The date from the response resource containing a commitment to pay.
     */
    date?: string;
    /**
     * A reference to the individual who is responsible for inquiries regarding the response and its payment.
     */
    responsible?: Reference;
    /**
     * The party which is receiving the payment.
     */
    payee?: Reference;
    /**
     * The monetary amount allocated from the total payment to the payable.
     */
    amount?: Money;
};

export type PaymentReconciliation_ProcessNote = BackboneElement & {
    /**
     * The business purpose of the note text.
     */
    type?: string;
    /**
     * The explanation or description associated with the processing.
     */
    text?: string;
};

export type PlanDefinition = DomainResource & {
    /**
     * An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this plan definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the plan definition is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non&ndash;experimental active artifacts.
     */
    version?: string;
    /**
     * A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the plan definition.
     */
    title?: string;
    /**
     * An explanatory or alternate title for the plan definition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * A high&ndash;level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.
     */
    type?: CodeableConcept;
    /**
     * The status of this plan definition. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     */
    subjectReference?: Reference;
    /**
     * A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     */
    subjectCanonical?: string;
    /**
     * The date  (and optionally time) when the plan definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the plan definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the plan definition from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this plan definition is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A detailed description of how the plan definition is used from a clinical perspective.
     */
    usage?: string;
    /**
     * A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
     */
    copyright?: string;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the plan definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    topic?: CodeableConcept[];
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    relatedArtifact?: RelatedArtifact[];
    library?: string[];
    goal?: PlanDefinition_Goal[];
    action?: PlanDefinition_Action[];
};

export type PlanDefinition_Action = BackboneElement & {
    /**
     * A user&ndash;visible prefix for the action.
     */
    prefix?: string;
    /**
     * The textual description of the action displayed to a user. For example, when the action is a test to be performed, the title would be the title of the test such as Assay by HPLC.
     */
    title?: string;
    /**
     * A brief description of the action used to provide a summary to display to the user.
     */
    description?: string;
    /**
     * A text equivalent of the action to be performed. This provides a human&ndash;interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
     */
    textEquivalent?: string;
    /**
     * Indicates how quickly the action should be addressed with respect to other actions.
     */
    priority?: string;
    code?: CodeableConcept[];
    reason?: CodeableConcept[];
    documentation?: RelatedArtifact[];
    goalId?: string[];
    /**
     * A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     */
    subjectReference?: Reference;
    /**
     * A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
     */
    subjectCanonical?: string;
    trigger?: TriggerDefinition[];
    condition?: PlanDefinition_Action_Condition[];
    input?: DataRequirement[];
    output?: DataRequirement[];
    relatedAction?: PlanDefinition_Action_RelatedAction[];
    /**
     * An optional value describing when the action should be performed.
     */
    timingDateTime?: string;
    /**
     * An optional value describing when the action should be performed.
     */
    timingAge?: Age;
    /**
     * An optional value describing when the action should be performed.
     */
    timingPeriod?: Period;
    /**
     * An optional value describing when the action should be performed.
     */
    timingDuration?: Duration;
    /**
     * An optional value describing when the action should be performed.
     */
    timingRange?: Range;
    /**
     * An optional value describing when the action should be performed.
     */
    timingTiming?: Timing;
    participant?: PlanDefinition_Action_Participant[];
    /**
     * The type of action to perform (create, update, remove).
     */
    type?: CodeableConcept;
    /**
     * Defines the grouping behavior for the action and its children.
     */
    groupingBehavior?: string;
    /**
     * Defines the selection behavior for the action and its children.
     */
    selectionBehavior?: string;
    /**
     * Defines the required behavior for the action.
     */
    requiredBehavior?: string;
    /**
     * Defines whether the action should usually be preselected.
     */
    precheckBehavior?: string;
    /**
     * Defines whether the action can be selected multiple times.
     */
    cardinalityBehavior?: string;
    /**
     * A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
     */
    definitionCanonical?: string;
    /**
     * A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
     */
    definitionUri?: string;
    /**
     * A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
     */
    transform?: string;
    dynamicValue?: PlanDefinition_Action_DynamicValue[];
    action?: PlanDefinition_Action[];
};

export type PlanDefinition_Action_Condition = BackboneElement & {
    /**
     * The kind of condition.
     */
    kind: string;
    /**
     * An expression that returns true or false, indicating whether the condition is satisfied.
     */
    expression?: Expression;
};

export type PlanDefinition_Action_DynamicValue = BackboneElement & {
    /**
     * The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolveable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub&ndash;elements, as well as indexers ([x]) to traverse multiple&ndash;cardinality sub&ndash;elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     */
    path?: string;
    /**
     * An expression specifying the value of the customized element.
     */
    expression?: Expression;
};

export type PlanDefinition_Action_Participant = BackboneElement & {
    /**
     * The type of participant in the action.
     */
    type: string;
    /**
     * The role the participant should play in performing the described action.
     */
    role?: CodeableConcept;
};

export type PlanDefinition_Action_RelatedAction = BackboneElement & {
    /**
     * The element id of the related action.
     */
    actionId: string;
    /**
     * The relationship of this action to the related action.
     */
    relationship: string;
    /**
     * A duration or range of durations to apply to the relationship. For example, 30&ndash;60 minutes before.
     */
    offsetDuration?: Duration;
    /**
     * A duration or range of durations to apply to the relationship. For example, 30&ndash;60 minutes before.
     */
    offsetRange?: Range;
};

export type PlanDefinition_Goal = BackboneElement & {
    /**
     * Indicates a category the goal falls within.
     */
    category?: CodeableConcept;
    /**
     * Human&ndash;readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
     */
    description: CodeableConcept;
    /**
     * Identifies the expected level of importance associated with reaching/sustaining the defined goal.
     */
    priority?: CodeableConcept;
    /**
     * The event after which the goal should begin being pursued.
     */
    start?: CodeableConcept;
    addresses?: CodeableConcept[];
    documentation?: RelatedArtifact[];
    target?: PlanDefinition_Goal_Target[];
};

export type PlanDefinition_Goal_Target = BackboneElement & {
    /**
     * The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
     */
    measure?: CodeableConcept;
    /**
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality &ndash; NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     */
    detailQuantity?: Quantity;
    /**
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality &ndash; NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     */
    detailRange?: Range;
    /**
     * The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality &ndash; NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
     */
    detailCodeableConcept?: CodeableConcept;
    /**
     * Indicates the timeframe after the start of the goal in which the goal should be met.
     */
    due?: Duration;
};

export type Practitioner = DomainResource & {
    identifier?: Identifier[];
    /**
     * Whether this practitioner's record is in active use.
     */
    active?: boolean;
    name?: HumanName[];
    telecom?: ContactPoint[];
    address?: Address[];
    /**
     * Administrative Gender &ndash; the gender that the person is considered to have for administration and record keeping purposes.
     */
    gender?: string;
    /**
     * The date of birth for the practitioner.
     */
    birthDate?: string;
    photo?: Attachment[];
    qualification?: Practitioner_Qualification[];
    communication?: CodeableConcept[];
};

export type Practitioner_Qualification = BackboneElement & {
    identifier?: Identifier[];
    /**
     * Coded representation of the qualification.
     */
    code: CodeableConcept;
    /**
     * Period during which the qualification is valid.
     */
    period?: Period;
    /**
     * Organization that regulates and issues the qualification.
     */
    issuer?: Reference;
};

export type ResearchStudy = DomainResource & {
    identifier?: Identifier[];
    /**
     * A short, descriptive user&ndash;friendly label for the study.
     */
    title?: string;
    protocol?: Reference[];
    partOf?: Reference[];
    /**
     * The current state of the study.
     */
    status: string;
    /**
     * The type of study based upon the intent of the study's activities. A classification of the intent of the study.
     */
    primaryPurposeType?: CodeableConcept;
    /**
     * The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post&ndash;market evaluation.
     */
    phase?: CodeableConcept;
    category?: CodeableConcept[];
    focus?: CodeableConcept[];
    condition?: CodeableConcept[];
    contact?: ContactDetail[];
    relatedArtifact?: RelatedArtifact[];
    keyword?: CodeableConcept[];
    location?: CodeableConcept[];
    /**
     * A full description of how the study is being conducted.
     */
    description?: string;
    enrollment?: Reference[];
    /**
     * Identifies the start date and the expected (or actual, depending on status) end date for the study.
     */
    period?: Period;
    /**
     * An organization that initiates the investigation and is legally responsible for the study.
     */
    sponsor?: Reference;
    /**
     * A researcher in a study who oversees multiple aspects of the study, such as concept development, protocol writing, protocol submission for IRB approval, participant recruitment, informed consent, data collection, analysis, interpretation and presentation.
     */
    principalInvestigator?: Reference;
    site?: Reference[];
    /**
     * A description and/or code explaining the premature termination of the study.
     */
    reasonStopped?: CodeableConcept;
    note?: Annotation[];
    arm?: ResearchStudy_Arm[];
    objective?: ResearchStudy_Objective[];
};

export type ResearchStudy_Arm = BackboneElement & {
    /**
     * Unique, human&ndash;readable label for this arm of the study.
     */
    name: string;
    /**
     * Categorization of study arm, e.g. experimental, active comparator, placebo comparater.
     */
    type?: CodeableConcept;
    /**
     * A succinct description of the path through the study that would be followed by a subject adhering to this arm.
     */
    description?: string;
};

export type ResearchStudy_Objective = BackboneElement & {
    /**
     * Unique, human&ndash;readable label for this objective of the study.
     */
    name?: string;
    /**
     * The kind of study objective.
     */
    type?: CodeableConcept;
};

export type PractitionerRole = DomainResource & {
    identifier?: Identifier[];
    /**
     * Whether this practitioner role record is in active use.
     */
    active?: boolean;
    /**
     * The period during which the person is authorized to act as a practitioner in these role(s) for the organization.
     */
    period?: Period;
    /**
     * Practitioner that is able to provide the defined services for the organization.
     */
    practitioner?: Reference;
    /**
     * The organization where the Practitioner performs the roles associated.
     */
    organization?: Reference;
    code?: CodeableConcept[];
    specialty?: CodeableConcept[];
    location?: Reference[];
    healthcareService?: Reference[];
    telecom?: ContactPoint[];
    availableTime?: PractitionerRole_AvailableTime[];
    notAvailable?: PractitionerRole_NotAvailable[];
    /**
     * A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.
     */
    availabilityExceptions?: string;
    endpoint?: Reference[];
};

export type PractitionerRole_AvailableTime = BackboneElement & {
    daysOfWeek?: string[];
    /**
     * Is this always available? (hence times are irrelevant) e.g. 24 hour service.
     */
    allDay?: boolean;
    /**
     * The opening time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    availableStartTime?: string;
    /**
     * The closing time of day. Note: If the AllDay flag is set, then this time is ignored.
     */
    availableEndTime?: string;
};

export type PractitionerRole_NotAvailable = BackboneElement & {
    /**
     * The reason that can be presented to the user as to why this time is not available.
     */
    description: string;
    /**
     * Service is not available (seasonally or for a public holiday) from this date.
     */
    during?: Period;
};

export type Questionnaire = DomainResource & {
    /**
     * An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this questionnaire is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the questionnaire is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the questionnaire.
     */
    title?: string;
    derivedFrom?: string[];
    /**
     * The status of this questionnaire. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    subjectType?: string[];
    /**
     * The date  (and optionally time) when the questionnaire was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the questionnaire.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the questionnaire from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this questionnaire is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
     */
    copyright?: string;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the questionnaire content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    code?: Coding[];
    item?: Questionnaire_Item[];
};

export type Questionnaire_Item = BackboneElement & {
    /**
     * An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource.
     */
    linkId: string;
    /**
     * This element is a URI that refers to an [ElementDefinition](elementdefinition.html) that provides information about this item, including information that might otherwise be included in the instance of the Questionnaire resource. A detailed description of the construction of the URI is shown in Comments, below. If this element is present then the following element values MAY be derived from the Element Definition if the corresponding elements of this Questionnaire resource instance have no value:
     *
     * * code (ElementDefinition.code)
     * * type (ElementDefinition.type)
     * * required (ElementDefinition.min)
     * * repeats (ElementDefinition.max)
     * * maxLength (ElementDefinition.maxLength)
     * * answerValueSet (ElementDefinition.binding)
     * * options (ElementDefinition.binding).
     */
    definition?: string;
    code?: Coding[];
    /**
     * A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire.
     */
    prefix?: string;
    /**
     * The name of a section, the text of a question or text content for a display item.
     */
    text?: string;
    /**
     * The type of questionnaire item this is &ndash; whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, coded choice, etc.).
     */
    type: string;
    enableWhen?: Questionnaire_Item_EnableWhen[];
    /**
     * Controls how multiple enableWhen values are interpreted &ndash;  whether all or any must be true.
     */
    enableBehavior?: string;
    /**
     * An indication, if true, that the item must be present in a "completed" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.
     */
    required?: boolean;
    /**
     * An indication, if true, that the item may occur multiple times in the response, collecting multiple answers for questions or multiple sets of answers for groups.
     */
    repeats?: boolean;
    /**
     * An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire.
     */
    readOnly?: boolean;
    /**
     * The maximum number of characters that are permitted in the answer to be considered a "valid" QuestionnaireResponse.
     */
    maxLength?: number;
    /**
     * A reference to a value set containing a list of codes representing permitted answers for a "choice" or "open&ndash;choice" question.
     */
    answerValueSet?: string;
    answerOption?: Questionnaire_Item_AnswerOption[];
    initial?: Questionnaire_Item_Initial[];
    item?: Questionnaire_Item[];
};

export type Questionnaire_Item_AnswerOption = BackboneElement & {
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueInteger?: number;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueDate?: string;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueTime?: string;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueString?: string;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueCoding?: Coding;
    /**
     * A potential answer that's allowed as the answer to this question.
     */
    valueReference?: Reference;
    /**
     * Indicates whether the answer value is selected when the list of possible answers is initially shown.
     */
    initialSelected?: boolean;
};

export type Questionnaire_Item_EnableWhen = BackboneElement & {
    /**
     * The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.
     */
    question: string;
    /**
     * Specifies the criteria by which the question is enabled.
     */
    operator: string;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerBoolean?: boolean;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerDecimal?: number;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerInteger?: number;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerDate?: string;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerDateTime?: string;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerTime?: string;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerString?: string;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerCoding?: Coding;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerQuantity?: Quantity;
    /**
     * A value that the referenced question is tested using the specified operator in order for the item to be enabled.
     */
    answerReference?: Reference;
};

export type Questionnaire_Item_Initial = BackboneElement & {
    /**
     * The actual value to for an initial answer.
     */
    valueBoolean?: boolean;
    /**
     * The actual value to for an initial answer.
     */
    valueDecimal?: number;
    /**
     * The actual value to for an initial answer.
     */
    valueInteger?: number;
    /**
     * The actual value to for an initial answer.
     */
    valueDate?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueDateTime?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueTime?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueString?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueUri?: string;
    /**
     * The actual value to for an initial answer.
     */
    valueAttachment?: Attachment;
    /**
     * The actual value to for an initial answer.
     */
    valueCoding?: Coding;
    /**
     * The actual value to for an initial answer.
     */
    valueQuantity?: Quantity;
    /**
     * The actual value to for an initial answer.
     */
    valueReference?: Reference;
};

export type RegulatedAuthorization = DomainResource & {
    identifier?: Identifier[];
    subject?: Reference[];
    /**
     * Overall type of this authorization, for example drug marketing approval, orphan drug designation.
     */
    type?: CodeableConcept;
    /**
     * General textual supporting information.
     */
    description?: string;
    region?: CodeableConcept[];
    /**
     * The status that is authorised e.g. approved. Intermediate states and actions can be tracked with cases and applications.
     */
    status?: CodeableConcept;
    /**
     * The date at which the current status was assigned.
     */
    statusDate?: string;
    /**
     * The time period in which the regulatory approval, clearance or licencing is in effect. As an example, a Marketing Authorization includes the date of authorization and/or an expiration date.
     */
    validityPeriod?: Period;
    /**
     * Condition for which the use of the regulated product applies.
     */
    indication?: CodeableReference;
    /**
     * The intended use of the product, e.g. prevention, treatment, diagnosis.
     */
    intendedUse?: CodeableConcept;
    basis?: CodeableConcept[];
    /**
     * The organization that has been granted this authorization, by some authoritative body (the 'regulator').
     */
    holder?: Reference;
    /**
     * The regulatory authority or authorizing body granting the authorization. For example, European Medicines Agency (EMA), Food and Drug Administration (FDA), Health Canada (HC), etc.
     */
    regulator?: Reference;
    /**
     * The case or regulatory procedure for granting or amending a regulated authorization. An authorization is granted in response to submissions/applications by those seeking authorization. A case is the administrative process that deals with the application(s) that relate to this and assesses them. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page).
     */
    case?: RegulatedAuthorization_Case;
};

export type RegulatedAuthorization_Case = BackboneElement & {
    /**
     * Identifier by which this case can be referenced.
     */
    identifier?: Identifier;
    /**
     * The defining type of case.
     */
    type?: CodeableConcept;
    /**
     * The status associated with the case.
     */
    status?: CodeableConcept;
    /**
     * Relevant date for this case.
     */
    datePeriod?: Period;
    /**
     * Relevant date for this case.
     */
    dateDateTime?: string;
    application?: RegulatedAuthorization_Case[];
};

export type ResearchDefinition = DomainResource & {
    /**
     * An absolute URI that is used to identify this research definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this research definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the research definition is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the research definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the research definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non&ndash;experimental active artifacts.
     */
    version?: string;
    /**
     * A natural language name identifying the research definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the research definition.
     */
    title?: string;
    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    shortTitle?: string;
    /**
     * An explanatory or alternate title for the ResearchDefinition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * The status of this research definition. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this research definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The intended subjects for the ResearchDefinition. If this element is not provided, a Patient subject is assumed, but the subject of the ResearchDefinition can be anything.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * The intended subjects for the ResearchDefinition. If this element is not provided, a Patient subject is assumed, but the subject of the ResearchDefinition can be anything.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the research definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the research definition changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the research definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the research definition from a consumer's perspective.
     */
    description?: string;
    comment?: string[];
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this research definition is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A detailed description, from a clinical perspective, of how the ResearchDefinition is used.
     */
    usage?: string;
    /**
     * A copyright statement relating to the research definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the research definition.
     */
    copyright?: string;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the research definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    topic?: CodeableConcept[];
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    relatedArtifact?: RelatedArtifact[];
    library?: string[];
    /**
     * A reference to a ResearchElementDefinition resource that defines the population for the research.
     */
    population: Reference;
    /**
     * A reference to a ResearchElementDefinition resource that defines the exposure for the research.
     */
    exposure?: Reference;
    /**
     * A reference to a ResearchElementDefinition resource that defines the exposureAlternative for the research.
     */
    exposureAlternative?: Reference;
    /**
     * A reference to a ResearchElementDefinition resomece that defines the outcome for the research.
     */
    outcome?: Reference;
};

export type ResearchElementDefinition = DomainResource & {
    /**
     * An absolute URI that is used to identify this research element definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this research element definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the research element definition is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the research element definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the research element definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non&ndash;experimental active artifacts.
     */
    version?: string;
    /**
     * A natural language name identifying the research element definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the research element definition.
     */
    title?: string;
    /**
     * The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.
     */
    shortTitle?: string;
    /**
     * An explanatory or alternate title for the ResearchElementDefinition giving additional information about its content.
     */
    subtitle?: string;
    /**
     * The status of this research element definition. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this research element definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The intended subjects for the ResearchElementDefinition. If this element is not provided, a Patient subject is assumed, but the subject of the ResearchElementDefinition can be anything.
     */
    subjectCodeableConcept?: CodeableConcept;
    /**
     * The intended subjects for the ResearchElementDefinition. If this element is not provided, a Patient subject is assumed, but the subject of the ResearchElementDefinition can be anything.
     */
    subjectReference?: Reference;
    /**
     * The date  (and optionally time) when the research element definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the research element definition changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the research element definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the research element definition from a consumer's perspective.
     */
    description?: string;
    comment?: string[];
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this research element definition is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A detailed description, from a clinical perspective, of how the ResearchElementDefinition is used.
     */
    usage?: string;
    /**
     * A copyright statement relating to the research element definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the research element definition.
     */
    copyright?: string;
    /**
     * The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the research element definition content was or is planned to be in active use.
     */
    effectivePeriod?: Period;
    topic?: CodeableConcept[];
    author?: ContactDetail[];
    editor?: ContactDetail[];
    reviewer?: ContactDetail[];
    endorser?: ContactDetail[];
    relatedArtifact?: RelatedArtifact[];
    library?: string[];
    /**
     * The type of research element, a population, an exposure, or an outcome.
     */
    type: string;
    /**
     * The type of the outcome (e.g. Dichotomous, Continuous, or Descriptive).
     */
    variableType?: string;
    characteristic: ResearchElementDefinition_Characteristic[];
};

export type ResearchElementDefinition_Characteristic = BackboneElement & {
    /**
     * Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionCodeableConcept?: CodeableConcept;
    /**
     * Define members of the research element using Codes (such as condition, medication, or observation), Expressions ( using an expression language such as FHIRPath or CQL) or DataRequirements (such as Diabetes diagnosis onset in the last year).
     */
    definitionCanonical?: string;
    usageContext?: UsageContext[];
    /**
     * When true, members with this characteristic are excluded from the element.
     */
    exclude?: boolean;
    /**
     * Specifies the UCUM unit for the outcome.
     */
    unitOfMeasure?: CodeableConcept;
    /**
     * A narrative description of the time period the study covers.
     */
    studyEffectiveDescription?: string;
    /**
     * Indicates what effective period the study covers.
     */
    studyEffectiveDateTime?: string;
    /**
     * Indicates what effective period the study covers.
     */
    studyEffectivePeriod?: Period;
    /**
     * Indicates what effective period the study covers.
     */
    studyEffectiveDuration?: Duration;
    /**
     * Indicates what effective period the study covers.
     */
    studyEffectiveTiming?: Timing;
    /**
     * Indicates duration from the study initiation.
     */
    studyEffectiveTimeFromStart?: Duration;
    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    studyEffectiveGroupMeasure?: string;
    /**
     * A narrative description of the time period the study covers.
     */
    participantEffectiveDescription?: string;
    /**
     * Indicates what effective period the study covers.
     */
    participantEffectiveDateTime?: string;
    /**
     * Indicates what effective period the study covers.
     */
    participantEffectivePeriod?: Period;
    /**
     * Indicates what effective period the study covers.
     */
    participantEffectiveDuration?: Duration;
    /**
     * Indicates what effective period the study covers.
     */
    participantEffectiveTiming?: Timing;
    /**
     * Indicates duration from the participant's study entry.
     */
    participantEffectiveTimeFromStart?: Duration;
    /**
     * Indicates how elements are aggregated within the study effective period.
     */
    participantEffectiveGroupMeasure?: string;
};

export type SearchParameter = DomainResource & {
    /**
     * An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this search parameter is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the search parameter is stored on different servers.
     */
    url: string;
    /**
     * The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. i.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.
     */
    derivedFrom?: string;
    /**
     * The status of this search parameter. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the search parameter was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the search parameter.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * And how it used.
     */
    description: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this search parameter is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * The code used in the URL or the parameter name in a parameters resource for this search parameter.
     */
    code: string;
    base: string[];
    /**
     * The type of value that a search parameter may contain, and how the content is interpreted.
     */
    type: string;
    /**
     * A FHIRPath expression that returns a set of elements for the search parameter.
     */
    expression?: string;
    /**
     * An XPath expression that returns a set of elements for the search parameter.
     */
    xpath?: string;
    /**
     * How the search parameter relates to the set of elements returned by evaluating the xpath query.
     */
    xpathUsage?: string;
    target?: string[];
    /**
     * Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match.
     */
    multipleOr?: boolean;
    /**
     * Whether multiple parameters are allowed &ndash; e.g. more than one parameter with the same name. The search matches if all the parameters match.
     */
    multipleAnd?: boolean;
    comparator?: string[];
    modifier?: string[];
    chain?: string[];
    component?: SearchParameter_Component[];
};

export type SearchParameter_Component = BackboneElement & {
    /**
     * The definition of the search parameter that describes this part.
     */
    definition: string;
    /**
     * A sub&ndash;expression that defines how to extract values for this component from the output of the main SearchParameter.expression.
     */
    expression: string;
};

export type Slot = DomainResource & {
    identifier?: Identifier[];
    serviceCategory?: CodeableConcept[];
    serviceType?: CodeableConcept[];
    specialty?: CodeableConcept[];
    /**
     * The style of appointment or patient that may be booked in the slot (not service type).
     */
    appointmentType?: CodeableConcept;
    /**
     * The schedule resource that this slot defines an interval of status information.
     */
    schedule: Reference;
    /**
     * busy | free | busy&ndash;unavailable | busy&ndash;tentative | entered&ndash;in&ndash;error.
     */
    status: string;
    /**
     * Date/Time that the slot is to begin.
     */
    start: string;
    /**
     * Date/Time that the slot is to conclude.
     */
    end: string;
    /**
     * This slot has already been overbooked, appointments are unlikely to be accepted for this time.
     */
    overbooked?: boolean;
    /**
     * Comments on the slot to describe any extended information. Such as custom constraints on the slot.
     */
    comment?: string;
};

export type SpecimenDefinition = DomainResource & {
    /**
     * A business identifier associated with the kind of specimen.
     */
    identifier?: Identifier;
    /**
     * The kind of material to be collected.
     */
    typeCollected?: CodeableConcept;
    patientPreparation?: CodeableConcept[];
    /**
     * Time aspect of specimen collection (duration or offset).
     */
    timeAspect?: string;
    collection?: CodeableConcept[];
    typeTested?: SpecimenDefinition_TypeTested[];
};

export type SpecimenDefinition_TypeTested = BackboneElement & {
    /**
     * Primary of secondary specimen.
     */
    isDerived?: boolean;
    /**
     * The kind of specimen conditioned for testing expected by lab.
     */
    type?: CodeableConcept;
    /**
     * The preference for this type of conditioned specimen.
     */
    preference: string;
    /**
     * The specimen's container.
     */
    container?: SpecimenDefinition_TypeTested_Container;
    /**
     * Requirements for delivery and special handling of this kind of conditioned specimen.
     */
    requirement?: string;
    /**
     * The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.
     */
    retentionTime?: Duration;
    rejectionCriterion?: CodeableConcept[];
    handling?: SpecimenDefinition_TypeTested_Handling[];
};

export type SpecimenDefinition_TypeTested_Container = BackboneElement & {
    /**
     * The type of material of the container.
     */
    material?: CodeableConcept;
    /**
     * The type of container used to contain this kind of specimen.
     */
    type?: CodeableConcept;
    /**
     * Color of container cap.
     */
    cap?: CodeableConcept;
    /**
     * The textual description of the kind of container.
     */
    description?: string;
    /**
     * The capacity (volume or other measure) of this kind of container.
     */
    capacity?: SimpleQuantity;
    /**
     * The minimum volume to be conditioned in the container.
     */
    minimumVolumeQuantity?: SimpleQuantity;
    /**
     * The minimum volume to be conditioned in the container.
     */
    minimumVolumeString?: string;
    additive?: SpecimenDefinition_TypeTested_Container_Additive[];
    /**
     * Special processing that should be applied to the container for this kind of specimen.
     */
    preparation?: string;
};

export type SpecimenDefinition_TypeTested_Container_Additive =
    BackboneElement & {
        /**
         * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
         */
        additiveCodeableConcept?: CodeableConcept;
        /**
         * Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.
         */
        additiveReference?: Reference;
    };

export type SpecimenDefinition_TypeTested_Handling = BackboneElement & {
    /**
     * It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.
     */
    temperatureQualifier?: CodeableConcept;
    /**
     * The temperature interval for this set of handling instructions.
     */
    temperatureRange?: Range;
    /**
     * The maximum time interval of preservation of the specimen with these conditions.
     */
    maxDuration?: Duration;
    /**
     * Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.
     */
    instruction?: string;
};

export type StructureDefinition = DomainResource & {
    /**
     * An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers.
     */
    url: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the structure definition.
     */
    title?: string;
    /**
     * The status of this structure definition. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the structure definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the structure definition.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the structure definition from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this structure definition is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.
     */
    copyright?: string;
    keyword?: Coding[];
    /**
     * The version of the FHIR specification on which this StructureDefinition is based &ndash; this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.3.0&ndash;cibuild for this version.
     */
    fhirVersion?: string;
    mapping?: StructureDefinition_Mapping[];
    /**
     * Defines the kind of structure that this definition is describing.
     */
    kind: string;
    /**
     * Whether structure this definition describes is abstract or not  &ndash; that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.
     */
    abstract: boolean;
    context?: StructureDefinition_Context[];
    contextInvariant?: string[];
    /**
     * Defines how to interpret the expression that defines what the context of the extension is.
     */
    type: string;
    /**
     * An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.
     */
    baseDefinition?: string;
    /**
     * How the type relates to the baseDefinition.
     */
    derivation?: string;
    /**
     * A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
     */
    snapshot?: StructureDefinition_Snapshot;
    /**
     * A differential view is expressed relative to the base StructureDefinition &ndash; a statement of differences that it applies.
     */
    differential?: StructureDefinition_Differential;
};

export type StructureDefinition_Context = BackboneElement & {
    /**
     * Defines how to interpret the expression that defines what the context of the extension is.
     */
    type: string;
    /**
     * An expression that defines where an extension can be used in resources.
     */
    expression: string;
};

export type StructureDefinition_Differential = BackboneElement & {
    element: ElementDefinition[];
};

export type StructureDefinition_Mapping = BackboneElement & {
    /**
     * An Internal id that is used to identify this mapping set when specific mappings are made.
     */
    identity: string;
    /**
     * An absolute URI that identifies the specification that this mapping is expressed to.
     */
    uri?: string;
    /**
     * A name for the specification that is being mapped to.
     */
    name?: string;
    /**
     * Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
     */
    comment?: string;
};

export type StructureDefinition_Snapshot = BackboneElement & {
    element: ElementDefinition[];
};

export type ElementDefinition = BackboneElement & {
    /**
     * The path identifies the element and is expressed as a "."&ndash;separated list of ancestor elements, beginning with the name of the resource or extension.
     */
    path: string;
    representation?: string[];
    /**
     * The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
     */
    sliceName?: string;
    /**
     * If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
     */
    sliceIsConstraining?: boolean;
    /**
     * A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
     */
    label?: string;
    code?: Coding[];
    /**
     * Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
     */
    slicing?: ElementDefinition_Slicing;
    /**
     * A concise description of what this element means (e.g. for use in autogenerated summaries).
     */
    short?: string;
    /**
     * Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
     */
    definition?: string;
    /**
     * Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
     */
    comment?: string;
    /**
     * This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
     */
    requirements?: string;
    alias?: string[];
    /**
     * The minimum number of times this element SHALL appear in the instance.
     */
    min?: number;
    /**
     * The maximum number of times this element is permitted to appear in the instance.
     */
    max?: string;
    /**
     * Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element &ndash; i.g. either in a constraint on another type, or for elements from a super type in a snap shot &ndash; then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
     */
    base?: ElementDefinition_Base;
    /**
     * Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
     */
    contentReference?: string;
    type?: ElementDefinition_Type[];
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueBase64Binary?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueBoolean?: boolean;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueCanonical?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueCode?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueDate?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueDateTime?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueDecimal?: number;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueId?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueInstant?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueInteger?: number;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueMarkdown?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueOid?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValuePositiveInt?: number;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueString?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueTime?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueUnsignedInt?: number;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueUri?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueUrl?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueUuid?: string;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueAddress?: Address;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueAge?: Age;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueAnnotation?: Annotation;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueAttachment?: Attachment;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueCodeableConcept?: CodeableConcept;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueCodeableReference?: CodeableReference;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueCoding?: Coding;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueContactPoint?: ContactPoint;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueCount?: Count;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueDistance?: Distance;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueDuration?: Duration;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueHumanName?: HumanName;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueIdentifier?: Identifier;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueMoney?: Money;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValuePeriod?: Period;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueQuantity?: Quantity;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueRange?: Range;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueRatio?: Ratio;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueRatioRange?: RatioRange;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueReference?: Reference;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueSampledData?: SampledData;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueSignature?: Signature;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueTiming?: Timing;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueContactDetail?: ContactDetail;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueRelatedArtifact?: RelatedArtifact;
    /**
     * The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
     */
    defaultValueUsageContext?: UsageContext;
    /**
     * The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
     */
    meaningWhenMissing?: string;
    /**
     * If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
     */
    orderMeaning?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedBase64Binary?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedBoolean?: boolean;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCanonical?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCode?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDate?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDateTime?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDecimal?: number;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedId?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedInstant?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedInteger?: number;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedMarkdown?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedOid?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedPositiveInt?: number;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedString?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedTime?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUnsignedInt?: number;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUri?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUrl?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUuid?: string;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedAddress?: Address;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedAge?: Age;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedAnnotation?: Annotation;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedAttachment?: Attachment;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCodeableConcept?: CodeableConcept;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCodeableReference?: CodeableReference;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCoding?: Coding;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedContactPoint?: ContactPoint;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedCount?: Count;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDistance?: Distance;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedDuration?: Duration;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedHumanName?: HumanName;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedIdentifier?: Identifier;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedMoney?: Money;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedPeriod?: Period;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedQuantity?: Quantity;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedRange?: Range;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedRatio?: Ratio;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedRatioRange?: RatioRange;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedReference?: Reference;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedSampledData?: SampledData;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedSignature?: Signature;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedTiming?: Timing;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedContactDetail?: ContactDetail;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedRelatedArtifact?: RelatedArtifact;
    /**
     * Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
     */
    fixedUsageContext?: UsageContext;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternBase64Binary?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternBoolean?: boolean;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternCanonical?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternCode?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternDate?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternDateTime?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternDecimal?: number;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternId?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternInstant?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternInteger?: number;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternMarkdown?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternOid?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternPositiveInt?: number;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternString?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternTime?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternUnsignedInt?: number;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternUri?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternUrl?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternUuid?: string;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternAddress?: Address;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternAge?: Age;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternAnnotation?: Annotation;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternAttachment?: Attachment;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternCodeableConcept?: CodeableConcept;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternCodeableReference?: CodeableReference;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternCoding?: Coding;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternContactPoint?: ContactPoint;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternCount?: Count;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternDistance?: Distance;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternDuration?: Duration;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternHumanName?: HumanName;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternIdentifier?: Identifier;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternMoney?: Money;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternPeriod?: Period;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternQuantity?: Quantity;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternRange?: Range;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternRatio?: Ratio;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternRatioRange?: RatioRange;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternReference?: Reference;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternSampledData?: SampledData;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternSignature?: Signature;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternTiming?: Timing;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternContactDetail?: ContactDetail;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternRelatedArtifact?: RelatedArtifact;
    /**
     * Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.
     *
     * When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
     *
     * When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
     *
     * When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,
     *
     * 1. If primitive: it must match exactly the pattern value
     * 2. If a complex object: it must match (recursively) the pattern value
     * 3. If an array: it must match (recursively) the pattern value.
     */
    patternUsageContext?: UsageContext;
    example?: ElementDefinition_Example[];
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueDate?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueDateTime?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueInstant?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueTime?: string;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueDecimal?: number;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueInteger?: number;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValuePositiveInt?: number;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueUnsignedInt?: number;
    /**
     * The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    minValueQuantity?: Quantity;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueDate?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueDateTime?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueInstant?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueTime?: string;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueDecimal?: number;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueInteger?: number;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValuePositiveInt?: number;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueUnsignedInt?: number;
    /**
     * The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
     */
    maxValueQuantity?: Quantity;
    /**
     * Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
     */
    maxLength?: number;
    condition?: string[];
    constraint?: ElementDefinition_Constraint[];
    /**
     * If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
     */
    mustSupport?: boolean;
    /**
     * If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre&ndash;determination has been made that it is not relevant to their particular system.
     */
    isModifier?: boolean;
    /**
     * Explains how that element affects the interpretation of the resource or element that contains it.
     */
    isModifierReason?: string;
    /**
     * Whether the element should be included if a client requests a search with the parameter _summary=true.
     */
    isSummary?: boolean;
    /**
     * Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
     */
    binding?: ElementDefinition_Binding;
    mapping?: ElementDefinition_Mapping[];
};

export type ElementDefinition_Base = BackboneElement & {
    /**
     * The Path that identifies the base element &ndash; this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element &ndash; that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
     */
    path: string;
    /**
     * Minimum cardinality of the base element identified by the path.
     */
    min: number;
    /**
     * Maximum cardinality of the base element identified by the path.
     */
    max: string;
};

export type ElementDefinition_Binding = BackboneElement & {
    /**
     * Indicates the degree of conformance expectations associated with this binding &ndash; that is, the degree to which the provided value set must be adhered to in the instances.
     */
    strength: string;
    /**
     * Describes the intended use of this particular set of codes.
     */
    description?: string;
    /**
     * Refers to the value set that identifies the set of codes the binding refers to.
     */
    valueSet?: string;
};

export type ElementDefinition_Constraint = BackboneElement & {
    /**
     * Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
     */
    key: string;
    /**
     * Description of why this constraint is necessary or appropriate.
     */
    requirements?: string;
    /**
     * Identifies the impact constraint violation has on the conformance of the instance.
     */
    severity: string;
    /**
     * Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
     */
    human: string;
    /**
     * A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.
     */
    expression?: string;
    /**
     * An XPath expression of constraint that can be executed to see if this constraint is met.
     */
    xpath?: string;
    /**
     * A reference to the original source of the constraint, for traceability purposes.
     */
    source?: string;
};

export type ElementDefinition_Example = BackboneElement & {
    /**
     * Describes the purpose of this example amoung the set of examples.
     */
    label: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueBase64Binary?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueBoolean?: boolean;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCanonical?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCode?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDate?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDateTime?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDecimal?: number;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueId?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueInstant?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueInteger?: number;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueMarkdown?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueOid?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valuePositiveInt?: number;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueString?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueTime?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUnsignedInt?: number;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUri?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUrl?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUuid?: string;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAddress?: Address;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAge?: Age;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAnnotation?: Annotation;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueAttachment?: Attachment;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCodeableReference?: CodeableReference;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCoding?: Coding;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueContactPoint?: ContactPoint;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueCount?: Count;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDistance?: Distance;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueDuration?: Duration;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueHumanName?: HumanName;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueIdentifier?: Identifier;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueMoney?: Money;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valuePeriod?: Period;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueQuantity?: Quantity;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRange?: Range;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRatio?: Ratio;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRatioRange?: RatioRange;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueReference?: Reference;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueSampledData?: SampledData;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueSignature?: Signature;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueTiming?: Timing;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueContactDetail?: ContactDetail;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * The actual value for the element, which must be one of the types allowed for this element.
     */
    valueUsageContext?: UsageContext;
};

export type ElementDefinition_Mapping = BackboneElement & {
    /**
     * An internal reference to the definition of a mapping.
     */
    identity: string;
    /**
     * Identifies the computable language in which mapping.map is expressed.
     */
    language?: string;
    /**
     * Expresses what part of the target specification corresponds to this element.
     */
    map: string;
    /**
     * Comments that provide information about the mapping or its use.
     */
    comment?: string;
};

export type ElementDefinition_Slicing = BackboneElement & {
    discriminator?: ElementDefinition_Slicing_Discriminator[];
    /**
     * A human&ndash;readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
     */
    description?: string;
    /**
     * If the matching elements have to occur in the same order as defined in the profile.
     */
    ordered?: boolean;
    /**
     * Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
     */
    rules: string;
};

export type ElementDefinition_Slicing_Discriminator = BackboneElement & {
    /**
     * How the element value is interpreted when discrimination is evaluated.
     */
    type: string;
    /**
     * A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.
     */
    path: string;
};

export type ElementDefinition_Type = BackboneElement & {
    /**
     * URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
     */
    code: string;
    profile?: string[];
    targetProfile?: string[];
    aggregation?: string[];
    /**
     * Whether this reference needs to be version specific or version independent, or whether either can be used.
     */
    versioning?: string;
};

export type StructureMap = DomainResource & {
    /**
     * An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this structure map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure map is stored on different servers.
     */
    url: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the structure map.
     */
    title?: string;
    /**
     * The status of this structure map. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the structure map was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the structure map.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the structure map from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this structure map is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
     */
    copyright?: string;
    structure?: StructureMap_Structure[];
    import?: string[];
    group: StructureMap_Group[];
};

export type StructureMap_Group = BackboneElement & {
    /**
     * A unique name for the group for the convenience of human readers.
     */
    name: string;
    /**
     * Another group that this group adds rules to.
     */
    extends?: string;
    /**
     * If this is the default rule set to apply for the source type or this combination of types.
     */
    typeMode: string;
    /**
     * Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
     */
    documentation?: string;
    input: StructureMap_Group_Input[];
    rule: StructureMap_Group_Rule[];
};

export type StructureMap_Group_Input = BackboneElement & {
    /**
     * Name for this instance of data.
     */
    name: string;
    /**
     * Type for this instance of data.
     */
    type?: string;
    /**
     * Mode for this instance of data.
     */
    mode: string;
    /**
     * Documentation for this instance of data.
     */
    documentation?: string;
};

export type StructureMap_Group_Rule = BackboneElement & {
    /**
     * Name of the rule for internal references.
     */
    name: string;
    source: StructureMap_Group_Rule_Source[];
    target?: StructureMap_Group_Rule_Target[];
    rule?: StructureMap_Group_Rule[];
    dependent?: StructureMap_Group_Rule_Dependent[];
    /**
     * Documentation for this instance of data.
     */
    documentation?: string;
};

export type StructureMap_Group_Rule_Dependent = BackboneElement & {
    /**
     * Name of a rule or group to apply.
     */
    name: string;
    variable: string[];
};

export type StructureMap_Group_Rule_Source = BackboneElement & {
    /**
     * Type or variable this rule applies to.
     */
    context: string;
    /**
     * Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
     */
    min?: number;
    /**
     * Specified maximum cardinality for the element &ndash; a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
     */
    max?: string;
    /**
     * Specified type for the element. This works as a condition on the mapping &ndash; use for polymorphic elements.
     */
    type?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueBase64Binary?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueBoolean?: boolean;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueCanonical?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueCode?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueDate?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueDateTime?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueDecimal?: number;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueId?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueInstant?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueInteger?: number;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueMarkdown?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueOid?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValuePositiveInt?: number;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueString?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueTime?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueUnsignedInt?: number;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueUri?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueUrl?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueUuid?: string;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueAddress?: Address;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueAge?: Age;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueAnnotation?: Annotation;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueAttachment?: Attachment;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueCodeableConcept?: CodeableConcept;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueCoding?: Coding;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueContactPoint?: ContactPoint;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueCount?: Count;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueDistance?: Distance;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueDuration?: Duration;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueHumanName?: HumanName;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueIdentifier?: Identifier;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueMoney?: Money;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValuePeriod?: Period;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueQuantity?: Quantity;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueRange?: Range;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueRatio?: Ratio;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueReference?: Reference;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueSampledData?: SampledData;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueSignature?: Signature;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueTiming?: Timing;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueContactDetail?: ContactDetail;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueRelatedArtifact?: RelatedArtifact;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueUsageContext?: UsageContext;
    /**
     * A value to use if there is no existing value in the source object.
     */
    defaultValueMeta?: Meta;
    /**
     * Optional field for this source.
     */
    element?: string;
    /**
     * How to handle the list mode for this element.
     */
    listMode?: string;
    /**
     * Named context for field, if a field is specified.
     */
    variable?: string;
    /**
     * FHIRPath expression  &ndash; must be true or the rule does not apply.
     */
    condition?: string;
    /**
     * FHIRPath expression  &ndash; must be true or the mapping engine throws an error instead of completing.
     */
    check?: string;
    /**
     * A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found.
     */
    logMessage?: string;
};

export type StructureMap_Group_Rule_Target = BackboneElement & {
    /**
     * Type or variable this rule applies to.
     */
    context?: string;
    /**
     * How to interpret the context.
     */
    contextType?: string;
    /**
     * Field to create in the context.
     */
    element?: string;
    /**
     * Named context for field, if desired, and a field is specified.
     */
    variable?: string;
    listMode?: string[];
    /**
     * Internal rule reference for shared list items.
     */
    listRuleId?: string;
    /**
     * How the data is copied / created.
     */
    transform?: string;
    parameter?: StructureMap_Group_Rule_Target_Parameter[];
};

export type StructureMap_Group_Rule_Target_Parameter = BackboneElement & {
    /**
     * Parameter value &ndash; variable or literal.
     */
    valueId?: string;
    /**
     * Parameter value &ndash; variable or literal.
     */
    valueString?: string;
    /**
     * Parameter value &ndash; variable or literal.
     */
    valueBoolean?: boolean;
    /**
     * Parameter value &ndash; variable or literal.
     */
    valueInteger?: number;
    /**
     * Parameter value &ndash; variable or literal.
     */
    valueDecimal?: number;
};

export type StructureMap_Structure = BackboneElement & {
    /**
     * The canonical reference to the structure.
     */
    url: string;
    /**
     * How the referenced structure is used in this mapping.
     */
    mode: string;
    /**
     * The name used for this type in the map.
     */
    alias?: string;
    /**
     * Documentation that describes how the structure is used in the mapping.
     */
    documentation?: string;
};

export type Contributor = Element & {
    /**
     * The type of contributor.
     */
    type: string;
    /**
     * The name of the individual or organization responsible for the contribution.
     */
    name: string;
    contact?: ContactDetail[];
};

export type Population = BackboneElement & {
    /**
     * The age of the specific population.
     */
    ageRange?: Range;
    /**
     * The age of the specific population.
     */
    ageCodeableConcept?: CodeableConcept;
    /**
     * The gender of the specific population.
     */
    gender?: CodeableConcept;
    /**
     * Race of the specific population.
     */
    race?: CodeableConcept;
    /**
     * The existing physiological conditions of the specific population to which this applies.
     */
    physiologicalCondition?: CodeableConcept;
};

export type Subscription = DomainResource & {
    /**
     * The status of the subscription, which marks the server state for managing the subscription.
     */
    status: string;
    contact?: ContactPoint[];
    /**
     * The time for the server to turn the subscription off.
     */
    end?: string;
    /**
     * A description of why this subscription is defined.
     */
    reason: string;
    /**
     * The rules that the server should use to determine when to generate notifications for this subscription.
     */
    criteria: string;
    /**
     * A record of the last error that occurred when the server processed a notification.
     */
    error?: string;
    /**
     * Details where to send notifications when resources are received that meet the criteria.
     */
    channel: Subscription_Channel;
};

export type Subscription_Channel = BackboneElement & {
    /**
     * The type of channel to send notifications on.
     */
    type: string;
    /**
     * The url that describes the actual end&ndash;point to send messages to.
     */
    endpoint?: string;
    /**
     * The mime type to send the payload in &ndash; either application/fhir+xml, or application/fhir+json. If the payload is not present, then there is no payload in the notification, just a notification. The mime type "text/plain" may also be used for Email and SMS subscriptions.
     */
    payload?: string;
    header?: string[];
};

export type SubscriptionStatus = DomainResource & {
    /**
     * The status of the subscription, which marks the server state for managing the subscription.
     */
    status?: string;
    /**
     * The type of event being conveyed with this notificaiton.
     */
    type: string;
    /**
     * The total number of actual events which have been generated since the Subscription was created (inclusive of this notification) &ndash; regardless of how many have been successfully communicated.  This number is NOT incremented for handshake and heartbeat notifications.
     */
    eventsSinceSubscriptionStart?: string;
    notificationEvent?: SubscriptionStatus_NotificationEvent[];
    /**
     * The reference to the Subscription which generated this notification.
     */
    subscription: Reference;
    /**
     * The reference to the SubscriptionTopic for the Subscription which generated this notification.
     */
    topic?: string;
    error?: CodeableConcept[];
};

export type SubscriptionStatus_NotificationEvent = BackboneElement & {
    /**
     * The sequential number of this event in this subscription context. Note that this value is a 64&ndash;bit integer value, encoded as a string.
     */
    eventNumber: string;
    /**
     * The actual time this event occured on the server.
     */
    timestamp?: string;
    /**
     * The focus of this event. While this will usually be a reference to the focus resource of the event, it MAY contain a reference to a non&ndash;FHIR object.
     */
    focus?: Reference;
    additionalContext?: Reference[];
};

export type SubscriptionTopic = DomainResource & {
    /**
     * An absolute URI that is used to identify this subscription topic when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this subscription topic is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the subscription topic is stored on different servers.
     */
    url: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the subscription topic when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Topic author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable.
     */
    version?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the SubscriptionTopic, for example, "admission".
     */
    title?: string;
    derivedFrom?: string[];
    /**
     * The current state of the SubscriptionTopic.
     */
    status: string;
    /**
     * A flag to indicate that this TopSubscriptionTopicic is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * For draft definitions, indicates the date of initial creation.  For active definitions, represents the date of activation.  For withdrawn definitions, indicates the date of withdrawal.
     */
    date?: string;
    /**
     * Helps establish the "authority/credibility" of the SubscriptionTopic.  May also allow for contact.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the Topic from the consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explains why this Topic is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the SubscriptionTopic and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SubscriptionTopic.
     */
    copyright?: string;
    /**
     * The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.
     */
    approvalDate?: string;
    /**
     * The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.
     */
    lastReviewDate?: string;
    /**
     * The period during which the SubscriptionTopic content was or is planned to be effective.
     */
    effectivePeriod?: Period;
    resourceTrigger?: SubscriptionTopic_ResourceTrigger[];
    eventTrigger?: SubscriptionTopic_EventTrigger[];
    canFilterBy?: SubscriptionTopic_CanFilterBy[];
    notificationShape?: SubscriptionTopic_NotificationShape[];
};

export type SubscriptionTopic_CanFilterBy = BackboneElement & {
    /**
     * Description of how this filtering parameter is intended to be used.
     */
    description?: string;
    /**
     * URL of the Resource that is the type used in this filter. This is the "focus" of the topic (or one of them if there are more than one). It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present.
     */
    resource?: string;
    /**
     * Either the canonical URL to a search parameter (like "http://hl7.org/fhir/SearchParameter/encounter&ndash;patient") or topic&ndash;defined parameter (like "hub.event") which is a label for the filter.
     */
    filterParameter: string;
    /**
     * Either the canonical URL to a search parameter (like "http://hl7.org/fhir/SearchParameter/encounter&ndash;patient") or the officially&ndash;defined URI for a shared filter concept (like "http://example.org/concepts/shared&ndash;common&ndash;event").
     */
    filterDefinition?: string;
    modifier?: string[];
};

export type SubscriptionTopic_EventTrigger = BackboneElement & {
    /**
     * The human readable description of an event to trigger a notification for the SubscriptionTopic &ndash; for example, "Patient Admission, as defined in HL7v2 via message ADT^A01". Multiple values are considered OR joined (e.g., matching any single event listed).
     */
    description?: string;
    /**
     * A well&ndash;defined event which can be used to trigger notifications from the SubscriptionTopic.
     */
    event: CodeableConcept;
    /**
     * URL of the Resource that is the focus type used in this event trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href="elementdefinition&ndash;definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
     */
    resource: string;
};

export type SubscriptionTopic_NotificationShape = BackboneElement & {
    /**
     * URL of the Resource that is the type used in this shape. This is the "focus" of the topic (or one of them if there are more than one) and the root resource for this shape definition. It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present.
     */
    resource: string;
    include?: string[];
    revInclude?: string[];
};

export type SubscriptionTopic_ResourceTrigger = BackboneElement & {
    /**
     * The human readable description of this resource trigger for the SubscriptionTopic &ndash;  for example, "An Encounter enters the 'in&ndash;progress' state".
     */
    description?: string;
    /**
     * URL of the Resource that is the type used in this resource trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, "Patient" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href="elementdefinition&ndash;definitions.html#ElementDefinition.type.code">ElementDefinition.type.code</a>.
     */
    resource: string;
    supportedInteraction?: string[];
    /**
     * The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic.
     */
    queryCriteria?: SubscriptionTopic_ResourceTrigger_QueryCriteria;
    /**
     * The FHIRPath based rules that the server should use to determine when to trigger a notification for this topic.
     */
    fhirPathCriteria?: string;
};

export type SubscriptionTopic_ResourceTrigger_QueryCriteria =
    BackboneElement & {
        /**
         * The FHIR query based rules are applied to the previous resource state (e.g., state before an update).
         */
        previous?: string;
        /**
         * For "create" interactions, should the "previous" criteria count as an automatic pass or an automatic fail.
         */
        resultForCreate?: string;
        /**
         * The FHIR query based rules are applied to the current resource state (e.g., state after an update).
         */
        current?: string;
        /**
         * For "delete" interactions, should the "current" criteria count as an automatic pass or an automatic fail.
         */
        resultForDelete?: string;
        /**
         * If set to true, both current and previous criteria must evaluate true to  trigger a notification for this topic.  Otherwise a notification for this topic will be triggered if either one evaluates to true.
         */
        requireBoth?: boolean;
    };

export type Substance = DomainResource & {
    identifier?: Identifier[];
    /**
     * A code to indicate if the substance is actively used.
     */
    status?: string;
    category?: CodeableConcept[];
    /**
     * A code (or set of codes) that identify this substance.
     */
    code: CodeableConcept;
    /**
     * A description of the substance &ndash; its appearance, handling requirements, and other usage notes.
     */
    description?: string;
    instance?: Substance_Instance[];
    ingredient?: Substance_Ingredient[];
};

export type Substance_Ingredient = BackboneElement & {
    /**
     * The amount of the ingredient in the substance &ndash; a concentration ratio.
     */
    quantity?: Ratio;
    /**
     * Another substance that is a component of this substance.
     */
    substanceCodeableConcept?: CodeableConcept;
    /**
     * Another substance that is a component of this substance.
     */
    substanceReference?: Reference;
};

export type Substance_Instance = BackboneElement & {
    /**
     * Identifier associated with the package/container (usually a label affixed directly).
     */
    identifier?: Identifier;
    /**
     * When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.
     */
    expiry?: string;
    /**
     * The amount of the substance.
     */
    quantity?: SimpleQuantity;
};

export type SubstanceDefinition = DomainResource & {
    identifier?: Identifier[];
    /**
     * A business level version identifier of the substance.
     */
    version?: string;
    /**
     * Status of substance within the catalogue e.g. active, retired.
     */
    status?: CodeableConcept;
    classification?: CodeableConcept[];
    /**
     * If the substance applies to human or veterinary use.
     */
    domain?: CodeableConcept;
    grade?: CodeableConcept[];
    /**
     * Textual description of the substance.
     */
    description?: string;
    informationSource?: Reference[];
    note?: Annotation[];
    manufacturer?: Reference[];
    supplier?: Reference[];
    moiety?: SubstanceDefinition_Moiety[];
    property?: SubstanceDefinition_Property[];
    molecularWeight?: SubstanceDefinition_MolecularWeight[];
    /**
     * Structural information.
     */
    structure?: SubstanceDefinition_Structure;
    code?: SubstanceDefinition_Code[];
    name?: SubstanceDefinition_Name[];
    relationship?: SubstanceDefinition_Relationship[];
    /**
     * Material or taxonomic/anatomical source for the substance.
     */
    sourceMaterial?: SubstanceDefinition_SourceMaterial;
};

export type SubstanceDefinition_Code = BackboneElement & {
    /**
     * The specific code.
     */
    code?: CodeableConcept;
    /**
     * Status of the code assignment, for example 'provisional', 'approved'.
     */
    status?: CodeableConcept;
    /**
     * The date at which the code status was changed as part of the terminology maintenance.
     */
    statusDate?: string;
    note?: Annotation[];
    source?: Reference[];
};

export type SubstanceDefinition_Moiety = BackboneElement & {
    /**
     * Role that the moiety is playing.
     */
    role?: CodeableConcept;
    /**
     * Identifier by which this moiety substance is known.
     */
    identifier?: Identifier;
    /**
     * Textual name for this moiety substance.
     */
    name?: string;
    /**
     * Stereochemistry type.
     */
    stereochemistry?: CodeableConcept;
    /**
     * Optical activity type.
     */
    opticalActivity?: CodeableConcept;
    /**
     * Molecular formula for this moiety of this substance, typically using the Hill system.
     */
    molecularFormula?: string;
    /**
     * Quantitative value for this moiety.
     */
    amountQuantity?: Quantity;
    /**
     * Quantitative value for this moiety.
     */
    amountString?: string;
    /**
     * The measurement type of the quantitative value. In capturing the actual relative amounts of substances or molecular fragments it may be necessary to indicate whether the amount refers to, for example, a mole ratio or weight ratio.
     */
    measurementType?: CodeableConcept;
};

export type SubstanceDefinition_MolecularWeight = BackboneElement & {
    /**
     * The method by which the molecular weight was determined.
     */
    method?: CodeableConcept;
    /**
     * Type of molecular weight such as exact, average (also known as. number average), weight average.
     */
    type?: CodeableConcept;
    /**
     * Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
     */
    amount: Quantity;
};

export type SubstanceDefinition_Name = BackboneElement & {
    /**
     * The actual name.
     */
    name: string;
    /**
     * Name type, for example 'systematic',  'scientific, 'brand'.
     */
    type?: CodeableConcept;
    /**
     * The status of the name, for example 'current', 'proposed'.
     */
    status?: CodeableConcept;
    /**
     * If this is the preferred name for this substance.
     */
    preferred?: boolean;
    language?: CodeableConcept[];
    domain?: CodeableConcept[];
    jurisdiction?: CodeableConcept[];
    synonym?: SubstanceDefinition_Name[];
    translation?: SubstanceDefinition_Name[];
    official?: SubstanceDefinition_Name_Official[];
    source?: Reference[];
};

export type SubstanceDefinition_Name_Official = BackboneElement & {
    /**
     * Which authority uses this official name.
     */
    authority?: CodeableConcept;
    /**
     * The status of the official name, for example 'draft', 'active', 'retired'.
     */
    status?: CodeableConcept;
    /**
     * Date of the official name change.
     */
    date?: string;
};

export type SubstanceDefinition_Property = BackboneElement & {
    /**
     * A code expressing the type of property.
     */
    type: CodeableConcept;
    /**
     * A value for the property.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * A value for the property.
     */
    valueQuantity?: Quantity;
    /**
     * A value for the property.
     */
    valueDate?: string;
    /**
     * A value for the property.
     */
    valueBoolean?: boolean;
    /**
     * A value for the property.
     */
    valueAttachment?: Attachment;
};

export type SubstanceDefinition_Relationship = BackboneElement & {
    /**
     * A pointer to another substance, as a resource or just a representational code.
     */
    substanceDefinitionReference?: Reference;
    /**
     * A pointer to another substance, as a resource or just a representational code.
     */
    substanceDefinitionCodeableConcept?: CodeableConcept;
    /**
     * For example "salt to parent", "active moiety", "starting material", "polymorph", "impurity of".
     */
    type: CodeableConcept;
    /**
     * For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
     */
    isDefining?: boolean;
    /**
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountQuantity?: Quantity;
    /**
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountRatio?: Ratio;
    /**
     * A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
     */
    amountString?: string;
    /**
     * For use when the numeric has an uncertain range.
     */
    ratioHighLimitAmount?: Ratio;
    /**
     * An operator for the amount, for example "average", "approximately", "less than".
     */
    comparator?: CodeableConcept;
    source?: Reference[];
};

export type SubstanceDefinition_SourceMaterial = BackboneElement & {
    /**
     * A classification that provides the origin of the raw material. Example: cat hair would be an Animal source type.
     */
    type?: CodeableConcept;
    /**
     * The genus of an organism, typically referring to the Latin epithet of the genus element of the plant/animal scientific name.
     */
    genus?: CodeableConcept;
    /**
     * The species of an organism, typically referring to the Latin epithet of the species of the plant/animal.
     */
    species?: CodeableConcept;
    /**
     * An anatomical origin of the source material within an organism.
     */
    part?: CodeableConcept;
    countryOfOrigin?: CodeableConcept[];
};

export type SubstanceDefinition_Structure = BackboneElement & {
    /**
     * Stereochemistry type.
     */
    stereochemistry?: CodeableConcept;
    /**
     * Optical activity type.
     */
    opticalActivity?: CodeableConcept;
    /**
     * Molecular formula of this substance, typically using the Hill system.
     */
    molecularFormula?: string;
    /**
     * Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
     */
    molecularFormulaByMoiety?: string;
    /**
     * The molecular weight or weight range (for proteins, polymers or nucleic acids).
     */
    molecularWeight?: SubstanceDefinition_MolecularWeight;
    technique?: CodeableConcept[];
    sourceDocument?: Reference[];
    representation?: SubstanceDefinition_Structure_Representation[];
};

export type SubstanceDefinition_Structure_Representation = BackboneElement & {
    /**
     * The kind of structural representation (e.g. full, partial).
     */
    type?: CodeableConcept;
    /**
     * The structural representation or characterization as a text string in a standard format.
     */
    representation?: string;
    /**
     * The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The logical content type rather than the physical file format of a document.
     */
    format?: CodeableConcept;
    /**
     * An attached file with the structural representation or characterization e.g. a molecular structure graphic of the substance, a JCAMP or AnIML file.
     */
    document?: Reference;
};

export type Task = DomainResource & {
    identifier?: Identifier[];
    /**
     * The URL pointing to a *FHIR*&ndash;defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
     */
    instantiatesCanonical?: string;
    /**
     * The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
     */
    instantiatesUri?: string;
    basedOn?: Reference[];
    /**
     * An identifier that links together multiple tasks and other requests that were created in the same context.
     */
    groupIdentifier?: Identifier;
    partOf?: Reference[];
    /**
     * The current status of the task.
     */
    status: string;
    /**
     * An explanation as to why this task is held, failed, was refused, etc.
     */
    statusReason?: CodeableConcept;
    /**
     * Contains business&ndash;specific nuances of the business state.
     */
    businessStatus?: CodeableConcept;
    /**
     * Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
     */
    intent: string;
    /**
     * Indicates how quickly the Task should be addressed with respect to other requests.
     */
    priority?: string;
    /**
     * A name or code (or both) briefly describing what the task involves.
     */
    code?: CodeableConcept;
    /**
     * A free&ndash;text description of what is to be performed.
     */
    description?: string;
    /**
     * The request being actioned or the resource being manipulated by this task.
     */
    focus?: Reference;
    /**
     * The entity who benefits from the performance of the service specified in the task (e.g., the patient).
     */
    for?: Reference;
    /**
     * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
     */
    encounter?: Reference;
    /**
     * Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
     */
    executionPeriod?: Period;
    /**
     * The date and time this task was created.
     */
    authoredOn?: string;
    /**
     * The date and time of last modification to this task.
     */
    lastModified?: string;
    /**
     * The creator of the task.
     */
    requester?: Reference;
    performerType?: CodeableConcept[];
    /**
     * Individual organization or Device currently responsible for task execution.
     */
    owner?: Reference;
    /**
     * Principal physical location where the this task is performed.
     */
    location?: Reference;
    /**
     * A description or code indicating why this task needs to be performed.
     */
    reasonCode?: CodeableConcept;
    /**
     * A resource reference indicating why this task needs to be performed.
     */
    reasonReference?: Reference;
    insurance?: Reference[];
    note?: Annotation[];
    relevantHistory?: Reference[];
    /**
     * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
     */
    restriction?: Task_Restriction;
    input?: Task_Input[];
    output?: Task_Output[];
};

export type Task_Input = BackboneElement & {
    /**
     * A code or description indicating how the input is intended to be used as part of the task execution.
     */
    type: CodeableConcept;
    /**
     * The value of the input parameter as a basic type.
     */
    valueBase64Binary?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueBoolean?: boolean;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCanonical?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCode?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDate?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDateTime?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDecimal?: number;
    /**
     * The value of the input parameter as a basic type.
     */
    valueId?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueInstant?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueInteger?: number;
    /**
     * The value of the input parameter as a basic type.
     */
    valueMarkdown?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueOid?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valuePositiveInt?: number;
    /**
     * The value of the input parameter as a basic type.
     */
    valueString?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueTime?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUnsignedInt?: number;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUri?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUrl?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUuid?: string;
    /**
     * The value of the input parameter as a basic type.
     */
    valueAddress?: Address;
    /**
     * The value of the input parameter as a basic type.
     */
    valueAge?: Age;
    /**
     * The value of the input parameter as a basic type.
     */
    valueAnnotation?: Annotation;
    /**
     * The value of the input parameter as a basic type.
     */
    valueAttachment?: Attachment;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCoding?: Coding;
    /**
     * The value of the input parameter as a basic type.
     */
    valueContactPoint?: ContactPoint;
    /**
     * The value of the input parameter as a basic type.
     */
    valueCount?: Count;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDistance?: Distance;
    /**
     * The value of the input parameter as a basic type.
     */
    valueDuration?: Duration;
    /**
     * The value of the input parameter as a basic type.
     */
    valueHumanName?: HumanName;
    /**
     * The value of the input parameter as a basic type.
     */
    valueIdentifier?: Identifier;
    /**
     * The value of the input parameter as a basic type.
     */
    valueMoney?: Money;
    /**
     * The value of the input parameter as a basic type.
     */
    valuePeriod?: Period;
    /**
     * The value of the input parameter as a basic type.
     */
    valueQuantity?: Quantity;
    /**
     * The value of the input parameter as a basic type.
     */
    valueRange?: Range;
    /**
     * The value of the input parameter as a basic type.
     */
    valueRatio?: Ratio;
    /**
     * The value of the input parameter as a basic type.
     */
    valueReference?: Reference;
    /**
     * The value of the input parameter as a basic type.
     */
    valueSampledData?: SampledData;
    /**
     * The value of the input parameter as a basic type.
     */
    valueSignature?: Signature;
    /**
     * The value of the input parameter as a basic type.
     */
    valueTiming?: Timing;
    /**
     * The value of the input parameter as a basic type.
     */
    valueContactDetail?: ContactDetail;
    /**
     * The value of the input parameter as a basic type.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * The value of the input parameter as a basic type.
     */
    valueUsageContext?: UsageContext;
    /**
     * The value of the input parameter as a basic type.
     */
    valueMeta?: Meta;
};

export type Task_Output = BackboneElement & {
    /**
     * The name of the Output parameter.
     */
    type: CodeableConcept;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueBase64Binary?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueBoolean?: boolean;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCanonical?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCode?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDate?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDateTime?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDecimal?: number;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueId?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueInstant?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueInteger?: number;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueMarkdown?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueOid?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valuePositiveInt?: number;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueString?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueTime?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUnsignedInt?: number;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUri?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUrl?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUuid?: string;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueAddress?: Address;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueAge?: Age;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueAnnotation?: Annotation;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueAttachment?: Attachment;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCoding?: Coding;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueContactPoint?: ContactPoint;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueCount?: Count;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDistance?: Distance;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueDuration?: Duration;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueHumanName?: HumanName;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueIdentifier?: Identifier;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueMoney?: Money;
    /**
     * The value of the Output parameter as a basic type.
     */
    valuePeriod?: Period;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueQuantity?: Quantity;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueRange?: Range;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueRatio?: Ratio;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueReference?: Reference;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueSampledData?: SampledData;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueSignature?: Signature;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueTiming?: Timing;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueContactDetail?: ContactDetail;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueUsageContext?: UsageContext;
    /**
     * The value of the Output parameter as a basic type.
     */
    valueMeta?: Meta;
};

export type Task_Restriction = BackboneElement & {
    /**
     * Indicates the number of times the requested action should occur.
     */
    repetitions?: number;
    /**
     * Over what time&ndash;period is fulfillment sought.
     */
    period?: Period;
    recipient?: Reference[];
};

export type TerminologyCapabilities = DomainResource & {
    /**
     * An absolute URI that is used to identify this terminology capabilities when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this terminology capabilities is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the terminology capabilities is stored on different servers.
     */
    url?: string;
    /**
     * The identifier that is used to identify this version of the terminology capabilities when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the terminology capabilities author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the terminology capabilities. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the terminology capabilities.
     */
    title?: string;
    /**
     * The status of this terminology capabilities. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this terminology capabilities is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the terminology capabilities was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the terminology capabilities changes.
     */
    date: string;
    /**
     * The name of the organization or individual that published the terminology capabilities.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the terminology capabilities from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this terminology capabilities is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities.
     */
    copyright?: string;
    /**
     * The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
     */
    kind: string;
    /**
     * Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.
     */
    software?: TerminologyCapabilities_Software;
    /**
     * Identifies a specific implementation instance that is described by the terminology capability statement &ndash; i.e. a particular installation, rather than the capabilities of a software program.
     */
    implementation?: TerminologyCapabilities_Implementation;
    /**
     * Whether the server supports lockedDate.
     */
    lockedDate?: boolean;
    codeSystem?: TerminologyCapabilities_CodeSystem[];
    /**
     * Information about the [ValueSet/$expand](valueset&ndash;operation&ndash;expand.html) operation.
     */
    expansion?: TerminologyCapabilities_Expansion;
    /**
     * The degree to which the server supports the code search parameter on ValueSet, if it is supported.
     */
    codeSearch?: string;
    /**
     * Information about the [ValueSet/$validate&ndash;code](valueset&ndash;operation&ndash;validate&ndash;code.html) operation.
     */
    validateCode?: TerminologyCapabilities_ValidateCode;
    /**
     * Information about the [ConceptMap/$translate](conceptmap&ndash;operation&ndash;translate.html) operation.
     */
    translation?: TerminologyCapabilities_Translation;
    /**
     * Whether the $closure operation is supported.
     */
    closure?: TerminologyCapabilities_Closure;
};

export type TerminologyCapabilities_Closure = BackboneElement & {
    /**
     * If cross&ndash;system closure is supported.
     */
    translation?: boolean;
};

export type TerminologyCapabilities_CodeSystem = BackboneElement & {
    /**
     * URI for the Code System.
     */
    uri?: string;
    version?: TerminologyCapabilities_CodeSystem_Version[];
    /**
     * True if subsumption is supported for this version of the code system.
     */
    subsumption?: boolean;
};

export type TerminologyCapabilities_CodeSystem_Version = BackboneElement & {
    /**
     * For version&ndash;less code systems, there should be a single version with no identifier.
     */
    code?: string;
    /**
     * If this is the default version for this code system.
     */
    isDefault?: boolean;
    /**
     * If the compositional grammar defined by the code system is supported.
     */
    compositional?: boolean;
    language?: string[];
    filter?: TerminologyCapabilities_CodeSystem_Version_Filter[];
    property?: string[];
};

export type TerminologyCapabilities_CodeSystem_Version_Filter =
    BackboneElement & {
        /**
         * Code of the property supported.
         */
        code: string;
        op: string[];
    };

export type TerminologyCapabilities_Expansion = BackboneElement & {
    /**
     * Whether the server can return nested value sets.
     */
    hierarchical?: boolean;
    /**
     * Whether the server supports paging on expansion.
     */
    paging?: boolean;
    /**
     * Allow request for incomplete expansions?
     */
    incomplete?: boolean;
    parameter?: TerminologyCapabilities_Expansion_Parameter[];
    /**
     * Documentation about text searching works.
     */
    textFilter?: string;
};

export type TerminologyCapabilities_Expansion_Parameter = BackboneElement & {
    /**
     * Expansion Parameter name.
     */
    name: string;
    /**
     * Description of support for parameter.
     */
    documentation?: string;
};

export type TerminologyCapabilities_Implementation = BackboneElement & {
    /**
     * Information about the specific installation that this terminology capability statement relates to.
     */
    description: string;
    /**
     * An absolute base URL for the implementation.
     */
    url?: string;
};

export type TerminologyCapabilities_Software = BackboneElement & {
    /**
     * Name the software is known by.
     */
    name: string;
    /**
     * The version identifier for the software covered by this statement.
     */
    version?: string;
};

export type TerminologyCapabilities_Translation = BackboneElement & {
    /**
     * Whether the client must identify the map.
     */
    needsMap: boolean;
};

export type TerminologyCapabilities_ValidateCode = BackboneElement & {
    /**
     * Whether translations are validated.
     */
    translations: boolean;
};

export type TestReport = DomainResource & {
    /**
     * Identifier for the TestScript assigned for external purposes outside the context of FHIR.
     */
    identifier?: Identifier;
    /**
     * A free text natural language name identifying the executed TestScript.
     */
    name?: string;
    /**
     * The current state of this test report.
     */
    status: string;
    /**
     * Ideally this is an absolute URL that is used to identify the version&ndash;specific TestScript that was executed, matching the `TestScript.url`.
     */
    testScript: Reference;
    /**
     * The overall result from the execution of the TestScript.
     */
    result: string;
    /**
     * The final score (percentage of tests passed) resulting from the execution of the TestScript.
     */
    score?: number;
    /**
     * Name of the tester producing this report (Organization or individual).
     */
    tester?: string;
    /**
     * When the TestScript was executed and this TestReport was generated.
     */
    issued?: string;
    participant?: TestReport_Participant[];
    /**
     * The results of the series of required setup operations before the tests were executed.
     */
    setup?: TestReport_Setup;
    test?: TestReport_Test[];
    /**
     * The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
     */
    teardown?: TestReport_Teardown;
};

export type TestReport_Participant = BackboneElement & {
    /**
     * The type of participant.
     */
    type: string;
    /**
     * The uri of the participant. An absolute URL is preferred.
     */
    uri: string;
    /**
     * The display name of the participant.
     */
    display?: string;
};

export type TestReport_Setup = BackboneElement & {
    action: TestReport_Setup_Action[];
};

export type TestReport_Setup_Action = BackboneElement & {
    /**
     * The operation performed.
     */
    operation?: TestReport_Setup_Action_Operation;
    /**
     * The results of the assertion performed on the previous operations.
     */
    assert?: TestReport_Setup_Action_Assert;
};

export type TestReport_Setup_Action_Assert = BackboneElement & {
    /**
     * The result of this assertion.
     */
    result: string;
    /**
     * An explanatory message associated with the result.
     */
    message?: string;
    /**
     * A link to further details on the result.
     */
    detail?: string;
};

export type TestReport_Setup_Action_Operation = BackboneElement & {
    /**
     * The result of this operation.
     */
    result: string;
    /**
     * An explanatory message associated with the result.
     */
    message?: string;
    /**
     * A link to further details on the result.
     */
    detail?: string;
};

export type TestReport_Teardown = BackboneElement & {
    action: TestReport_Teardown_Action[];
};

export type TestReport_Teardown_Action = BackboneElement & {
    /**
     * The operation performed.
     */
    operation: TestReport_Setup_Action_Operation;
};

export type TestReport_Test = BackboneElement & {
    /**
     * The name of this test used for tracking/logging purposes by test engines.
     */
    name?: string;
    /**
     * A short description of the test used by test engines for tracking and reporting purposes.
     */
    description?: string;
    action: TestReport_Test_Action[];
};

export type TestReport_Test_Action = BackboneElement & {
    /**
     * The operation performed.
     */
    operation?: TestReport_Setup_Action_Operation;
    /**
     * The results of the assertion performed on the previous operations.
     */
    assert?: TestReport_Setup_Action_Assert;
};

export type TestScript = DomainResource & {
    /**
     * An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this test script is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test script is stored on different servers.
     */
    url: string;
    /**
     * A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Identifier;
    /**
     * The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the test script.
     */
    title?: string;
    /**
     * The status of this test script. Enables tracking the life&ndash;cycle of the content.
     */
    status: string;
    /**
     * A Boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date  (and optionally time) when the test script was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes.
     */
    date?: string;
    /**
     * The name of the organization or individual that published the test script.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the test script from a consumer's perspective.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * Explanation of why this test script is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
     */
    copyright?: string;
    origin?: TestScript_Origin[];
    destination?: TestScript_Destination[];
    /**
     * The required capability must exist and are assumed to function correctly on the FHIR server being tested.
     */
    metadata?: TestScript_Metadata;
    fixture?: TestScript_Fixture[];
    profile?: Reference[];
    variable?: TestScript_Variable[];
    /**
     * A series of required setup operations before tests are executed.
     */
    setup?: TestScript_Setup;
    test?: TestScript_Test[];
    /**
     * A series of operations required to clean up after all the tests are executed (successfully or otherwise).
     */
    teardown?: TestScript_Teardown;
};

export type TestScript_Destination = BackboneElement & {
    /**
     * Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1.
     */
    index: number;
    /**
     * The type of destination profile the test system supports.
     */
    profile: Coding;
};

export type TestScript_Fixture = BackboneElement & {
    /**
     * Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
     */
    autocreate: boolean;
    /**
     * Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
     */
    autodelete: boolean;
    /**
     * Reference to the resource (containing the contents of the resource needed for operations).
     */
    resource?: Reference;
};

export type TestScript_Metadata = BackboneElement & {
    link?: TestScript_Metadata_Link[];
    capability: TestScript_Metadata_Capability[];
};

export type TestScript_Metadata_Capability = BackboneElement & {
    /**
     * Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
     */
    required: boolean;
    /**
     * Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
     */
    validated: boolean;
    /**
     * Description of the capabilities that this test script is requiring the server to support.
     */
    description?: string;
    origin?: number[];
    /**
     * Which server these requirements apply to.
     */
    destination?: number;
    link?: string[];
    /**
     * Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.
     */
    capabilities: string;
};

export type TestScript_Metadata_Link = BackboneElement & {
    /**
     * URL to a particular requirement or feature within the FHIR specification.
     */
    url: string;
    /**
     * Short description of the link.
     */
    description?: string;
};

export type TestScript_Origin = BackboneElement & {
    /**
     * Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1.
     */
    index: number;
    /**
     * The type of origin profile the test system supports.
     */
    profile: Coding;
};

export type TestScript_Setup = BackboneElement & {
    action: TestScript_Setup_Action[];
};

export type TestScript_Setup_Action = BackboneElement & {
    /**
     * The operation to perform.
     */
    operation?: TestScript_Setup_Action_Operation;
    /**
     * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
     */
    assert?: TestScript_Setup_Action_Assert;
};

export type TestScript_Setup_Action_Assert = BackboneElement & {
    /**
     * The label would be used for tracking/logging purposes by test engines.
     */
    label?: string;
    /**
     * The description would be used by test engines for tracking and reporting purposes.
     */
    description?: string;
    /**
     * The direction to use for the assertion.
     */
    direction?: string;
    /**
     * Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
     */
    compareToSourceId?: string;
    /**
     * The FHIRPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
     */
    compareToSourceExpression?: string;
    /**
     * XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
     */
    compareToSourcePath?: string;
    /**
     * The mime&ndash;type contents to compare against the request or response message 'Content&ndash;Type' header.
     */
    contentType?: string;
    /**
     * The FHIRPath expression to be evaluated against the request or response message contents &ndash; HTTP headers and payload.
     */
    expression?: string;
    /**
     * The HTTP header field name e.g. 'Location'.
     */
    headerField?: string;
    /**
     * The ID of a fixture.  Asserts that the response contains at a minimum the fixture specified by minimumId.
     */
    minimumId?: string;
    /**
     * Whether or not the test execution performs validation on the bundle navigation links.
     */
    navigationLinks?: boolean;
    /**
     * The operator type defines the conditional behavior of the assert. If not defined, the default is equals.
     */
    operator?: string;
    /**
     * The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
     */
    path?: string;
    /**
     * The request method or HTTP operation code to compare against that used by the client system under test.
     */
    requestMethod?: string;
    /**
     * The value to use in a comparison against the request URL path string.
     */
    requestURL?: string;
    /**
     * The type of the resource.  See http://build.fhir.org/resourcelist.html.
     */
    resource?: string;
    /**
     * okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
     */
    response?: string;
    /**
     * The value of the HTTP response code to be tested.
     */
    responseCode?: string;
    /**
     * Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
     */
    sourceId?: string;
    /**
     * The ID of the Profile to validate against.
     */
    validateProfileId?: string;
    /**
     * The value to compare to.
     */
    value?: string;
    /**
     * Whether or not the test execution will produce a warning only on error for this assert.
     */
    warningOnly: boolean;
};

export type TestScript_Setup_Action_Operation = BackboneElement & {
    /**
     * Server interaction or operation type.
     */
    type?: Coding;
    /**
     * The type of the resource.  See http://build.fhir.org/resourcelist.html.
     */
    resource?: string;
    /**
     * The label would be used for tracking/logging purposes by test engines.
     */
    label?: string;
    /**
     * The description would be used by test engines for tracking and reporting purposes.
     */
    description?: string;
    /**
     * The mime&ndash;type to use for RESTful operation in the 'Accept' header.
     */
    accept?: string;
    /**
     * The mime&ndash;type to use for RESTful operation in the 'Content&ndash;Type' header.
     */
    contentType?: string;
    /**
     * The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.
     */
    destination?: number;
    /**
     * Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
     */
    encodeRequestUrl: boolean;
    /**
     * The HTTP method the test engine MUST use for this operation regardless of any other operation details.
     */
    method?: string;
    /**
     * The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.
     */
    origin?: number;
    /**
     * Path plus parameters after [type].  Used to set parts of the request URL explicitly.
     */
    params?: string;
    requestHeader?: TestScript_Setup_Action_Operation_RequestHeader[];
    /**
     * The fixture id (maybe new) to map to the request.
     */
    requestId?: string;
    /**
     * The fixture id (maybe new) to map to the response.
     */
    responseId?: string;
    /**
     * The id of the fixture used as the body of a PUT or POST request.
     */
    sourceId?: string;
    /**
     * Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
     */
    targetId?: string;
    /**
     * Complete request URL.
     */
    url?: string;
};

export type TestScript_Setup_Action_Operation_RequestHeader =
    BackboneElement & {
        /**
         * The HTTP header field e.g. "Accept".
         */
        field: string;
        /**
         * The value of the header e.g. "application/fhir+xml".
         */
        value: string;
    };

export type TestScript_Teardown = BackboneElement & {
    action: TestScript_Teardown_Action[];
};

export type TestScript_Teardown_Action = BackboneElement & {
    /**
     * The operation to perform.
     */
    operation: TestScript_Setup_Action_Operation;
};

export type TestScript_Test = BackboneElement & {
    /**
     * The name of this test used for tracking/logging purposes by test engines.
     */
    name?: string;
    /**
     * A short description of the test used by test engines for tracking and reporting purposes.
     */
    description?: string;
    action: TestScript_Test_Action[];
};

export type TestScript_Test_Action = BackboneElement & {
    /**
     * The operation to perform.
     */
    operation?: TestScript_Setup_Action_Operation;
    /**
     * Evaluates the results of previous operations to determine if the server under test behaves appropriately.
     */
    assert?: TestScript_Setup_Action_Assert;
};

export type TestScript_Variable = BackboneElement & {
    /**
     * Descriptive name for this variable.
     */
    name: string;
    /**
     * A default, hard&ndash;coded, or user&ndash;defined value for this variable.
     */
    defaultValue?: string;
    /**
     * A free text natural language description of the variable and its purpose.
     */
    description?: string;
    /**
     * The FHIRPath expression to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
     */
    expression?: string;
    /**
     * Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
     */
    headerField?: string;
    /**
     * Displayable text string with hint help information to the user when entering a default value.
     */
    hint?: string;
    /**
     * XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.
     */
    path?: string;
    /**
     * Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
     */
    sourceId?: string;
};

export type ValueSet = DomainResource & {
    /**
     * An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.
     */
    url?: string;
    identifier?: Identifier[];
    /**
     * The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    version?: string;
    /**
     * A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    name?: string;
    /**
     * A short, descriptive, user&ndash;friendly title for the value set.
     */
    title?: string;
    /**
     * The status of this value set. Enables tracking the life&ndash;cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.
     */
    status: string;
    /**
     * A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    experimental?: boolean;
    /**
     * The date (and optionally time) when the value set was created or revised (e.g. the 'content logical definition').
     */
    date?: string;
    /**
     * The name of the organization or individual that published the value set.
     */
    publisher?: string;
    contact?: ContactDetail[];
    /**
     * A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.
     */
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    /**
     * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
     */
    immutable?: boolean;
    /**
     * Explanation of why this value set is needed and why it has been designed as it has.
     */
    purpose?: string;
    /**
     * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
     */
    copyright?: string;
    /**
     * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
     */
    compose?: ValueSet_Compose;
    /**
     * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
     */
    expansion?: ValueSet_Expansion;
};

export type ValueSet_Compose = BackboneElement & {
    /**
     * The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.
     */
    lockedDate?: string;
    /**
     * Whether inactive codes &ndash; codes that are not approved for current use &ndash; are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).
     */
    inactive?: boolean;
    include: ValueSet_Compose_Include[];
    exclude?: ValueSet_Compose_Include[];
};

export type ValueSet_Compose_Include = BackboneElement & {
    /**
     * An absolute URI which is the code system from which the selected codes come from.
     */
    system?: string;
    /**
     * The version of the code system that the codes are selected from, or the special version '*' for all versions.
     */
    version?: string;
    concept?: ValueSet_Compose_Include_Concept[];
    filter?: ValueSet_Compose_Include_Filter[];
    valueSet?: string[];
};

export type ValueSet_Compose_Include_Concept = BackboneElement & {
    /**
     * Specifies a code for the concept to be included or excluded.
     */
    code: string;
    /**
     * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
     */
    display?: string;
    designation?: ValueSet_Compose_Include_Concept_Designation[];
};

export type ValueSet_Compose_Include_Concept_Designation = BackboneElement & {
    /**
     * The language this designation is defined for.
     */
    language?: string;
    /**
     * A code that represents types of uses of designations.
     */
    use?: Coding;
    /**
     * The text value for this designation.
     */
    value: string;
};

export type ValueSet_Compose_Include_Filter = BackboneElement & {
    /**
     * A code that identifies a property or a filter defined in the code system.
     */
    property: string;
    /**
     * The kind of operation to perform as a part of the filter criteria.
     */
    op: string;
    /**
     * The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.
     */
    value: string;
};

export type ValueSet_Expansion = BackboneElement & {
    /**
     * An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re&ndash;use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.
     */
    identifier?: string;
    /**
     * The time at which the expansion was produced by the expanding system.
     */
    timestamp: string;
    /**
     * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
     */
    total?: number;
    /**
     * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.
     */
    offset?: number;
    parameter?: ValueSet_Expansion_Parameter[];
    contains?: ValueSet_Expansion_Contains[];
};

export type ValueSet_Expansion_Contains = BackboneElement & {
    /**
     * An absolute URI which is the code system in which the code for this item in the expansion is defined.
     */
    system?: string;
    /**
     * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
     */
    abstract?: boolean;
    /**
     * If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether an concept is inactive (and it may depend on the context of use).
     */
    inactive?: boolean;
    /**
     * The version of the code system from this code was taken. Note that a well&ndash;maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
     */
    version?: string;
    /**
     * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
     */
    code?: string;
    /**
     * The recommended display for this item in the expansion.
     */
    display?: string;
    designation?: ValueSet_Compose_Include_Concept_Designation[];
    contains?: ValueSet_Expansion_Contains[];
};

export type ValueSet_Expansion_Parameter = BackboneElement & {
    /**
     * Name of the input parameter to the $expand operation; may be a server&ndash;assigned name for additional default or other server&ndash;supplied parameters used to control the expansion process.
     */
    name: string;
    /**
     * The value of the parameter.
     */
    valueString?: string;
    /**
     * The value of the parameter.
     */
    valueBoolean?: boolean;
    /**
     * The value of the parameter.
     */
    valueInteger?: number;
    /**
     * The value of the parameter.
     */
    valueDecimal?: number;
    /**
     * The value of the parameter.
     */
    valueUri?: string;
    /**
     * The value of the parameter.
     */
    valueCode?: string;
    /**
     * The value of the parameter.
     */
    valueDateTime?: string;
};

export type VerificationResult = DomainResource & {
    target?: Reference[];
    targetLocation?: string[];
    /**
     * The frequency with which the target must be validated (none; initial; periodic).
     */
    need?: CodeableConcept;
    /**
     * The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
     */
    status: string;
    /**
     * When the validation status was updated.
     */
    statusDate?: string;
    /**
     * What the target is validated against (nothing; primary source; multiple sources).
     */
    validationType?: CodeableConcept;
    validationProcess?: CodeableConcept[];
    /**
     * Frequency of revalidation.
     */
    frequency?: Timing;
    /**
     * The date/time validation was last completed (including failed validations).
     */
    lastPerformed?: string;
    /**
     * The date when target is next validated, if appropriate.
     */
    nextScheduled?: string;
    /**
     * The result if validation fails (fatal; warning; record only; none).
     */
    failureAction?: CodeableConcept;
    primarySource?: VerificationResult_PrimarySource[];
    /**
     * Information about the entity attesting to information.
     */
    attestation?: VerificationResult_Attestation;
    validator?: VerificationResult_Validator[];
};

export type VerificationResult_Attestation = BackboneElement & {
    /**
     * The individual or organization attesting to information.
     */
    who?: Reference;
    /**
     * When the who is asserting on behalf of another (organization or individual).
     */
    onBehalfOf?: Reference;
    /**
     * The method by which attested information was submitted/retrieved (manual; API; Push).
     */
    communicationMethod?: CodeableConcept;
    /**
     * The date the information was attested to.
     */
    date?: string;
    /**
     * A digital identity certificate associated with the attestation source.
     */
    sourceIdentityCertificate?: string;
    /**
     * A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.
     */
    proxyIdentityCertificate?: string;
    /**
     * Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.
     */
    proxySignature?: Signature;
    /**
     * Signed assertion by the attestation source that they have attested to the information.
     */
    sourceSignature?: Signature;
};

export type VerificationResult_PrimarySource = BackboneElement & {
    /**
     * Reference to the primary source.
     */
    who?: Reference;
    type?: CodeableConcept[];
    communicationMethod?: CodeableConcept[];
    /**
     * Status of the validation of the target against the primary source (successful; failed; unknown).
     */
    validationStatus?: CodeableConcept;
    /**
     * When the target was validated against the primary source.
     */
    validationDate?: string;
    /**
     * Ability of the primary source to push updates/alerts (yes; no; undetermined).
     */
    canPushUpdates?: CodeableConcept;
    pushTypeAvailable?: CodeableConcept[];
};

export type VerificationResult_Validator = BackboneElement & {
    /**
     * Reference to the organization validating information.
     */
    organization: Reference;
    /**
     * A digital identity certificate associated with the validator.
     */
    identityCertificate?: string;
    /**
     * Signed assertion by the validator that they have validated the information.
     */
    attestationSignature?: Signature;
};

export type Parameters_Parameter = BackboneElement & {
    /**
     * The name of the parameter (reference to the operation definition).
     */
    name: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueBase64Binary?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueBoolean?: boolean;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueCanonical?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueCode?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueDate?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueDateTime?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueDecimal?: number;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueId?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueInstant?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueInteger?: number;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueMarkdown?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueOid?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valuePositiveInt?: number;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueString?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueTime?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueUnsignedInt?: number;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueUri?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueUrl?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueUuid?: string;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueAddress?: Address;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueAge?: Age;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueAnnotation?: Annotation;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueAttachment?: Attachment;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueCodeableConcept?: CodeableConcept;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueCoding?: Coding;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueContactPoint?: ContactPoint;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueCount?: Count;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueDistance?: Distance;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueDuration?: Duration;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueHumanName?: HumanName;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueIdentifier?: Identifier;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueMoney?: Money;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valuePeriod?: Period;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueQuantity?: Quantity;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueRange?: Range;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueRatio?: Ratio;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueReference?: Reference;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueSampledData?: SampledData;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueSignature?: Signature;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueTiming?: Timing;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueContactDetail?: ContactDetail;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueRelatedArtifact?: RelatedArtifact;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueUsageContext?: UsageContext;
    /**
     * Conveys the content if the parameter is a data type.
     */
    valueMeta?: Meta;
    /**
     * If the parameter is a whole resource.
     */
    resource?: Resource;
    part?: Parameters_Parameter[];
};

export type SubmissionHistoryList = SubmissionHistory[];

export interface SubmissionHistory {
    /**
     * the ID for this submission
     */
    submissionId?: number;
    /**
     * the timestamp for this report submission
     */
    timestamp?: string;
    /**
     * the name of the sender account
     */
    sender?: string;
    /**
     * response given to the sender upon submission
     */
    httpStatus?: number;
    /**
     * the report uuid of this submission
     */
    id?: string;
    /**
     * the schema topic (e.g. COVID-19, Flu)
     */
    topic?: string;
    /**
     * total number of individual reports sent to the Hub (in a csv, the number of data lines sent)
     */
    reportItemCount?: number;
    /**
     * custom report name if one was specified by the sender
     */
    externalName?: string;
    /**
     * the filename for the delivered report
     */
    fileName?: string;
    /**
     * format in which the report was originally sent
     */
    fileType?: "INTERNAL" | "CSV" | "CSV_SINGLE" | "HL7" | "HL7_BATCH" | "FHIR";
}

export interface DetailedSubmissionHistory {
    /**
     * the row number for this report's action log
     */
    submissionId?: number;
    /**
     * the timestamp for this report submission
     */
    timestamp?: string;
    /**
     * the name of the sender account
     */
    sender?: string;
    /**
     * response given to the sender upon submission
     */
    httpStatus?: number;
    /**
     * the uuid for this submission
     */
    id?: string;
    /**
     * the schema topic (e.g. COVID-19, Flu)
     */
    topic?: string;
    /**
     * total number of individual reports sent to the Hub (in a csv, the number of data lines sent)
     */
    reportItemCount?: number;
    /**
     * the step in the delivery process for a submission
     */
    overallStatus?:
        | "Error"
        | "Received"
        | "Not Delivering"
        | "Waiting to Deliver"
        | "Partially Delivered"
        | "Delivered";
    /**
     * when this submission is expected to finish sending
     */
    plannedCompletionAt?: string;
    /**
     * marks the actual time this submission finished sending
     */
    actualCompletionAt?: string;
    /**
     * total errors found during initial validation.  There may be multiple errors per item.
     */
    errorCount?: number;
    /**
     * total warnings found during initial validation.  There may be multiple warnings per item.
     */
    warningCount?: number;
    /**
     * where the report is being sent to
     */
    destinations?: Destination[];
    /**
     * a list of errors in the report
     */
    errors?: ErrorWarningLog[];
    /**
     * a list of warnings in the report
     */
    warnings?: ErrorWarningLog[];
    /**
     * the input report's external name
     */
    externalName?: string;
    /**
     * total destinations recieving the report(s)
     */
    destinationCount?: number;
}

export interface Destination {
    /**
     * the name of the organization reciving the report
     */
    organization?: string;
    /**
     * the organization id (i.e. {state abbreviation}-phd)
     */
    organization_id?: string;
    /**
     * the service used for delivering the report
     */
    service?: string;
    /**
     * the number of items being sent to this destination
     */
    itemCount?: number;
    /**
     * the number of items available for this destination prior to quality filtering
     */
    itemCountBeforeQualityFiltering?: number;
    /**
     * The time at which the report will be sent
     */
    sending_at?: string;
    /**
     * Information about the rows filtered from the report due to quality.
     */
    filteredReportRows?: string[];
    /**
     * list of the filtering actions that resulted in items being removed
     */
    filteredReportItems?: FilteredReportItem[];
    /**
     * reports that have been sent to this destination as part of the submission being looked at
     */
    sentReports?: ReportLog[];
    /**
     * reports for this destination that have been downloaded as part of the submission being looked at
     */
    downloadedReports?: ReportLog[];
}

export interface FilteredReportItem {
    /**
     * the filter type being used
     */
    filterType?:
        | "jurisdictionalFilter"
        | "qualityFilter"
        | "routingFilter"
        | "processingModeFilter";
    /**
     * the name of the filter function that removed the rows
     */
    filterName?:
        | "filterByCounty"
        | "matches"
        | "doesNotMatch"
        | "orEquals"
        | "hasValidDataFor"
        | "hasAtLeastOneOf"
        | "atLeastOneHasValue"
        | "allowAll"
        | "allowNone"
        | "isValidCLIA";
    /**
     * the trackingElement value of the items removed
     */
    filteredTrackingElement?: string;
    /**
     * the arguments used in the filter function
     */
    filterArgs?: string[];
    /**
     * user-friendly explanation of the filtering action
     */
    message?: string;
}

export interface ReportLog {
    /**
     * the uuid for this report
     */
    reportId?: string;
    /**
     * name of the hl7 file version of this report
     */
    externalName?: string;
    /**
     * the time at which this report was sent/downloaded
     */
    createdAt?: string;
    /**
     * number of items in this report
     */
    itemCount?: number;
}

export interface ErrorWarningLog {
    /**
     * how wide-randing is this log?
     */
    scope?: "parameter" | "report" | "item";
    /**
     * for item scope, list of the index of each log that hit this particular error/warning
     */
    indices?: number[];
    /**
     * for item scope, list of tracking ids for matching logs
     */
    trackingIds?: string[];
    /**
     * field that triggered the error/warning
     */
    field?: string;
    /**
     * user-friendly explanation of the error/warning
     */
    message?: string;
}

export type Deliveries = Delivery[];

export interface Delivery {
    /**
     * the action_id from this report's action log entry
     */
    deliveryId?: number;
    /**
     * when this report was sent
     */
    sent?: string;
    /**
     * expiration date for the report file
     */
    expires?: string;
    /**
     * the name of the organization receiving the report
     */
    receivingOrg?: string;
    /**
     * service used by the organization
     */
    receivingOrgSvc?: string;
    /**
     * the uuid for this report
     */
    reportId?: string;
    /**
     * the schema topic (e.g. COVID-19, Flu)
     */
    topic?: string;
    /**
     * number of tests in the report
     */
    reportItemCount?: number;
    /**
     * the filename for the delivered report
     */
    fileName?: string;
    /**
     * format in which the report was originally sent
     */
    fileType?: "INTERNAL" | "CSV" | "CSV_SINGLE" | "HL7" | "HL7_BATCH" | "FHIR";
}

export type FacilitiesList = DeliveryFacility[];

export interface DeliveryFacility {
    /**
     * the uuid for the referenced report
     */
    reportId?: string;
    /**
     * the full name of the facility
     */
    facility?: string;
    /**
     * city and state of the facility
     */
    location?: string;
    /**
     * The CLIA number (10-digit alphanumeric) of the facility
     */
    CLIA?: string;
    /**
     * the result (conclusion) of the test. 0 = negative (good usually)
     */
    positive?: number;
    /**
     * number of facilities included in the object
     */
    total?: number;
}

/**
 * JSON response containing a list of paginated Submissions and the metadata required to point the next page of submissions.
 */
export interface History {
    /**
     * metadata containing `next_cursor`
     */
    metadata?: string;
    submissions?: Submission[];
}

/**
 * Individual Action ID result with data being populated from both `public.action` and `public.report_file` tables.
 */
export interface Submission {
    /**
     * Timestamp with timezone coming from the `created_at` row in the `public.action` table.
     */
    created_at?: string;
    /**
     * Action ID for the object coming from the `created_at` row in the `public.action` table.
     */
    action_id?: number;
    /**
     * total errors found during initial validation.  There may be multiple errors per item.
     */
    errorCount?: number;
    /**
     * total warnings found during initial validation.  There may be multiple warnings per item.
     */
    warningCount?: number;
}

/**
 * The metadata associated with an setting
 */
export interface SettingMetadata {
    /**
     * the version number of the object
     */
    readonly version?: number;
    /**
     * the time that the particular revision was created
     */
    readonly createdAt?: string;
    /**
     * the user who created the particular revision
     */
    readonly createdBy?: string;
}

/**
 * An organization connected to data hub
 */
export interface Organization1 {
    /**
     * the unique id for the organization
     */
    name: string;
    /**
     * the displayable description of the organization
     */
    description: string;
    jurisdiction: "National" | "State" | "County";
    /**
     * the two letter code for the organization
     */
    stateCode?: string;
    /**
     * the county name (must match FIPS name)
     */
    countyName?: string;
    meta?: SettingMetadata;
}

/**
 * An sender of reports to the data hub
 */
export interface Sender {
    /**
     * Unique name for the senders, includes the organization name
     */
    name: string;
    /**
     * Display ready description of the sender
     */
    description: string;
    /**
     * Topic of for this sender. Must match the supported topics.
     */
    topic: string;
    /**
     * Name of the organization that this sender belongs to
     */
    readonly organizationName?: string;
    /**
     * the schema name for this sender
     */
    schema: string;
    /**
     * the payload format
     */
    format: "CSV";
    meta?: SettingMetadata;
}

/**
 * A receiver of reports from the data hub
 */
export interface Receiver {
    /**
     * The unique name for the receiver. Should include the organization name as a prefix.
     */
    name: string;
    /**
     * Display ready description of the receiver
     */
    description: string;
    /**
     * The topic of for this receiver. Must match the supported topics.
     */
    topic: string;
    /**
     * The name of the organization that this receiver belongs to
     */
    readonly organizationName?: string;
    /**
     * What items to include in the report.
     */
    jurisdictionalFilters?: {
        /**
         * What fields to match in the filter
         */
        matchFields?:
            | "FACILITY_OR_PATIENT_ADDRESS"
            | "FACILITY_ADDRESS"
            | "FACILITY_NAME"
            | "ABNORMAL_VALUE";
        /**
         * What is the value to match against
         */
        matchValues?: string[];
        /**
         * Ensure that the result does not match
         */
        doesNotMatch?: boolean;
    }[];
    /**
     * How the report is translated from the sender. A report can be sent in multiple ways.
     */
    translations?: (CustomConfiguration | StandardHL7Configuration)[];
    /**
     * When the report is sent if not immediately
     */
    timing: {
        /**
         * How often send a report
         */
        frequency: "REAL_TIME" | "HOURLY" | "DAILY";
        /**
         * The UTC hour to send a daily batch
         */
        dailyAt?: number;
    };
    meta?: SettingMetadata;
}

/**
 * A receiver of reports from the data hub
 */
export interface SettingRevisions {
    /**
     * Unique id for this setting revision
     */
    id: number;
    /**
     * Name for this setting. Unique for this organization.
     */
    name: string;
    /**
     * Zero based revision number for this setting
     */
    version: number;
    /**
     * timestamp for when this revision was created
     */
    createdAt: string;
    /**
     * email address of the account creating this revision of the setting
     */
    createdBy: string;
    /**
     * Json as a string for the content of the setting. Json schema varies by setting type and over revisions
     */
    settingJson: string;
}

/**
 * A standard HL7 configuration
 */
export interface StandardHL7Configuration {
    /**
     * The discriminator
     */
    type: string;
    /**
     * Include the AOE
     */
    includeAOE: boolean;
    /**
     * Use BHS and FHS header
     */
    useBatchHeaders: boolean;
    /**
     * Set a test process mode flag
     */
    useTestProcessingMode?: boolean;
    /**
     * The receiving application name (needed for HL7 formats)
     */
    receivingApplicationName?: string;
    /**
     * The receiving application OID
     */
    receivingApplicationOID?: string;
    /**
     * The receiving facility name
     */
    receivingFacilityName?: string;
    /**
     * The receiving facility name
     */
    receivingFacilityOID?: string;
    /**
     * The reporting facility name (if different from CDC PRIME)
     */
    reportingFacilityName?: string;
    /**
     * The reporting facility id (if different from CDC PRIME's OID)
     */
    reportingFacilityId?: string;
    /**
     * The reporting facility id type (if different from OID)
     */
    reportingFacilityIdType?: string;
    /**
     * Suppress QST component is AOE OBX segments
     */
    suppressQstForAoe?: boolean;
    /**
     * A comma delimited list of HL7 fields to suppress
     */
    suppressHl7Fields?: string;
    /**
     * Suppress the AOE OBX results
     */
    suppressAoe?: boolean;
    /**
     * Default the AOE result to UNK
     */
    defaultAoeToUnknown?: boolean;
    /**
     * A comma delimited list of element names that should use blank instead of unknown
     */
    useBlankInsteadOfUnknown?: string;
    /**
     * Truncate the HD fields to HD_TRUNCATION_LIMIT
     */
    truncateHDNamespaceIds?: boolean;
    /**
     * Use the PID-14 field for patient email instead of the standard PID-13 field
     */
    usePid14ForPatientEmail?: boolean;
    /**
     * A comma delimited list of HL7 fields to convert to the yyyMMddHHmmss format
     */
    convertTimestampToDateTime?: string;
    /**
     * How to format phone numbers (XTN fields)
     */
    phoneNumberFormatting?:
        | "STANDARD"
        | "ONLY_DIGITS_IN_COMPONENT_ONE"
        | "AREA_LOCAL_IN_COMPONENT_ONE";
    /**
     * The format to use for the file name generated by the translation
     */
    nameFormat?: string;
    /**
     * The name of the receiving organization in the message
     */
    receivingOrganization?: string;
    /**
     * The value to use for the ORC-21 (ordering facility name) field
     */
    useOrderingFacilityName?: "STANDARD" | "NCES" | "ORGANIZATION_NAME";
    transport:
        | SFTPTransport
        | AS2Transport
        | BlobStoreTransport
        | NullTransport;
}

/**
 * A custom configuration for a custom schema
 */
export interface CustomConfiguration {
    /**
     * The discriminator
     */
    type: string;
    /**
     * The name of the custom schema
     */
    schemaName: string;
    /**
     * The format of the serializer
     */
    format: "CSV" | "HL7";
    /**
     * The format to use for the file name generated by the translation
     */
    nameFormat?: string;
    /**
     * The name of the receiving organization in the message
     */
    receivingOrganization?: string;
    /**
     * The transport to use
     */
    transport:
        | SFTPTransport
        | AS2Transport
        | BlobStoreTransport
        | NullTransport;
}

/**
 * Describes a single SFTP connection in all of it variations
 */
export interface SFTPTransport {
    /**
     * The discriminator
     */
    type: string;
    /**
     * Host name and domain
     */
    host: string;
    /**
     * The port to use
     */
    port: number;
    /**
     * The file path to place the report
     */
    filePath: string;
}

/**
 * Moves results to a Azure Blob Store. Typically used for HHS Protect interfaces.
 */
export interface BlobStoreTransport {
    /**
     * The discriminator
     */
    type: string;
    /**
     * This looks for an env var with this name. env var value is the connection string
     */
    storageName: string;
    /**
     * This name of the Azure container
     */
    containerName: string;
}

/**
 * Describes a single AS2 connection in all of it variations
 */
export interface AS2Transport {
    /**
     * The discriminator
     */
    type: string;
    /**
     * The URL to the AS2 end-point
     */
    receiverUrl: string;
    /**
     * The AS2 id of the receiver. Usually, the same for all senders.
     */
    receiverId: string;
    /**
     * The AS2 id of the sender. Usually, assigned by receiver to PRIME.
     */
    senderId: string;
    /**
     * The email address to contact someone about the message
     */
    senderEmail?: string;
    /**
     * The MIME type of the message
     */
    mimeType?: string;
    /**
     * A description of the content of the message. Usually, the same for all messages.
     */
    contentDescription?: string;
}

/**
 * A transport type that does not do anything
 */
export interface NullTransport {
    /**
     * The discriminator
     */
    type: string;
    /**
     * A dummy value
     */
    dummy?: string;
}

export interface ReportFileMessage {
    /**
     * The report-id of the sender file
     */
    reportId: string;
    /**
     * The topic for this report's schema
     */
    schemaTopic: string;
    /**
     * The name of this report's schema
     */
    schemaName: string;
    /**
     * The name of this report's schema
     */
    contentType: string;
    /**
     * The name of this report's schema
     */
    content: string;
    /**
     * Information about the blob that this report comes from
     */
    origin?: {
        bodyUrl?: string;
        sendingOrg?: string;
        sendingOrgClient?: string;
        receivingOrg?: string;
        receivingOrgSvc?: string;
        indices?: number[];
        createdAt?: string;
    };
}

export type EmptyBody = string;

export type RequeueResponse = string;

export interface Report {
    /**
     * the id for the report assigned by the Hub
     */
    id: string;
    /**
     * the timestamp for this report submission
     */
    timestamp?: string;
    /**
     * the topic configured for the client organization sender
     */
    topic?: string;
    /**
     * total number of individual reports sent to the Hub (in a csv, the number of data lines sent)
     */
    reportItemCount?: number;
    /**
     * where the report is being sent to
     */
    destinations?: Destination1[];
    /**
     * total destinations recieving the report(s)
     */
    destinationCount?: number;
    /**
     * total errors found during initial validation.  There may be multiple errors per item.
     */
    errorCount?: number;
    /**
     * total warnings found during initial validation.  There may be multiple warnings per item.
     */
    warningCount?: number;
    /**
     * a list of errors in the report
     */
    errors?: Detail[];
    /**
     * a list of warnings in the report
     */
    warnings?: Detail[];
}

export interface Detail {
    /**
     * Does the error apply to one item
     */
    scope?: "Parameter" | "Report" | "Item";
    /**
     * Depends on scope, either the item's id (message_id) or the report's id
     */
    id?: string;
    /**
     * The details of the error
     */
    detail?: string;
}

export interface Destination1 {
    /**
     * The name of the organization reciving the report
     */
    organization?: string;
    /**
     * The organization id (i.e. {state abbreviation}-phd)
     */
    organization_id?: string;
    /**
     * The service used for delivering the report
     */
    service?: string;
    /**
     * Information about the rows filtered from the report due to quality.
     */
    filteredReportRows?: string[];
    /**
     * The time at which the report will be sent
     */
    sending_at?: string;
    /**
     * The number of reports being sent to this destination
     */
    itemCount?: number;
}

export interface Message {
    /**
     * the primary key for this message object
     */
    id?: number;
    /**
     * the full message id
     */
    messageId?: string;
    /**
     * the name of the sender account
     */
    sender?: string;
    /**
     * when the original report that contains the message was submitted to ReportStream
     */
    submittedDate?: string;
    /**
     * the uuid of the submitted report that a message belongs to
     */
    reportId?: string;
    /**
     * the name of the file of the submitted report that a message belongs to
     */
    fileName?: string;
    /**
     * the blobstore url of the file the message belongs to
     */
    fileUrl?: string;
    /**
     * a list of errors in the report
     */
    errors?: DetailedActionLog[];
    /**
     * a list of warnings in the report
     */
    warnings?: DetailedActionLog[];
    /**
     * a list of the message's receivers
     */
    receiverData?: MessageReceiver[];
}

export interface MessageReceiver {
    /**
     * the uuid of the receiver report that a message belongs to
     */
    reportId?: string;
    /**
     * the name of the org receiving the message
     */
    receivingOrg?: string;
    /**
     * the name of the receiver's service receiving the message
     */
    receivingOrgSvc?: string;
    /**
     * the transport result between ReportStream and the receiving service
     */
    transportResult?: string;
    /**
     * the name of the file the message belongs to
     */
    fileName?: string;
    /**
     * the blobstore url of the receiver file the message belongs to
     */
    fileUrl?: string;
    /**
     * the time of which the file/report was sent or created
     */
    createdAt?: string;
    /**
     * the quality filters of the report that the message may have been filtered out from
     */
    qualityFilters?: MessageActionLog[];
}

export interface MessageActionLog {
    /**
     * id for identifying the test this log is related to
     */
    trackingId?: string;
    /**
     * additional information for this log
     */
    detail?: {
        /**
         * Does the error apply to one item
         */
        scope?: "Parameter" | "Report" | "Item" | "Translation";
        /**
         * user-friendly explanation of the filtering action
         */
        message?: string;
    };
}

export interface DetailedActionLog {
    /**
     * how wide-ranging is this log?
     */
    scope?: "parameter" | "report" | "item" | "translation";
    /**
     * unique identifier for the report that owns this log
     */
    reportId?: string;
    /**
     * position in the report of the item that caused this log
     */
    index?: number[];
    /**
     * id for identifying the test this log is related to
     */
    trackingId?: string;
    /**
     * what kind of log is this? (e.g. filter, warning...)
     */
    type?: "info" | "warning" | "error" | "filter";
    /**
     * additional information for this log
     */
    detail?: {
        /**
         * Does the error apply to one item
         */
        scope?: "Parameter" | "Report" | "Item" | "Translation";
        /**
         * user-friendly explanation of the filtering action
         */
        message?: string;
    };
}

/**
 * An ordered array with the table rows
 */
export type DynamicTableRows = Record<string, unknown>[];

/**
 * A table version information
 */
export type TableVersionArray = TableVersionInfo[];

/**
 * A table version information
 */
export interface TableVersionInfo {
    tableName?: string;
    tableVersion?: string;
    isActive?: boolean;
    createdBy?: string;
    createdAt?: string;
}

/**
 * The error message
 */
export interface ErrorMsg {
    error?: string;
}

export interface DeliveryApiSearch {
    /**
     * The sorting to apply to the results, defaults to sorting by created_at, DESC
     */
    sort?: {
        /**
         * The order to apply the sort property
         */
        direction?: "DESC" | "ASC";
        /**
         * The property to sort by
         */
        property?:
            | "ordering_provider"
            | "ordering_facility"
            | "submitter"
            | "report_id"
            | "created_at"
            | "expiration_date"
            | "number_of_tests"
            | "sort_id";
    };
    /**
     * The pagination to apply to the search
     */
    pagination?: {
        /**
         * Which page of results to fetch
         */
        page?: number;
        /**
         * The number of results to return per page
         */
        limit?: number;
    };
    filters?: {
        /**
         * The name of the filter to apply to the results
         */
        filterName?: "SINCE" | "UNTIL";
        /**
         * The value for the filter to apply; depending on the
         * > filter type the value will be parsed to the data type that underlying filter expects
         * > i.e. the SINCE filter will parse it to an LocalDateTime
         *
         */
        value?: string;
    }[];
}

export interface SubmitterApiSearch {
    /**
     * The sorting to apply to the results, defaults to sorting by created_at, DESC
     */
    sort?: {
        /**
         * The order to apply the sort property
         */
        direction?: "DESC" | "ASC";
        /**
         * The property to sort by
         */
        property?:
            | "id"
            | "name"
            | "first_report_date"
            | "test_result_count"
            | "type";
    };
    /**
     * The pagination to apply to the search
     */
    pagination?: {
        /**
         * Which page of results to fetch
         */
        page?: number;
        /**
         * The number of results to return per page
         */
        limit?: number;
    };
    filters?: {
        /**
         * The name of the filter to apply to the results
         */
        filterName?: "SINCE" | "UNTIL";
        /**
         * The value for the filter to apply; depending on the
         * > filter type the value will be parsed to the data type that underlying filter expects
         * > i.e. the SINCE filter will parse it to an LocalDateTime
         *
         */
        value?: string;
    }[];
}

/**
 * Results from running a search for submitters to a specific receiver
 */
export interface DeliveryApiSearchResults {
    meta?: {
        type?: "submitter";
        /**
         * The total of number of results before applying the filters
         */
        totalCount?: number;
        /**
         * The total number of results after applying the filters
         */
        totalFilteredCount?: number;
        /**
         * The number of pages for the results
         */
        totalPages?: number;
        /**
         * the next page of results
         */
        nextPage?: number;
        /**
         * the previous page of results
         */
        previousPage?: number;
    };
    data?: {
        /**
         * The ordering provider in the report
         */
        orderingProvider?: string;
        /**
         * The ordering facility in the report
         */
        orderingFacility?: string;
        /**
         * The sender of the data that was in the report
         */
        submitter?: string;
        /**
         * When the report was sent
         */
        createdAt?: string;
        /**
         * When the report will no longer be available
         */
        expirationDate?: string;
        /**
         * The total number of reports sent by the submitter
         */
        testResultCount?: string;
        /**
         * The ID for the sent report
         */
        reportId?: string;
    }[];
}

/**
 * Results from running a search for submitters to a specific receiver
 */
export interface SubmitterApiSearchResults {
    meta?: {
        type?: "submitter";
        /**
         * The total of number of results before applying the filters
         */
        totalCount?: number;
        /**
         * The total number of results after applying the filters
         */
        totalFilteredCount?: number;
        /**
         * The number of pages for the results
         */
        totalPages?: number;
        /**
         * the next page of results
         */
        nextPage?: number;
        /**
         * the previous page of results
         */
        previousPage?: number;
    };
    data?: {
        /**
         * The id of the submitter
         */
        id?: string;
        /**
         * The name of the submitter
         */
        name?: string;
        /**
         * The date the first of the first report sent by the submitter
         */
        firstReportDate?: string;
        /**
         * The total number of reports sent by the submitter
         */
        testResultCount?: string;
        /**
         * The submitter type
         */
        type?: "SUBMITTER" | "PROVIDER" | "FACILITY";
        /**
         * The location for the submitter
         */
        location?: string;
    }[];
}

/**
 * A json object with a result and message field.
 */
export interface CheckReceiverResponse {
    /**
     * 'success' or 'fail' for connecting to receiver using these settings
     */
    result: string;
    /**
     * Multi-line string with messages to debug issue. Will include \\n and \\t characters
     */
    message: string;
}

/**
 * Fetch or modify API Keys
 */
export interface ApiKeysResponse {
    /**
     * The name of the organization
     */
    orgName?: string;
    /**
     * The list of keys for the organization
     */
    keys?: JwkSet[];
}

export interface Jwk {
    kty?: string;
    use?: string;
    keyOps?: string;
    alg?: string;
    kid?: string;
    x5u?: string;
    x5c?: string[];
    x5t?: string;
    n?: string;
    e?: string;
    d?: string;
    crv?: string;
    p?: string;
    q?: string;
    dp?: string;
    dq?: string;
    qi?: string;
    x?: string;
    y?: string;
    k?: string;
}

export interface JwkSet {
    scope?: string;
    keys?: Jwk[];
}

/**
 * An organization connected to data hub
 */
export interface ListSendFailures {
    /**
     * the unique id for the action
     */
    actionId?: number;
    /**
     * the uuid for this report
     */
    reportId?: string;
    /**
     * Org destination name of the receiver that failed
     */
    receiver?: string;
    /**
     * Filename for the data that's prepared for forwarding but failing
     */
    fileName?: string;
    /**
     * the time that the particular error happened
     */
    failedAt?: string;
    /**
     * The original action that failed had a url. These are the cgi params.
     */
    actionParams?: string;
    /**
     * The long error message generated when the upload failed.
     */
    actionResult?: string;
    /**
     * The body portion of the original action url. Contains the location of the file that failed to forward
     */
    bodyUrl?: string;
    /**
     * The parsed receiver. It should be the same as receiver field above
     */
    reportFileReceiver?: string;
}

/**
 * An organization connected to data hub
 */
export interface ListResends {
    /**
     * the unique id for the action
     */
    actionId: number;
    /**
     * For this selector it's always "resend"
     */
    actionName: string;
    /**
     * The time at which this action was created
     */
    createdAt: string;
    /**
     * The http result code from this action running
     */
    httpStatus: number;
    /**
     * Parameters originally passed to this action. Formatted Json including Headers and QueryParameters
     */
    actionParams?: string;
    /**
     * Result for this action.
     */
    actionResult: string;
    /**
     * Login email of account initiating request
     */
    username?: string;
    /**
     * IP address of account initiating request
     */
    sender_ip?: string;
    /**
     * Not currently used, may be in the future
     */
    actionResponse?: string;
    /**
     * Not currently used, always zero
     */
    contentLength?: number;
    /**
     * not currently used
     */
    sendingOrg?: string;
    /**
     * not currently used
     */
    sendingOrgClient?: string;
    /**
     * not currently used
     */
    externalName?: string;
}

/**
 * An organization connected to data hub
 */
export interface ReceiversConnStatusResponse {
    /**
     * Internal primary key. Useful for react to use as a unique key
     */
    receiverConnectionCheckResultId?: number;
    /**
     * Organization ID - primary key in Settings
     */
    organizationId?: number;
    /**
     * Receiver ID - primary key in Settings
     */
    receiverId?: number;
    /**
     * Protocol level or java exception result May be multiline
     */
    connectionCheckResult?: string;
    /**
     * If the connection and transmission was successful or not
     */
    connectionCheckSuccessful?: boolean;
    /**
     * Timestamp of when the check started
     */
    connectionCheckStartedAt?: string;
    /**
     * Timestamp of when the check ended
     */
    connectionCheckCompletedAt?: string;
    /**
     * Name string associated with the organizationId field pulled from Settings
     */
    organizationName?: string;
    /**
     * Name string associated with the receiverId field pulled from Settings
     */
    receiverName?: string;
}

/**
 * When the resource version last changed
 */
export type Parameter_lastUpdatedParam = string;

/**
 * Security Labels applied to this resource
 */
export type Parameter_securityParam = string;

/**
 * Tags applied to this resource
 */
export type Parameter_tagParam = string;

/**
 * Logical id of this artifact
 */
export type Parameter_idParam = string;

/**
 * Identifies where the resource comes from
 */
export type Parameter_sourceParam = string;

/**
 * Profiles this resource claims to conform to
 */
export type Parameter_profileParam = string;

/**
 * Sort the returned data using one of three options: \r
 * \r
 * * -_lastUpdated: [Default] Decreasing time - most recent changes first\r
 * * _lastUpdated: Increasing time - oldest changes first\r
 * * none: Increasing id order - oldest changes first\r\n
 */
export type Parameter_sortParam = "-_lastUpdated" | "_lastUpdated" | "none";

/**
 * Resources updated after this period will be included in the response.
 */
export type Parameter_sinceParam = string;

/**
 * Return changes before a known timestamp
 */
export type Parameter_beforeParam = string;

/**
 * Specifies a maximum number of results that are required
 */
export type Parameter_countParam = number;

/**
 * Limit which resource types are returned
 */
export type Parameter_typeParam = string;

/**
 * The format for the requested bulk data files to be generated
 */
export type Parameter_outputFormatParam = string;

/**
 * logical identifier
 */
export type ParameteridParam = string;

export interface GetWatersOrgByOrganizationSubmissionsData {
    /**
     * used by cursor-based pagination to determine the position on the results
     */
    cursor?: string;
    /**
     * sender of the report history we want to look at
     */
    organization: string;
    /**
     * number of results per page
     */
    pagesize?: number;
    /**
     * whether or not to show submissions that failed delivery
     */
    showFailed?: boolean;
    /**
     * only return results from after the given date
     */
    since?: string;
    /**
     * column used as the basis for sorting
     */
    sortcol?: string;
    /**
     * direction in which to sort reports
     */
    sortdir?: "ASC" | "DESC";
    /**
     * only return results from before the given date
     */
    until?: string;
}

export type GetWatersOrgByOrganizationSubmissionsResponse =
    SubmissionHistoryList;

export interface GetWatersOrgByOrganizationBySenderChannelSubmissionsData {
    /**
     * used by cursor-based pagination to determine the position on the results
     */
    cursor?: string;
    /**
     * sender of the report history we want to look at
     */
    organization: string;
    /**
     * number of results per page
     */
    pagesize?: number;
    /**
     * sender channel of the report history we want to look at
     */
    senderChannel: string;
    /**
     * whether or not to show submissions that failed delivery
     */
    showFailed?: boolean;
    /**
     * only return results from after the given date
     */
    since?: string;
    /**
     * column used as the basis for sorting
     */
    sortcol?: string;
    /**
     * direction in which to sort reports
     */
    sortdir?: "ASC" | "DESC";
    /**
     * only return results from before the given date
     */
    until?: string;
}

export type GetWatersOrgByOrganizationBySenderChannelSubmissionsResponse =
    SubmissionHistoryList;

export interface PostWatersReportsData {
    /**
     * flag for processing the report in a different manner
     */
    processing?: "async";
    /**
     * The public health information being routed
     */
    requestBody: string;
}

export type PostWatersReportsResponse = DetailedSubmissionHistory;

export interface GetWatersReportByIdHistoryData {
    /**
     * a valid UUID or actionId (aka submissionId)
     */
    id: string;
}

export type GetWatersReportByIdHistoryResponse = DetailedSubmissionHistory;

export interface GetWatersOrgByOrganizationDeliveriesData {
    /**
     * used by cursor-based pagination to determine the position on the results
     */
    cursor?: string;
    /**
     * the fileName within the deliveries of the organization and client
     */
    fileName?: string;
    /**
     * receiver whose deliveries we want to see
     */
    organization: string;
    /**
     * number of results per page
     */
    pagesize?: number;
    /**
     * Customer status of the service used by the organization. Can append the parameter multiple times for more than one status.
     */
    receivingOrgSvcStatus?: "ACTIVE" | "INACTIVE" | "TESTING";
    /**
     * the reportId within the deliveries of the organization and client
     */
    reportId?: string;
    /**
     * only return results from after the given date
     */
    since?: string;
    /**
     * column used as the basis for sorting
     */
    sortcol?: string;
    /**
     * direction in which to sort reports
     */
    sortdir?: "ASC" | "DESC";
    /**
     * only return results from before the given date
     */
    until?: string;
}

export type GetWatersOrgByOrganizationDeliveriesResponse = Deliveries;

export interface GetDeliveriesData {
    /**
     * client of the receiver to get deliveries for
     */
    client: string;
    /**
     * used by cursor-based pagination to determine the position on the results
     */
    cursor?: string;
    /**
     * the fileName within the deliveries of the organization and client
     */
    fileName?: string;
    /**
     * receiver whose deliveries we want to see
     */
    organization: string;
    /**
     * number of results per page
     */
    pagesize?: number;
    /**
     * Customer status of the service used by the organization. Can append the parameter multiple times for more than one status.
     */
    receivingOrgSvcStatus?: "ACTIVE" | "INACTIVE" | "TESTING";
    /**
     * the reportId within the deliveries of the organization and client
     */
    reportId?: string;
    /**
     * only return results from after the given date
     */
    since?: string;
    /**
     * column used as the basis for sorting
     */
    sortcol?: string;
    /**
     * direction in which to sort reports
     */
    sortdir?: "ASC" | "DESC";
    /**
     * only return results from before the given date
     */
    until?: string;
}

export type GetDeliveriesResponse = Deliveries;

export interface GetDeliveryDetailsData {
    /**
     * ActionID or ReportId of report whose details we want to see
     */
    id: string;
}

export type GetDeliveryDetailsResponse = Delivery;

export interface GetDeliveryFacilitiesData {
    /**
     * ActionID or ReportId of report whose facilities we want to see
     */
    id: string;
    /**
     * column used as the basis for sorting
     */
    sortcol?: string;
    /**
     * direction in which to sort reports
     */
    sortdir?: "ASC" | "DESC";
}

export type GetDeliveryFacilitiesResponse = FacilitiesList;

export interface PostValidateData {
    /**
     * The client.sender to validate against. If client is not known, use `schema` and `format` instead.
     */
    client?: string;
    /**
     * The format of the message. must be used with `schema`.  This parameter is incompatible with `client`.
     *
     */
    format?: "CSV" | "HL7" | "HL7_BATCH";
    /**
     * The message to validate
     */
    requestBody: string;
    /**
     * The schema path to validate the message against. Must be use with `format`. This parameter is incompatible with `client`.
     *
     */
    schema?: string;
}

export type PostValidateResponse = Report;

export interface PostTokenData {
    /**
     * Parameters should be sent in the request body.
     */
    formData: {
        /**
         * Permission being requested. Format is orgName.senderName.desiredPermission. Example "strac.default.report"
         */
        scope?: string;
        /**
         * The value should always be "client_credentials"
         */
        grant_type?: string;
        /**
         * The value should always be "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
         */
        client_assertion_type?: string;
        /**
         * signed JWT from the sender. See https://github.com/CDCgov/prime-reportstream/blob/master/prime-router/docs/playbooks/how-to-use-token-auth.md
         */
        client_assertion?: string;
    };
}

export type PostTokenResponse = TableVersionInfo;

export interface GetSubmissionsData {
    /**
     * The cursor pointing to the next portion of results. If you don't pass a `cursor` parameter, but **do** pass a `limit` parameter, the default value retrieves the first portion of results. Paginated responses include a `response_metadata` object that includes a `next_cursor` *when there are additional results to be retrieved.* On your next call to the same method, set the `cursor` parameter equal to the `next_cursor` value you received on the last request to retrieve the next portion of the collection. An empty, null, or non-existent `next_cursor` in the response indicates no further results.
     */
    cursor?: string;
    /**
     * (`YYYY-MM-DD') End date to get results for.
     */
    dateEnd?: number | string;
    /**
     * (`YYYY-MM-DD`) Start date to get results for.
     */
    dateStart?: number | string;
    /**
     * (`ALL` || `WITH` || `WITHOUT` - default `ALL`) If `WITH` only return results with Error(s). If `WITHOUT` only results without Error(s).
     */
    errors?: string;
    /**
     * (`MM` - default `ALL`) Return results from specific Month. Requires `year` being set. Overriden by start/end
     */
    month?: number;
    /**
     * (`{INT, INT, INT}` || `INT` - default `ALL`) Return results from specific Organization or array of Organizations. Must have admin access.
     */
    organizations?: number[];
    /**
     * The number of items to return (default `10`).
     */
    pagesize: number;
    /**
     * (`ALL` || `WITH` || `WITHOUT` - default `ALL`) If `WITH` only return results with Receipt(s). If `WITHOUT` only results without Receipt(s).
     */
    receipts?: string;
    /**
     * (`{INT, INT, INT}` || `INT` - default `ALL`) Return results from specific Recipient or array of Recipients.
     */
    recipients?: number[];
    /**
     * (`{INT, INT, INT}`  || `INT` - default `ALL`) Return results from specific Sender or array of Senders.
     */
    senders?: number[];
    /**
     * Orders by created date time, this controls if it is asc or desc (default 'desc')
     */
    sort: string;
    /**
     * (`ALL` || `WITH` || `WITHOUT` - default `ALL`) If `WITH` only return results with Warning(s). If `WITHOUT` only results without Warning(s).
     */
    warnings?: string;
    /**
     * (`YYYY` - default `ALL`) Return results from specific Year, overriden by start/end
     */
    year?: number;
}

export type GetSubmissionsResponse = History;

export interface GetSubmissionsSubmissionByActionidData {
    /**
     * The `actionID` for a single receiver action.
     */
    actionid: string;
}

export type GetSubmissionsSubmissionByActionidResponse = Submission;

export interface GetEtorMetadataForHistoryData {
    /**
     * The unique identifier of the report.
     */
    reportId: string;
}

export type GetEtorMetadataForHistoryResponse = OperationOutcome;

export type GetSettingsOrganizationsResponse = Organization1[];

export type HeadSettingsOrganizationsResponse = string;

export interface GetSettingsOrganizationsByOrganizationNameData {
    /**
     * The name of the organization
     */
    organizationName: string;
}

export type GetSettingsOrganizationsByOrganizationNameResponse = Organization1;

export interface PutSettingsOrganizationsByOrganizationNameData {
    /**
     * The name of the organization
     */
    organizationName: string;
    requestBody?: Organization1;
}

export type PutSettingsOrganizationsByOrganizationNameResponse = Organization1;

export interface DeleteSettingsOrganizationsByOrganizationNameData {
    /**
     * The name of the organization
     */
    organizationName: string;
}

export type DeleteSettingsOrganizationsByOrganizationNameResponse =
    Organization1;

export interface GetSettingsOrganizationsByOrganizationNameReceiversData {
    /**
     * Fetch receivers with this organization name
     */
    organizationName: string;
}

export type GetSettingsOrganizationsByOrganizationNameReceiversResponse =
    Receiver[];

export interface GetSettingsOrganizationsByOrganizationNameReceiversByReceiverNameData {
        /**
         * Create receivers under this organization name
         */
        organizationName: string;
        /**
         * The name of the receiver
         */
        receiverName: string;
    }

export type GetSettingsOrganizationsByOrganizationNameReceiversByReceiverNameResponse =
    Receiver;

export interface PutSettingsOrganizationsByOrganizationNameReceiversByReceiverNameData {
        /**
         * Create receivers under this organization name
         */
        organizationName: string;
        /**
         * The name of the receiver
         */
        receiverName: string;
        requestBody?: Receiver;
    }

export type PutSettingsOrganizationsByOrganizationNameReceiversByReceiverNameResponse =
    Receiver;

export interface DeleteSettingsOrganizationsByOrganizationNameReceiversByReceiverNameData {
        /**
         * the organization name
         */
        organizationName: string;
        /**
         * The name of the receiver
         */
        receiverName: string;
    }

export type DeleteSettingsOrganizationsByOrganizationNameReceiversByReceiverNameResponse =
    Receiver;

export interface GetSettingsOrganizationsByOrganizationNameSendersData {
    /**
     * Fetch senders with this organization name
     */
    organizationName: string;
}

export type GetSettingsOrganizationsByOrganizationNameSendersResponse =
    Sender[];

export interface GetSettingsOrganizationsByOrganizationNameSendersBySenderNameData {
        /**
         * Fetch senders with this organization name
         */
        organizationName: string;
        /**
         * The name of a sender to the data hub
         */
        senderName: string;
    }

export type GetSettingsOrganizationsByOrganizationNameSendersBySenderNameResponse =
    Sender;

export interface PutSettingsOrganizationsByOrganizationNameSendersBySenderNameData {
        /**
         * Fetch senders with this organization name
         */
        organizationName: string;
        requestBody?: Sender;
        /**
         * The name of a sender to the data hub
         */
        senderName: string;
    }

export type PutSettingsOrganizationsByOrganizationNameSendersBySenderNameResponse =
    Sender[];

export interface DeleteSettingsOrganizationsByOrganizationNameSendersBySenderNameData {
        /**
         * the organization name
         */
        organizationName: string;
        /**
         * The name of a sender to the data hub
         */
        senderName: string;
    }

export type DeleteSettingsOrganizationsByOrganizationNameSendersBySenderNameResponse =
    Sender;

export interface GetWatersOrgByOrganizationNameSendersRevsBySettingTypeData {
    /**
     * Fetch senders with this organization name
     */
    organizationName: string;
    /**
     * Type of setting
     */
    settingType: "organization" | "sender" | "receiver";
}

export type GetWatersOrgByOrganizationNameSendersRevsBySettingTypeResponse =
    SettingRevisions;

export interface GetSenderFilesData {
    /**
     * The maximum number of receiver items to retrieve
     */
    limit?: number;
    /**
     * The offset into the receiver report for the first item
     */
    offset?: number;
    /**
     * Only include items in the sender file that route to the receiver report
     */
    onlyReportItems?: boolean;
    /**
     * File name of the receiver report
     */
    reportFileName?: string;
    /**
     * Report-id (uuid format) of the receiver report
     */
    reportId?: string;
}

export type GetSenderFilesResponse = ReportFileMessage[];

export interface PostRequeueSendData {
    /**
     * full name of the receiver to resend the report to
     */
    receiver: string;
    /**
     * UUID for the report to resend
     */
    reportId: string;
    /**
     * Empty body due to the POST format
     */
    requestBody: EmptyBody;
    /**
     * if given, includes additional debug messages
     */
    test?: boolean;
}

export type PostRequeueSendResponse = RequeueResponse;

export interface PostReportsData {
    /**
     * Dynamic default values for an element. ':' or : is used to seperate element name and value
     */
    _default?: string[];
    /**
     * The client's name that matches the client name in metadata
     */
    client: string;
    /**
     * Optional ways to process the request
     */
    option?:
        | "ValidatePayload"
        | "CheckConnections"
        | "SendImmediately"
        | "SkipSend";
    /**
     * Optional string name for the data payload submitted.   Typically a filename or other name useful to the sender's record-keeping.  Tracked, but not used, by ReportStream.  Must never include PII/PHI.
     */
    payloadName?: string;
    /**
     * 'sync' or 'async'. defaults to 'sync'. Determines if the incoming message will follow the sync or async process
     */
    processing?: string;
    /**
     * The public health information being routed
     */
    requestBody: string;
    /**
     * A comma separated list of receiver names. Limit the list of possible receivers to these receivers.
     */
    routeTo?: string[];
}

export type PostReportsResponse = Report;

export type GetMetadataLivdResponse = {
    manufacturer?: string;
    model?: string;
    vendorAnalyteName?: string;
    vendorSpecimenDescription?: string;
    vendorResultDescription?: string;
    testPerformedLoincCode?: string;
    testPerformedLoincLongName?: string;
    testOrderedLoincCode?: string;
    testOrderedLoincLongName?: string;
    vendorComment?: string;
    vendorAnalyteCode?: string;
    vendorReferenceId?: string;
    testKitNameId?: string;
    testKitNameIdType?: string;
    equipmentUid?: string;
    equipmentUidType?: string;
    component?: string;
    property?: string;
    time?: string;
    system?: string;
    scale?: string;
    method?: string;
    publicationVersionId?: string;
    loincVersionId?: string;
}[];

export interface GetMessagesData {
    /**
     * The `message_id` of a COVID result message.
     */
    messageId: string;
}

export type GetMessagesResponse = Message;

export interface GetMessageByIdData {
    /**
     * The unique identifier of a COVID test result message, that being the `covid_results_metadata_id` PK of the `covid_result_metadata` table.
     */
    id: string;
}

export type GetMessageByIdResponse = Message;

export interface GetLookuptablesListData {
    /**
     * Set to true to include inactive tables
     */
    showInactive?: boolean;
}

export type GetLookuptablesListResponse = TableVersionArray;

export interface PostLookuptablesByTableNameData {
    /**
     * An array of objects that list the table's rows.
     */
    requestBody: DynamicTableRows;
    /**
     * Name of new lookup table
     */
    tableName: string;
}

export type PostLookuptablesByTableNameResponse = TableVersionInfo;

export interface GetLookuptablesByTableNameByTableVersionContentData {
    /**
     * Name of lookup table
     */
    tableName: string;
    /**
     * Version of specified table
     */
    tableVersion: string;
}

export type GetLookuptablesByTableNameByTableVersionContentResponse =
    DynamicTableRows;

export interface GetLookuptablesByTableNameContentData {
    /**
     * Name of lookup table
     */
    tableName: string;
}

export type GetLookuptablesByTableNameContentResponse = DynamicTableRows;

export interface GetLookuptablesByTableNameByTableVersionInfoData {
    /**
     * Name of lookup table
     */
    tableName: string;
    /**
     * Version of specified table
     */
    tableVersion: string;
}

export type GetLookuptablesByTableNameByTableVersionInfoResponse =
    TableVersionInfo;

export interface PutLookuptablesByTableNameByTableVersionActivateData {
    /**
     * Name of lookup table
     */
    tableName: string;
    /**
     * Version of specified table
     */
    tableVersion: string;
}

export type PutLookuptablesByTableNameByTableVersionActivateResponse =
    TableVersionInfo;

export type PostEmailRegisteredResponse = unknown;

export type PostEmailScheduleResponse = unknown;

export type DeleteEmailScheduleByScheduleIdResponse = unknown;

export interface SearchReceiverDeliveriesData {
    /**
     * The full name of the receiver to fetch submitters for
     */
    receiverFullName: string;
    /**
     * The search parameters for the request
     */
    requestBody: DeliveryApiSearch;
}

export type SearchReceiverDeliveriesResponse = DeliveryApiSearchResults;

export interface GetDeliveryEtorMetadataData {
    /**
     * The unique identifier of the report.
     */
    reportId: string;
}

export type GetDeliveryEtorMetadataResponse = OperationOutcome;

export interface SearchReceiverSubmittersData {
    /**
     * The full name of the receiver to fetch submitters for
     */
    receiverFullName: string;
    /**
     * The search parameters for the request
     */
    requestBody: SubmitterApiSearch;
}

export type SearchReceiverSubmittersResponse = SubmitterApiSearchResults;

export type GetSaveTestDataResponse = unknown;

export type GetCheckResponse = unknown;

export interface PostCheckreceiverOrgByOrgNameReceiverByReceiverNameData {
    /**
     * Name of Organization.
     */
    orgName: string;
    /**
     * Logical name of the Receiver Setting
     */
    receiverName: string;
}

export type PostCheckreceiverOrgByOrgNameReceiverByReceiverNameResponse =
    CheckReceiverResponse;

export interface DeleteSettingsOrganizationsByOrganizationNamePublicKeysByScopeByKidData {
        /**
         * The unique identifier of the key to be deleted
         */
        kid: string;
        /**
         * The name of the organization
         */
        organizationName: string;
        /**
         * The scope the key to be deleted is associated with
         */
        scope: string;
    }

export type DeleteSettingsOrganizationsByOrganizationNamePublicKeysByScopeByKidResponse =
    ApiKeysResponse;

export interface GetSettingsOrganizationsByOrganizationNamePublicKeysData {
    /**
     * The name of the organization
     */
    organizationName: string;
}

export type GetSettingsOrganizationsByOrganizationNamePublicKeysResponse =
    ApiKeysResponse;

export interface PostSettingsOrganizationsByOrganizationNamePublicKeysData {
    /**
     * The key id identifying the public key; must be unique for the keys already added for the scope
     */
    kid: string;
    /**
     * The name of the organization storing this key
     */
    organizationName: string;
    /**
     * The scope for this key (currently only orgName.*.report)
     */
    scope: string;
}

export type PostSettingsOrganizationsByOrganizationNamePublicKeysResponse =
    ApiKeysResponse;

export interface GetSendFailuresData {
    /**
     * Number of days back from today include in results
     */
    daysToShow?: number;
}

export type GetSendFailuresResponse = ListSendFailures[];

export interface GetResendData {
    /**
     * Number of days back from today include in results
     */
    daysToShow?: number;
}

export type GetResendResponse = ListResends[];

export interface GetListReceiversConnStatusData {
    /**
     * Optional date/time for the end range of matches
     */
    endDate?: string;
    /**
     * Date/time for the start range of matches
     */
    startDate: string;
}

export type GetListReceiversConnStatusResponse =
    ReceiversConnStatusResponse[];

export interface $OpenApiTs {
    "/waters/org/{organization}/submissions": {
        get: {
            req: {
                /**
                 * used by cursor-based pagination to determine the position on the results
                 */
                cursor?: string;
                /**
                 * sender of the report history we want to look at
                 */
                organization: string;
                /**
                 * number of results per page
                 */
                pagesize?: number;
                /**
                 * whether or not to show submissions that failed delivery
                 */
                showFailed?: boolean;
                /**
                 * only return results from after the given date
                 */
                since?: string;
                /**
                 * column used as the basis for sorting
                 */
                sortcol?: string;
                /**
                 * direction in which to sort reports
                 */
                sortdir?: "ASC" | "DESC";
                /**
                 * only return results from before the given date
                 */
                until?: string;
            };
            res: {
                /**
                 * a list of submission history objects
                 */
                200: SubmissionHistoryList;
                /**
                 * bad request
                 */
                400: unknown;
            };
        };
    };
    "/waters/org/{organization}.{senderChannel}/submissions": {
        get: {
            req: {
                /**
                 * used by cursor-based pagination to determine the position on the results
                 */
                cursor?: string;
                /**
                 * sender of the report history we want to look at
                 */
                organization: string;
                /**
                 * number of results per page
                 */
                pagesize?: number;
                /**
                 * sender channel of the report history we want to look at
                 */
                senderChannel: string;
                /**
                 * whether or not to show submissions that failed delivery
                 */
                showFailed?: boolean;
                /**
                 * only return results from after the given date
                 */
                since?: string;
                /**
                 * column used as the basis for sorting
                 */
                sortcol?: string;
                /**
                 * direction in which to sort reports
                 */
                sortdir?: "ASC" | "DESC";
                /**
                 * only return results from before the given date
                 */
                until?: string;
            };
            res: {
                /**
                 * a list of submission history objects
                 */
                200: SubmissionHistoryList;
                /**
                 * bad request
                 */
                400: unknown;
            };
        };
    };
    "/waters/reports": {
        post: {
            req: {
                /**
                 * flag for processing the report in a different manner
                 */
                processing?: "async";
                /**
                 * The public health information being routed
                 */
                requestBody: string;
            };
            res: {
                /**
                 * the detailed report history object
                 */
                200: DetailedSubmissionHistory;
                /**
                 * unknown or invalid sender
                 */
                401: unknown;
            };
        };
    };
    "/waters/report/{id}/history": {
        get: {
            req: {
                /**
                 * a valid UUID or actionId (aka submissionId)
                 */
                id: string;
            };
            res: {
                /**
                 * the detailed report history object
                 */
                200: DetailedSubmissionHistory;
                /**
                 * unauthorized
                 */
                401: unknown;
                /**
                 * either there is no report with the given id or the report is not a submission
                 */
                404: unknown;
                /**
                 * unable to fetch history due to Data Access Exception
                 */
                500: unknown;
            };
        };
    };
    "/waters/org/{organization}/deliveries": {
        get: {
            req: {
                /**
                 * used by cursor-based pagination to determine the position on the results
                 */
                cursor?: string;
                /**
                 * the fileName within the deliveries of the organization and client
                 */
                fileName?: string;
                /**
                 * receiver whose deliveries we want to see
                 */
                organization: string;
                /**
                 * number of results per page
                 */
                pagesize?: number;
                /**
                 * Customer status of the service used by the organization. Can append the parameter multiple times for more than one status.
                 */
                receivingOrgSvcStatus?: "ACTIVE" | "INACTIVE" | "TESTING";
                /**
                 * the reportId within the deliveries of the organization and client
                 */
                reportId?: string;
                /**
                 * only return results from after the given date
                 */
                since?: string;
                /**
                 * column used as the basis for sorting
                 */
                sortcol?: string;
                /**
                 * direction in which to sort reports
                 */
                sortdir?: "ASC" | "DESC";
                /**
                 * only return results from before the given date
                 */
                until?: string;
            };
            res: {
                /**
                 * a list of AvailableReport objects
                 */
                200: Deliveries;
                /**
                 * bad request
                 */
                400: unknown;
                /**
                 * unauthorized
                 */
                401: unknown;
                /**
                 * organization does not exist
                 */
                404: unknown;
            };
        };
    };
    "/waters/org/{organization}.{client}/deliveries": {
        get: {
            req: {
                /**
                 * client of the receiver to get deliveries for
                 */
                client: string;
                /**
                 * used by cursor-based pagination to determine the position on the results
                 */
                cursor?: string;
                /**
                 * the fileName within the deliveries of the organization and client
                 */
                fileName?: string;
                /**
                 * receiver whose deliveries we want to see
                 */
                organization: string;
                /**
                 * number of results per page
                 */
                pagesize?: number;
                /**
                 * Customer status of the service used by the organization. Can append the parameter multiple times for more than one status.
                 */
                receivingOrgSvcStatus?: "ACTIVE" | "INACTIVE" | "TESTING";
                /**
                 * the reportId within the deliveries of the organization and client
                 */
                reportId?: string;
                /**
                 * only return results from after the given date
                 */
                since?: string;
                /**
                 * column used as the basis for sorting
                 */
                sortcol?: string;
                /**
                 * direction in which to sort reports
                 */
                sortdir?: "ASC" | "DESC";
                /**
                 * only return results from before the given date
                 */
                until?: string;
            };
            res: {
                /**
                 * a list of AvailableReport objects
                 */
                200: Deliveries;
                /**
                 * bad request
                 */
                400: unknown;
                /**
                 * unauthorized
                 */
                401: unknown;
                /**
                 * organization does not exist
                 */
                404: unknown;
            };
        };
    };
    "/waters/report/{id}/delivery": {
        get: {
            req: {
                /**
                 * ActionID or ReportId of report whose details we want to see
                 */
                id: string;
            };
            res: {
                /**
                 * a report detail object
                 */
                200: Delivery;
                /**
                 * bad request
                 */
                400: unknown;
                /**
                 * unauthorized
                 */
                401: unknown;
                /**
                 * report does not exist
                 */
                404: unknown;
            };
        };
    };
    "/waters/report/{id}/facilities": {
        get: {
            req: {
                /**
                 * ActionID or ReportId of report whose facilities we want to see
                 */
                id: string;
                /**
                 * column used as the basis for sorting
                 */
                sortcol?: string;
                /**
                 * direction in which to sort reports
                 */
                sortdir?: "ASC" | "DESC";
            };
            res: {
                /**
                 * an array of facilities in the report
                 */
                200: FacilitiesList;
                /**
                 * bad request
                 */
                400: unknown;
                /**
                 * unauthorized
                 */
                401: unknown;
                /**
                 * report does not exist
                 */
                404: unknown;
            };
        };
    };
    "/validate": {
        post: {
            req: {
                /**
                 * The client.sender to validate against. If client is not known, use `schema` and `format` instead.
                 */
                client?: string;
                /**
                 * The format of the message. must be used with `schema`.  This parameter is incompatible with `client`.
                 *
                 */
                format?: "CSV" | "HL7" | "HL7_BATCH";
                /**
                 * The message to validate
                 */
                requestBody: string;
                /**
                 * The schema path to validate the message against. Must be use with `format`. This parameter is incompatible with `client`.
                 *
                 */
                schema?: string;
            };
            res: {
                /**
                 * OK
                 */
                200: Report;
                /**
                 * Bad Request
                 */
                400: unknown;
            };
        };
    };
    token: {
        post: {
            req: {
                /**
                 * Parameters should be sent in the request body.
                 */
                formData: {
                    /**
                     * Permission being requested. Format is orgName.senderName.desiredPermission. Example "strac.default.report"
                     */
                    scope?: string;
                    /**
                     * The value should always be "client_credentials"
                     */
                    grant_type?: string;
                    /**
                     * The value should always be "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
                     */
                    client_assertion_type?: string;
                    /**
                     * signed JWT from the sender. See https://github.com/CDCgov/prime-reportstream/blob/master/prime-router/docs/playbooks/how-to-use-token-auth.md
                     */
                    client_assertion?: string;
                };
            };
            res: {
                /**
                 * the token was created and returned
                 */
                200: TableVersionInfo;
                /**
                 * bad request
                 */
                400: unknown;
                /**
                 * unauthorized
                 */
                401: unknown;
            };
        };
    };
    "/submissions": {
        get: {
            req: {
                /**
                 * The cursor pointing to the next portion of results. If you don't pass a `cursor` parameter, but **do** pass a `limit` parameter, the default value retrieves the first portion of results. Paginated responses include a `response_metadata` object that includes a `next_cursor` *when there are additional results to be retrieved.* On your next call to the same method, set the `cursor` parameter equal to the `next_cursor` value you received on the last request to retrieve the next portion of the collection. An empty, null, or non-existent `next_cursor` in the response indicates no further results.
                 */
                cursor?: string;
                /**
                 * (`YYYY-MM-DD') End date to get results for.
                 */
                dateEnd?: number | string;
                /**
                 * (`YYYY-MM-DD`) Start date to get results for.
                 */
                dateStart?: number | string;
                /**
                 * (`ALL` || `WITH` || `WITHOUT` - default `ALL`) If `WITH` only return results with Error(s). If `WITHOUT` only results without Error(s).
                 */
                errors?: string;
                /**
                 * (`MM` - default `ALL`) Return results from specific Month. Requires `year` being set. Overriden by start/end
                 */
                month?: number;
                /**
                 * (`{INT, INT, INT}` || `INT` - default `ALL`) Return results from specific Organization or array of Organizations. Must have admin access.
                 */
                organizations?: number[];
                /**
                 * The number of items to return (default `10`).
                 */
                pagesize: number;
                /**
                 * (`ALL` || `WITH` || `WITHOUT` - default `ALL`) If `WITH` only return results with Receipt(s). If `WITHOUT` only results without Receipt(s).
                 */
                receipts?: string;
                /**
                 * (`{INT, INT, INT}` || `INT` - default `ALL`) Return results from specific Recipient or array of Recipients.
                 */
                recipients?: number[];
                /**
                 * (`{INT, INT, INT}`  || `INT` - default `ALL`) Return results from specific Sender or array of Senders.
                 */
                senders?: number[];
                /**
                 * Orders by created date time, this controls if it is asc or desc (default 'desc')
                 */
                sort: string;
                /**
                 * (`ALL` || `WITH` || `WITHOUT` - default `ALL`) If `WITH` only return results with Warning(s). If `WITHOUT` only results without Warning(s).
                 */
                warnings?: string;
                /**
                 * (`YYYY` - default `ALL`) Return results from specific Year, overriden by start/end
                 */
                year?: number;
            };
            res: {
                /**
                 * OK
                 */
                200: History;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    "/submissions/submission/{actionid}": {
        get: {
            req: {
                /**
                 * The `actionID` for a single receiver action.
                 */
                actionid: string;
            };
            res: {
                /**
                 * OK
                 */
                200: Submission;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    "/waters/report/{reportId}/history/etorMetadata": {
        get: {
            req: {
                /**
                 * The unique identifier of the report.
                 */
                reportId: string;
            };
            res: {
                /**
                 * Successful retrieval of ETOR metadata.
                 */
                200: OperationOutcome;
                /**
                 * lookup Id not found
                 */
                404: unknown;
                /**
                 * Internal server error.
                 */
                500: unknown;
            };
        };
    };
    "/settings/organizations": {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Organization1[];
            };
        };
        head: {
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
    "/settings/organizations/{organizationName}": {
        get: {
            req: {
                /**
                 * The name of the organization
                 */
                organizationName: string;
            };
            res: {
                /**
                 * OK
                 */
                200: Organization1;
            };
        };
        put: {
            req: {
                /**
                 * The name of the organization
                 */
                organizationName: string;
                requestBody?: Organization1;
            };
            res: {
                /**
                 * OK, the organization setting was updated
                 */
                200: Organization1;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * The name of the organization
                 */
                organizationName: string;
            };
            res: {
                /**
                 * OK, the organization setting was deleted
                 */
                200: Organization1;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    "/settings/organizations/{organizationName}/receivers": {
        get: {
            req: {
                /**
                 * Fetch receivers with this organization name
                 */
                organizationName: string;
            };
            res: {
                /**
                 * OK
                 */
                200: Receiver[];
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    "/settings/organizations/{organizationName}/receivers/{receiverName}": {
        get: {
            req: {
                /**
                 * Create receivers under this organization name
                 */
                organizationName: string;
                /**
                 * The name of the receiver
                 */
                receiverName: string;
            };
            res: {
                /**
                 * OK
                 */
                200: Receiver;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        put: {
            req: {
                /**
                 * Create receivers under this organization name
                 */
                organizationName: string;
                /**
                 * The name of the receiver
                 */
                receiverName: string;
                requestBody?: Receiver;
            };
            res: {
                /**
                 * OK, the receiver setting was updated
                 */
                200: Receiver;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * the organization name
                 */
                organizationName: string;
                /**
                 * The name of the receiver
                 */
                receiverName: string;
            };
            res: {
                /**
                 * OK, the receiver was deleted
                 */
                200: Receiver;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    "/settings/organizations/{organizationName}/senders": {
        get: {
            req: {
                /**
                 * Fetch senders with this organization name
                 */
                organizationName: string;
            };
            res: {
                /**
                 * OK
                 */
                200: Sender[];
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    "/settings/organizations/{organizationName}/senders/{senderName}": {
        get: {
            req: {
                /**
                 * Fetch senders with this organization name
                 */
                organizationName: string;
                /**
                 * The name of a sender to the data hub
                 */
                senderName: string;
            };
            res: {
                /**
                 * OK
                 */
                200: Sender;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        put: {
            req: {
                /**
                 * Fetch senders with this organization name
                 */
                organizationName: string;
                requestBody?: Sender;
                /**
                 * The name of a sender to the data hub
                 */
                senderName: string;
            };
            res: {
                /**
                 * OK
                 */
                200: Sender[];
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
        delete: {
            req: {
                /**
                 * the organization name
                 */
                organizationName: string;
                /**
                 * The name of a sender to the data hub
                 */
                senderName: string;
            };
            res: {
                /**
                 * OK, the sender was deleted
                 */
                200: Sender;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    "/waters/org/{organizationName}/senders/revs/{settingType}": {
        get: {
            req: {
                /**
                 * Fetch senders with this organization name
                 */
                organizationName: string;
                /**
                 * Type of setting
                 */
                settingType: "organization" | "sender" | "receiver";
            };
            res: {
                /**
                 * OK
                 */
                200: SettingRevisions;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    "/sender-files": {
        get: {
            req: {
                /**
                 * The maximum number of receiver items to retrieve
                 */
                limit?: number;
                /**
                 * The offset into the receiver report for the first item
                 */
                offset?: number;
                /**
                 * Only include items in the sender file that route to the receiver report
                 */
                onlyReportItems?: boolean;
                /**
                 * File name of the receiver report
                 */
                reportFileName?: string;
                /**
                 * Report-id (uuid format) of the receiver report
                 */
                reportId?: string;
            };
            res: {
                /**
                 * A list of the sender files associated with the specified receiver report.
                 */
                200: ReportFileMessage[];
            };
        };
    };
    "/requeue/send": {
        post: {
            req: {
                /**
                 * full name of the receiver to resend the report to
                 */
                receiver: string;
                /**
                 * UUID for the report to resend
                 */
                reportId: string;
                /**
                 * Empty body due to the POST format
                 */
                requestBody: EmptyBody;
                /**
                 * if given, includes additional debug messages
                 */
                test?: boolean;
            };
            res: {
                /**
                 * text stating how many items in the report will be resent
                 */
                200: RequeueResponse;
                /**
                 * bad request
                 */
                400: unknown;
            };
        };
    };
    "/reports": {
        post: {
            req: {
                /**
                 * Dynamic default values for an element. ':' or : is used to seperate element name and value
                 */
                _default?: string[];
                /**
                 * The client's name that matches the client name in metadata
                 */
                client: string;
                /**
                 * Optional ways to process the request
                 */
                option?:
                    | "ValidatePayload"
                    | "CheckConnections"
                    | "SendImmediately"
                    | "SkipSend";
                /**
                 * Optional string name for the data payload submitted.   Typically a filename or other name useful to the sender's record-keeping.  Tracked, but not used, by ReportStream.  Must never include PII/PHI.
                 */
                payloadName?: string;
                /**
                 * 'sync' or 'async'. defaults to 'sync'. Determines if the incoming message will follow the sync or async process
                 */
                processing?: string;
                /**
                 * The public health information being routed
                 */
                requestBody: string;
                /**
                 * A comma separated list of receiver names. Limit the list of possible receivers to these receivers.
                 */
                routeTo?: string[];
            };
            res: {
                /**
                 * OK
                 */
                200: Report;
                /**
                 * Invalid request. No report created.
                 */
                400: Report;
                /**
                 * Internal Server Error
                 */
                500: unknown;
            };
        };
    };
    "/metadata/livd": {
        get: {
            res: {
                /**
                 * success
                 */
                200: {
                    manufacturer?: string;
                    model?: string;
                    vendorAnalyteName?: string;
                    vendorSpecimenDescription?: string;
                    vendorResultDescription?: string;
                    testPerformedLoincCode?: string;
                    testPerformedLoincLongName?: string;
                    testOrderedLoincCode?: string;
                    testOrderedLoincLongName?: string;
                    vendorComment?: string;
                    vendorAnalyteCode?: string;
                    vendorReferenceId?: string;
                    testKitNameId?: string;
                    testKitNameIdType?: string;
                    equipmentUid?: string;
                    equipmentUidType?: string;
                    component?: string;
                    property?: string;
                    time?: string;
                    system?: string;
                    scale?: string;
                    method?: string;
                    publicationVersionId?: string;
                    loincVersionId?: string;
                }[];
            };
        };
    };
    "/messages": {
        get: {
            req: {
                /**
                 * The `message_id` of a COVID result message.
                 */
                messageId: string;
            };
            res: {
                /**
                 * a list of messages
                 */
                200: Message;
                /**
                 * missing messageId parameter or a bad request
                 */
                400: unknown;
                /**
                 * unauthorized
                 */
                401: unknown;
            };
        };
    };
    "/message/{id}": {
        get: {
            req: {
                /**
                 * The unique identifier of a COVID test result message, that being the `covid_results_metadata_id` PK of the `covid_result_metadata` table.
                 */
                id: string;
            };
            res: {
                /**
                 * The message details related to COVID test result message.
                 */
                200: Message;
                /**
                 * bad request
                 */
                400: unknown;
                /**
                 * unauthorized
                 */
                401: unknown;
            };
        };
    };
    "/lookuptables/list": {
        get: {
            req: {
                /**
                 * Set to true to include inactive tables
                 */
                showInactive?: boolean;
            };
            res: {
                /**
                 * The list of tables with version information
                 */
                200: TableVersionArray;
                /**
                 * if there was an error fetching the list of tables
                 */
                400: ErrorMsg;
            };
        };
    };
    "/lookuptables/{tableName}": {
        post: {
            req: {
                /**
                 * An array of objects that list the table's rows.
                 */
                requestBody: DynamicTableRows;
                /**
                 * Name of new lookup table
                 */
                tableName: string;
            };
            res: {
                /**
                 * The table was created
                 */
                200: TableVersionInfo;
                /**
                 * if there was an error creating the table
                 */
                400: ErrorMsg;
            };
        };
    };
    "/lookuptables/{tableName}/{tableVersion}/content": {
        get: {
            req: {
                /**
                 * Name of lookup table
                 */
                tableName: string;
                /**
                 * Version of specified table
                 */
                tableVersion: string;
            };
            res: {
                /**
                 * The table contents
                 */
                200: DynamicTableRows;
                /**
                 * if there was an error fetching the table data
                 */
                400: ErrorMsg;
                /**
                 * The table name and/or version was not found
                 */
                404: ErrorMsg;
            };
        };
    };
    "/lookuptables/{tableName}/content": {
        get: {
            req: {
                /**
                 * Name of lookup table
                 */
                tableName: string;
            };
            res: {
                /**
                 * The table contents
                 */
                200: DynamicTableRows;
                /**
                 * if there was an error fetching the table data
                 */
                400: ErrorMsg;
                /**
                 * The table name was not found, or there was no active version of that table.
                 */
                404: ErrorMsg;
            };
        };
    };
    "/lookuptables/{tableName}/{tableVersion}/info": {
        get: {
            req: {
                /**
                 * Name of lookup table
                 */
                tableName: string;
                /**
                 * Version of specified table
                 */
                tableVersion: string;
            };
            res: {
                /**
                 * The table version information
                 */
                200: TableVersionInfo;
                /**
                 * if there was an error fetching the table data
                 */
                400: ErrorMsg;
                /**
                 * The table name and/or version was not found
                 */
                404: ErrorMsg;
            };
        };
    };
    "/lookuptables/{tableName}/{tableVersion}/activate": {
        put: {
            req: {
                /**
                 * Name of lookup table
                 */
                tableName: string;
                /**
                 * Version of specified table
                 */
                tableVersion: string;
            };
            res: {
                /**
                 * The table version information
                 */
                200: TableVersionInfo;
                /**
                 * if there was an error fetching the table data
                 */
                400: ErrorMsg;
                /**
                 * The table name and/or version was not found
                 */
                404: ErrorMsg;
            };
        };
    };
    "/email-registered": {
        post: {
            res: {
                /**
                 * success call
                 */
                200: unknown;
            };
        };
    };
    "/email-schedule": {
        post: {
            res: {
                /**
                 * success call
                 */
                200: unknown;
            };
        };
    };
    "/email-schedule/{scheduleId}": {
        delete: {
            res: {
                /**
                 * success call
                 */
                200: unknown;
            };
        };
    };
    "/v1/receivers/{receiverFullName}/deliveries": {
        post: {
            req: {
                /**
                 * The full name of the receiver to fetch submitters for
                 */
                receiverFullName: string;
                /**
                 * The search parameters for the request
                 */
                requestBody: DeliveryApiSearch;
            };
            res: {
                /**
                 * The results from running the search
                 */
                200: DeliveryApiSearchResults;
                /**
                 * The search request could not be parsed
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * The receiver could not be found
                 */
                404: unknown;
            };
        };
    };
    "/waters/report/{reportId}/delivery/etorMetadata": {
        get: {
            req: {
                /**
                 * The unique identifier of the report.
                 */
                reportId: string;
            };
            res: {
                /**
                 * Successful retrieval of ETOR metadata.
                 */
                200: OperationOutcome;
                /**
                 * lookup Id not found
                 */
                404: unknown;
                /**
                 * Internal server error.
                 */
                500: unknown;
            };
        };
    };
    "/v1/receivers/{receiverFullName}/deliveries/submitters/search": {
        post: {
            req: {
                /**
                 * The full name of the receiver to fetch submitters for
                 */
                receiverFullName: string;
                /**
                 * The search parameters for the request
                 */
                requestBody: SubmitterApiSearch;
            };
            res: {
                /**
                 * The results from running the search
                 */
                200: SubmitterApiSearchResults;
                /**
                 * The search request could not be parsed
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * The receiver could not be found
                 */
                404: unknown;
            };
        };
    };
    "/saveTestData": {
        get: {
            res: {
                /**
                 * success call
                 */
                200: unknown;
            };
        };
    };
    "/check": {
        get: {
            res: {
                /**
                 * success call
                 */
                200: unknown;
            };
        };
    };
    "/checkreceiver/org/{orgName}/receiver/{receiverName}": {
        post: {
            req: {
                /**
                 * Name of Organization.
                 */
                orgName: string;
                /**
                 * Logical name of the Receiver Setting
                 */
                receiverName: string;
            };
            res: {
                /**
                 * The table contents
                 */
                200: CheckReceiverResponse;
                /**
                 * The orgName or receiverName  was not found
                 */
                404: string;
            };
        };
    };
    "/settings/organizations/{organizationName}/public-keys/{scope}/{kid}": {
        delete: {
            req: {
                /**
                 * The unique identifier of the key to be deleted
                 */
                kid: string;
                /**
                 * The name of the organization
                 */
                organizationName: string;
                /**
                 * The scope the key to be deleted is associated with
                 */
                scope: string;
            };
            res: {
                /**
                 * OK
                 */
                200: ApiKeysResponse;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Not Found
                 */
                404: unknown;
            };
        };
    };
    "/settings/organizations/{organizationName}/public-keys": {
        get: {
            req: {
                /**
                 * The name of the organization
                 */
                organizationName: string;
            };
            res: {
                /**
                 * OK
                 */
                200: ApiKeysResponse;
                /**
                 * Bad Request
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Not Found
                 */
                404: unknown;
            };
        };
        post: {
            req: {
                /**
                 * The key id identifying the public key; must be unique for the keys already added for the scope
                 */
                kid: string;
                /**
                 * The name of the organization storing this key
                 */
                organizationName: string;
                /**
                 * The scope for this key (currently only orgName.*.report)
                 */
                scope: string;
            };
            res: {
                /**
                 * OK
                 */
                200: ApiKeysResponse;
                /**
                 * Bad Request. Returned if the scope is not valid, the kid already exists for the scope or the POST body was empty
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
                /**
                 * Not Found
                 */
                404: unknown;
            };
        };
    };
    "/adm/getsendfailures": {
        get: {
            req: {
                /**
                 * Number of days back from today include in results
                 */
                daysToShow?: number;
            };
            res: {
                /**
                 * OK
                 */
                200: ListSendFailures[];
            };
        };
    };
    "/adm/getresend": {
        get: {
            req: {
                /**
                 * Number of days back from today include in results
                 */
                daysToShow?: number;
            };
            res: {
                /**
                 * OK
                 */
                200: ListResends[];
            };
        };
    };
    "/adm/listreceiversconnstatus": {
        get: {
            req: {
                /**
                 * Optional date/time for the end range of matches
                 */
                endDate?: string;
                /**
                 * Date/time for the start range of matches
                 */
                startDate: string;
            };
            res: {
                /**
                 * OK
                 */
                200: ReceiversConnStatusResponse[];
            };
        };
    };
}
