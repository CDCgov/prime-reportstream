#!/usr/bin/env bash

# Pretty colors for echo -e
RED="\e[1;91m"
GREEN="\e[1;92m"
YELLOW="\e[1;33m"
NORMAL="\e[0m"
WHITE="\e[1;97m"
GRAY="\e[1;37m"

# HERE = the leaf directory we are running from (without any slashes)
HERE=${PWD##*/}

# the command you're running (plan by default)
TFCMD=${TFCMD:-plan}
VERBOSE=${VERBOSE:-0}

# Where is this script located (and thus, where are the configuration files)?
SCRIPT_DIR="$(dirname "$(realpath "${0}")")"
CONFIGS_DIR="${SCRIPT_DIR?}/configurations"
PLAN_DIR="${SCRIPT_DIR?}/../../plan"

# IP and services that need to be whitelisted in the firewall
PUBLIC_IP="$(curl -s ifconfig.me)"
PUBLIC_IP_CIDR="${PUBLIC_IP?}/32"
PUBLIC_IP_HASH="$(echo -n "${PUBLIC_IP_CIDR?}" | sha1sum | awk '{print $1}')"
declare -a KeyVaults=( "-keyvault" "-appconfig" "-clientconfig" )
declare -a StorageAccounts=( "storageaccount" "partner" "candidate" "candpartner" )
declare -A FunctionApps=( ["-functionapp"]="production,candidate" )

# Does the command require an Azure backend?
case "${TFCMD?}" in
validate|graph)
    AZ_BACKEND_REQUIRED=0
    ;;
*)
    AZ_BACKEND_REQUIRED=1
    ;;
esac

# Prints the usage
function usage() {
    echo "Usage: ${0} [--cmd <COMMAND>] [--env <ENVIRONMENT>] [--verbose]"
    echo ""
    echo -e "This script wraps around terraform to deploy your environment with the right configuration"
    echo ""
    echo -e "\t--cmd | -c <COMMAND>      Sets the terraform command and may alternatively be specified through \${TFCMD} (default: \"plan\")"
    echo -e "\t--env | -e <ENVIRONMENT>  Sets the environment and may alternatively be specified through \${ENVIRONMENT} (default: \"dev\")"
    echo -e "\t--verbose                 Produces verbose output"
}

# Returns 0 if the path is readable, and 1 otherwise
function stat_file() {
    RESULT=0
    if [[ ! -r "${1?}" ]]; then
        echo -e "${RED?}ERROR: \"${1?}\" is not readable.${NORMAL?}"
        RESULT=1
    else
        if [[ ${VERBOSE?} != 0 ]]; then
            echo -e "${GREEN?}OK:${NORMAL?} \"${1?}\" exists and is readable."
        fi
    fi

    return ${RESULT?}
}

#
# Parse the arguments
#
while [[ ! -z "${1}" ]]; do
    case "${1}" in
    "--cmd" | "-c")
        if [[ ! -z "${2}" ]]; then
            TFCMD="${2}"
        else
            echo -e "${RED?}ERROR:${NORMAL?} --cmd does not have a value."
            usage
            exit 1
        fi
        shift
        ;;
    "--env" | "-e")
        if [[ ! -z "${2}" ]]; then
            ENVIRONMENT="${2}"
        else
            echo -e "${RED?}ERROR:${NORMAL?} --env does not have a value."
            usage
            exit 1
        fi
        shift
        ;;
    "--help" | "-h")
        usage
        exit 0
        ;;
    "--verbose")
        VERBOSE=1
        ;;
    "--")
        shift
        break
        ;;
    *)
        echo -e "${YELLOW?}WARNING:${NORMAL?} Ignoring unrecognized option: \"${1}\""
        ;;
    esac

    shift
done

#
# Do real work
#

# If not set, we assume you're targetting 'dev'
ENVIRONMENT="${ENVIRONMENT:-dev}"

# Set up the results masks
EXPECTED_RESULTS=""
ACTUAL_RESULTS=""

# Validate configuration directory
EXPECTED_RESULTS="${EXPECTED_RESULTS?}0"
stat_file "${CONFIGS_DIR?}/" # NOTE: trailing / to make this a dir
ACTUAL_RESULTS="${ACTUAL_RESULTS?}${?}"

# Validate tfvars file existence
TFVARS="${CONFIGS_DIR?}/${ENVIRONMENT?}.tfvars"
EXPECTED_RESULTS="${EXPECTED_RESULTS?}0"
stat_file "${TFVARS?}"
ACTUAL_RESULTS="${ACTUAL_RESULTS?}${?}"

# Validate backend config
BACKEND_CONFIG="${CONFIGS_DIR?}/${ENVIRONMENT?}.tfbackend"
EXPECTED_RESULTS="${EXPECTED_RESULTS?}0"
stat_file "${BACKEND_CONFIG?}"
ACTUAL_RESULTS="${ACTUAL_RESULTS?}${?}"

if [[ "${ACTUAL_RESULTS?}" != "${EXPECTED_RESULTS?}" ]]; then
    echo -e "${RED?}There were errors... aborting!${NORMAL?}"
    echo -e "\tResults Mask: ${ACTUAL_RESULTS?}/${EXPECTED_RESULTS?}"
    exit 1
fi

if [[ ${VERBOSE?} != 0 ]]; then
    echo -e "${GREEN?}OK:${NORMAL?} Checks passed, proceeding..."
fi

# TODO: manipulate 'HERE' to not include the nn- prefix (if it includes it at all but not if it doesn't)
_DASH_INDEX=$(expr index "${HERE?}" '-')
HERE=${HERE?:${_DASH_INDEX?}}

# Initialize with our backend
EXPECTED_RESULTS="${EXPECTED_RESULTS?}0"
if [[ ${AZ_BACKEND_REQUIRED?} == 1 ]]; then
    # If not using a service principal, set the subscription id for Azure
    if [[ -v ARM_SUBSCRIPTION_ID ]]; then
        az account set -s ${AZ_SUBSCRIPTION_ID:-7d1e3999-6577-4cd5-b296-f518e5c8e677}
    fi
    terraform init \
        --reconfigure \
        --backend-config=<(cat ${BACKEND_CONFIG?} | sed "s/__STAGE__/${HERE?}/g")
else
    terraform init \
        --reconfigure \
        -backend=false
fi
ACTUAL_RESULTS="${ACTUAL_RESULTS?}${?}"

RESOURCE_GROUP_NAME="$(echo "var.resource_group" | terraform console --var-file "${TFVARS?}" -var="terraform_caller_ip_address=${PUBLIC_IP_CIDR?}" | xargs)"
RESOURCE_PREFIX="$(echo "var.resource_prefix" | terraform console --var-file "${TFVARS?}" -var="terraform_caller_ip_address=${PUBLIC_IP_CIDR?}" | xargs)"

# Whitelist our IP to access firewalled resources
function add_ip_whitelist() {
    echo -e "${GRAY?}"
    echo -e "Whitelisting IP for Azure resources:"

    for resource in "${KeyVaults[@]}"; do
        RESOURCE_NAME="${RESOURCE_PREFIX?}${resource?}"
        echo -e "\t${RESOURCE_NAME?}..."
        az keyvault network-rule add -g "${RESOURCE_GROUP_NAME?}" -n "${RESOURCE_NAME?}" --ip-address "${PUBLIC_IP_CIDR?}" > /dev/null 2>&1
    done

    for resource in "${StorageAccounts[@]}"; do
        RESOURCE_NAME="${RESOURCE_PREFIX?}${resource?}"
        echo -e "\t${RESOURCE_NAME?}..."
        az storage account network-rule add -g "${RESOURCE_GROUP_NAME?}" -n "${RESOURCE_NAME?}" --ip-address "${PUBLIC_IP?}" > /dev/null 2>&1
    done

    for resource in "${!FunctionApps[@]}"; do
        RESOURCE_NAME="${RESOURCE_PREFIX?}${resource?}"
        IFS=','; read -ra FUNCTION_SLOTS <<< "${FunctionApps[${resource?}]}"
        echo -e "\t${RESOURCE_NAME?}..."
        for slot in "${FUNCTION_SLOTS[@]}"; do
            az functionapp config access-restriction add -g "${RESOURCE_GROUP_NAME?}" -n "${RESOURCE_NAME?}" --slot "${slot?}" --rule-name "tf-${PUBLIC_IP_HASH}" --action Allow --ip-address "${PUBLIC_IP_CIDR?}" --priority 750 > /dev/null 2>&1
        done
    done

    echo -e "${NORMAL?}"
}

function remove_ip_whitelist() {
    echo -e "${GRAY?}"
    echo -e "Removing IP whitelist for Azure resources:"

    for resource in "${KeyVaults[@]}"; do
        RESOURCE_NAME="${RESOURCE_PREFIX?}${resource?}"
        echo -e "\t${RESOURCE_NAME?}..."
        az keyvault network-rule remove -g "${RESOURCE_GROUP_NAME?}" -n "${RESOURCE_NAME?}" --ip-address "${PUBLIC_IP_CIDR?}" > /dev/null 2>&1
    done

    for resource in "${StorageAccounts[@]}"; do
        RESOURCE_NAME="${RESOURCE_PREFIX?}${resource?}"
        echo -e "\t${RESOURCE_NAME?}..."
        az storage account network-rule remove -g "${RESOURCE_GROUP_NAME?}" -n "${RESOURCE_NAME?}" --ip-address "${PUBLIC_IP?}" > /dev/null 2>&1
    done

    for resource in "${!FunctionApps[@]}"; do
        RESOURCE_NAME="${RESOURCE_PREFIX?}${resource?}"
        IFS=','; read -ra FUNCTION_SLOTS <<< "${FunctionApps[${resource?}]}"
        echo -e "\t${RESOURCE_NAME?}..."
        for slot in "${FUNCTION_SLOTS[@]}"; do
            az functionapp config access-restriction remove -g "${RESOURCE_GROUP_NAME?}" -n "${RESOURCE_NAME?}" --slot "${slot?}" --rule-name "tf-${PUBLIC_IP_HASH}" --priority 750 > /dev/null 2>&1
        done
    done

    echo -e "${NORMAL?}"
}

trap remove_ip_whitelist EXIT
add_ip_whitelist

# Now do whatever you asked terraform to do (but only if we did not encounter any 'significant' errors)
if [[ "${ACTUAL_RESULTS?}" == "${EXPECTED_RESULTS?}" ]]; then
    echo "--------------------------------------------------------------------------------"
    if [[ "${VERBOSE?}" != "0" ]]; then
        echo -e "${WHITE?}Executing terraform ${TFCMD?}${NORMAL?}..."
    fi
    case "${TFCMD?}" in
    graph|output|validate|state)
        # Commands that should be run without arguments
        EXPECTED_RESULTS="${EXPECTED_RESULTS?}0"
        terraform ${TFCMD}
        ACTUAL_RESULTS="${ACTUAL_RESULTS?}${?}"
        ;;

    import*)
        # Some commands require arguments in a different location
        EXPECTED_RESULTS="${EXPECTED_RESULTS?}0"
        TFCMD_BEFORE=$(echo "${TFCMD?}" | cut -d' ' -f 1)
        TFCMD_AFTER=$(echo "${TFCMD?}" | sed 's/[^ ]* //')
        terraform ${TFCMD_BEFORE?} \
            --var-file "${TFVARS?}" \
            -var="terraform_caller_ip_address=${PUBLIC_IP_CIDR?}" \
            ${TFCMD_AFTER?}
        ACTUAL_RESULTS="${ACTUAL_RESULTS?}${?}"
        ;;

    plan-file)
        # Custom command we made for the purpose of CI/CD
        EXPECTED_RESULTS="${EXPECTED_RESULTS?}0"
        terraform plan \
            --var-file "${TFVARS?}" \
            -var="terraform_caller_ip_address=${PUBLIC_IP_CIDR?}" \
            -out=${PLAN_DIR?}/${ENVIRONMENT?}-${HERE?}.tfplan \
            1> ${PLAN_DIR?}/${ENVIRONMENT?}-${HERE?}.tfplan.stdout \
            2> ${PLAN_DIR?}/${ENVIRONMENT?}-${HERE?}.tfplan.stderr
        terraform show -no-color \
            ${PLAN_DIR?}/${ENVIRONMENT?}-${HERE?}.tfplan \
            1> ${PLAN_DIR?}/${ENVIRONMENT?}-${HERE?}.txt \
            2> ${PLAN_DIR?}/${ENVIRONMENT?}-${HERE?}.txt.stderr
        ACTUAL_RESULTS="${ACTUAL_RESULTS?}${?}"
        ;;

    *)
        EXPECTED_RESULTS="${EXPECTED_RESULTS?}0"
        terraform ${TFCMD?} \
            --var-file "${TFVARS?}" \
            -var="terraform_caller_ip_address=${PUBLIC_IP_CIDR?}"
        ACTUAL_RESULTS="${ACTUAL_RESULTS?}${?}"
        ;;
    esac
fi

# Report results
echo "--------------------------------------------------------------------------------"
RC=1

if [[ "${ACTUAL_RESULTS?}" != "${EXPECTED_RESULTS?}" ]]; then
    echo -e "${RED?}We encountered errors...${NORMAL?}"
    echo -e "\tResults Mask: ${ACTUAL_RESULTS?}/${EXPECTED_RESULTS?}"
else
    if [[ ${VERBOSE?} != 0 ]]; then
        echo -e "${GREEN?}OK:${NORMAL?} everything went well..."
    fi

    RC=0
fi

exit ${RC?}
