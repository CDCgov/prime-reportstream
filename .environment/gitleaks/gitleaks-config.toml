title = "PRIME ReportStream Gitleaks Configuration"

# Global allowlist
[allowlist]
    description = "Allow-list for files and paths"
    files = [
        '(.*?)(bin|doc|gif|iml|jar|jp(e)?g|pdf|png|xlsx)$',
        '^\.?gitleaks-config.toml$',
        '^\.?gitleaks.report.json$',
        '^package-lock\.json$',
        'cleanslate.sh.log',
        'yarn\.lock$',
    ]
    paths = [
        '.idea/',
        '.terraform/providers/',
        'frontend/dist',
        'frontend/node_modules/',
        'frontend/src/assets',
        'frontend-react/build/',
        'frontend-react/node_modules/',
        'frontend-react/src/components/ReportStreamHeader.tsx',
        'prime-router/.gradle/',
        'prime-router/.vault/env/',
        'prime-router/build/',
        'prime-router/build.gradle.kts',
        'prime-router/docs/dependency-graph-full/dependency-graph-full.txt',
        'prime-router/docs/schema_documentation/',
        'prime-router/frontend/src/assets/fonts',
        'prime-router/frontend/src/assets/img',
        'prime-router/frontend/src/assets/pdf',
        'prime-router/frontend/src/assets/webfonts',
        'prime-router/src/main/kotlin/cli/tests/TestKeys.kt',
        'prime-router/src/test/csv_test_files/input/',
        'prime-router/src/test/kotlin/credentials/CredentialTests',
    ]

[[rules]]
    description = "Email"
    regex = '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}'
    tags = [
        "email"
    ]
    [rules.allowlist]
        # TODO: Filter the real ones down
        regexes = [
            '(?i)@cdc.local',
            '(?i)@email.com',
            '(?i)@example.com',
            '(?i)@organization.tld',
            '(?i)@users.noreply.github.com',
            '(?i)a@cdc.gov',
            '(?i)adhelpdsk@cdc.gov',
            '(?i)cbrown@cdc.gov',
            '(?i)cglodosky@cdc.gov',
            '(?i)data@cdc.gov',
            '(?i)e.ripley@weyland(-)?yutani.com',
            '(?i)giang.hoang@datarobot.com',
            '(?i)hello@cypress.io',
            '(?i)jbrush@avantecenters.com',
            '(?i)jj@phd.gov',
            '(?i)joe.jones@az.pima.gov',
            '(?i)local@test.com',
            '(?i)noreply@cdc.gov',
            '(?i)prime@cdc.gov',
            '(?i)qom6@cdc.gov',
            '(?i)qop5@cdc.gov',
            '(?i)qtv1@cdc.gov',
            '(?i)que3@cdc.gov',
            '(?i)qva8@cdc.gov',
            '(?i)qwp3@cdc.gov',
            '(?i)reportstream@cdc.gov',
            '(?i)rhawes@cdc.gov',
            '(?i)rheft@cdc.gov',
            '(?i)support@(prime.)?cdc.gov',
            '(?i)support@simplereport.gov',
            '(?i)surveillanceplatform@cdc.gov',
            '(?i)usds@cdc.gov',
            '(?i)usds@omb.eop.gov',
        ]

[[rules]]
    description = "Env Var"
    regex = '(?i)(apikey|secret|key|api|password|pass|pw|host)=[0-9a-zA-Z-_.{}]{4,120}'
    tags = [
        "envvar",
    ]
    [rules.allowlist]
        files = [
            '\.(js|ts(x)?)$',                   # No environment variable definitions in Javascript/TypeScript files
            'docker-compose(\.build)?\.yml',    # This is local anyway
        ]
        regexes = [
            '(?i)e\.g\. ',                                      # The value 'e.g.' means 'example'
            '(?i)pass=pass',
            '(prime|changeIT!)',                                # Default cred, this is allowed (too broad??)
            '^# ',                                              # Comment
            'DB_PASSWORD=mypass(word)?',                        # Not real
            'DB_USER=prime',                                    # Not real
            'FAILED Sftp upload of inputReportId xxxx to SFTPTransportType\(host=sftp', # Not a secret, part of the docs
            'gpgkey=https:\/\/packages\.microsoft\.com\/keys\/microsoft\.asc\" \| tee \/etc\/yum\.repos\.d\/azure-cli\.repo',
            'HOST=localhost',                                   # Default cred, this is allowed (too broad??)
            'pdhstaging-pgsql\.postgres\.database\.azure\.com', # Not a secret
        ]
        commits = [
            '57736fab4c8c3e6d8c72178cba621e6b13e61ef5',         # Documentation
        ]

[[rules]]
    description = "Generic Credential"
    regex = '''(?i)(dbpasswd|dbuser|dbname|dbhost|api_key|apikey|secret|key|api|password|user|guid|hostname|pw|auth)(.{0,20})?['|"]([0-9a-zA-Z-_\/+!{}/=]{4,120})['|"]'''
    tags = [
        "API",
        "generic",
        "key",
    ]
    [rules.allowlist]
        regexes = [
            ' \* \(The older version of this API is "/api/reports"\)',
            ' \* since this auth (has|uses) a ',
            ' by option\(\"',
            '!function\(',                                                                  # ignore this ugly thing
            '!function\(',                                                                  # ignore this ugly thing
            '.user\(\s*\"USER\"\s*\)$',
            '''(?i)(.{0,20})?['"][0-9a-f]{32}-us[0-9]{1,2}['"]''',
            '"[a-zA-Z0-9]*Authentications"',
            '(?i)"(localnoauth)": "(true|false)"',                                          # json
            '(?i)create type task_action as enum',
            '(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}',
            '(apiConfig|\.json_rest_api)\(',                                                # function call
            '(apid|api_prefix)\s+',
            '(capture|passive): popKey\(handler, ',
            '(const|private) val TOKEN_SIGNING_SECRET_NAME = "TokenSigningSecret"',
            '(password|user): String = "test',
            '(patterns_to_match|key_permissions)\s*=',                                      # Terraform artifacts
            '(prime|changeIT!)',                                                            # Default cred, this is allowed (too broad??)
            '(resource|data) \"azurerm',                                                    # Terraform azure data or resource
            '/api/settings',
            '/api/token',
            '\.containsKey\(',
            '\"user(\d)*\", \"pass(\d)*\"',                                                 # Not real creds
            '\"user\":\"user1\",(\s)*\"pass\":\"pass1\"',
            '\s*//\s*(.)*auth(.)*',                                                         # Comment
            '\s*=\s*validateUser\s*\(',
            '\s+KEY_VAULT_NAME\s*=\s*\"',
            '^#',                                                                           # Comment
            '^if vault secrets list \|',
            '^import (.)+ from (.)+',                                                       # react import statement (simplified)
            'aad_object_keyvault_admin = "[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}"',                           # Line contains AAD Security Group SID, not a credential
            'API_ENDPOINT_HOST = "PRIME_RS_REPORTS_API_ENDPOINT_HOST",',
            'API_ENDPOINT_HOST\"\) \?: \"localhost\"',
            'API_ENDPOINT_HOST\"\) \?: \"localhost\"',
            'api_url:',
            'apiKey: \"some_key\"',
            'apiKey: \"some_key\"',
            'apiVersion',
            'authentication-type',
            'authenticationType == "',
            'AuthorizedRoute path=',
            'azure_key_vault_certificate_secret_version',                                   # Terraform artifact
            'class(Name)?=',                                                                # this is HTML
            'const val [A-Z]+_KEY_ALIAS = \"as2ohp\"',
            'const val apiPath = \"',
            'const val oldApi = "/api/reports"',
            'const val RECEIVER_KEY_ALIAS = \"as2ohp\"',
            'const val tokenApi =  "/api/token"',
            'const val watersApi = "',
            'elementProp name=\"x-functions-key\" elementType=\"Argument\"',
            'export USERNAME=\"client\"',
            'export VPN_USERNAME=\"client\"',
            'FindSenderKeyInSettings\(',
            'if \(key !== "query"',
            'it\.key\.contains\(',                                                          # iterator key access
            'key.((starts|ends)With|substr)\(',
            'key(\s)*=(=)?(\s)*"(daily|docs|noModifier|noValue|receiver|security|user)"',
            'key=(value|\{i\})',
            'Key\(',
            'KeyVaultSecret\(\"',                                                           # You are doing the right hting
            'let key of \[',
            'localAuth [=!]= ',
            'map-has-key',
            'mock_secret',
            'MockResponse\(',                                                               # Explicitly listed as Mock
            'password\" : \"text\"',
            'Password=\"\"',                                                                # Empty anyway
            'Password=\"\"',                                                                # Empty anyway
            'PrincipalLevel\.USER',
            'private const val CREDENTIAL_KEY_PREFIX = "credential/"',
            'private const val okta([a-zA-Z0-9]+)Path = "/oauth2/default/v1/',
            'private val redoxSecret = \"secret\"',
            'private val redoxSecret = \"secret\"',
            'rsa_key_(2048|4096)\s*=\s*\"(pdh(prod|test|staging|)|rkh-dev)-((2048|4096)-)?key\"',     # Terraform artifacts
            'SECRET_STORAGE_METHOD(\")?\s=',                                                # Method, not a secret
            'secretClient\.getSecret\(\"',
            'SecretHelper\.getSecretService\(\)\.fetchSecret\(',                            # You are fetching the secret properly
            'secretService getProperty \"',
            'secretService\.fetchSecret\(',                                                 # You are fetching the secret properly
            'some_secret',                                                                  # Old local dummy REDOX secret
            'user = if \(',
            'USER" to dbUser,',
            'user\)\.isEqualTo\("user"',
            'userAgent',
            'val (user|password)Variable = \"POSTGRES_(USER|PASSWORD)\"$',                  # Literal value
            'val exampleKeyId = "',
            'val key = \"(ohio|aphl(_light)?|as2ohp)\"',                                    # not really secrets
            'val key = \"(ohio|aphl(_light)?|as2ohp)\"',                                    # not really secrets
            'val KEY_DB_(USER|PASSWORD|URL) = (\"|\\\")DB_(USER|URL|PASSWORD)(\"|\\\")',    # contained verbatim 'DB_(USER|PASSWORD|URL)'
            'val KEY_PRIME_RS_(REPORTS_)?API_ENDPOINT_HOST = \"',                           # Setting of the name of an environment variable name
            'val redoxAuthPath = \"/auth/authenticate\"',
            'val redoxKey = \"apiKey\"',                                                    # Environment variable name, not value
            'val secretEnvName = \"REDOX_SECRET\"',                                         # Environment variable name, not value
            'var keymap = require\(',
            'var tokenSigningSecret = "UVD4QOJ3H295Zi9Ayl3ySuoXNKiE8WYuOsaXOZfug3dwTUVBC1ZIKRPpG5LEyZDZ"',         # Invalidated
            'xox[baprs]-([0-9a-zA-Z]{10,48})',
            'KeyVaults=\(',                                                                 # List of vaults
        ]
        paths = [
            '.terraform/modules/',
            'prime-router/settings/prod/',
        ]
        commits = [
            '6b04ad2134d44008a2f7bdb1fc10976830ed20ff', # Update AAD group IDs
            '2600066006d1c6d4a7fe353f08682321dada6838', # Vetted, AAD Object IDs, not credentials
            '680e5697e3dfb2c338346fe1d2a857d8dcbddcf0', # Vetted, AAD Object IDs, not credentials
        ]

[[rules]]
    description = "Github"
    regex = '''(?i)github(.{0,20})?(?-i)['\"][0-9a-zA-Z]{35,40}['\"]'''
    tags = [
        "key",
        "Github",
    ]

[[rules]]
    description = "High Entropy"
    regex = '[0-9a-zA-Z-_!{}/=]{4,120}'
    file = '''(?i)(dump.sql|high-entropy-misc.txt)$'''
    tags = [
        "entropy",
    ]
    [[rules.Entropies]]
        Min = "4.3"
        Max = "7.0"

[[rules]]
    description = "IPv4 addresses"
    regex = '\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}\b'
    tags = [
        "network",
        "IPv4",
    ]
    [rules.allowlist]
        files = [
            '\.ovpn$',
        ]
        paths = [
            'prime-router/settings/organizations-prod.yml',
            'prime-router/settings/(staging|prod)/',
        ]
        regexes = [
            '([0-1])\.0\.0\.0',
            '\d+\.\d+\.\d+\.\d+\.',                     # Fix for bug in regex (allows trailing dots)
            '1\.1\.1\.1',                               # Public DNS
            '10\.(\d+\.){2}\d+',                        # Cheapo 10.0.0.0/8 range
            '127\.(\d+\.){2}\d+',                       # Cheapo 127.0.0.0/8 range
            '165.225.48.87',                            # zScaler
            '172\.(1[6-9]|2[0-9]|3[0-1])\.',            # 172.16.0.0/12 (172.16.0.0.0 -> 172.31.255.255) range is private
            '192\.168.\d+\.\d+',                        # Cheapo 192.168.0.0/16 range
            'receivingApplicationOID',
            'receivingFacilityOID',
            'reportingFacilityId',
        ]
        commits = [
            '0ee9f13f676e2ba8abf7bd9629a80ca32c5fa27c',
            'fe2561d9165ad7602cd6e867bd4e70eca10f7413',
        ]

[[rules]]
    description = "IPv6 addresses"
    regex = '([0-9a-fA-F]{0,4}|0)(\:([0-9a-fA-F]{0,4}|0)){7}'  # Cheapo, better wanted
    tags = [
        "network",
        "IPv6",
    ]
    [rules.allowlist]
        files = [
            "docker-compose.yml",                       # Local anyway
        ]
        regexes = [
            '(?i)certificate fingerprint \('
        ]

[[rules]]
    description = "MailChimp"
    regex = '[0-9a-f]{32}-us[0-9]{12}'
    tags = [
        "key",
        "mailchimp"
    ]

[[rules]]
    description = "Okta"
    regex = '00[a-zA-Z0-9-_]{40}'
    tags = [
        "key",
        "okta"
    ]
    [rules.allowlist]
        regexes = [
            '//# sourceMappingURL=data:application/json;charset=utf-8;base64,',             # base64 encoding
            '00KPnlSG2vpP3VtKDlv5lsrYXhGEpnXmP1VABopqIX',                                   # Expired/invalidated
            '658195889000001-1e837a04-7d87-4498-ac86-1476354ed257',
            'remote azuregateway-[a-f0-9]*(-[a-f0-9]+)*\.vpn\.azure\.com 443',
            'zh\:',
        ]

[[rules]]
    description = "Port"
    regex = '(?i)port(.{0,4})?[0-9]{1,10}'
    tags = [
        "port"
    ]
    [rules.allowlist]
        files = [
        ]
        regex = '(?i)(=)([0-9a-zA-Z-_!{}=]{4,120})'
    [[rules.Entropies]]
        Min = "3.5"
        Max = "4.5"
        Group = "1"

[[rules]]
    description = "Private Keys"
    regex = '-----BEGIN ((EC|PGP|DSA|RSA|OPENSSH) )?PRIVATE KEY( BLOCK)?-----'
    tags = [
        "key",
        "AsymmetricPrivateKey",
    ]
    [rules.allowlist]
        paths = [
            'prime-router/docs/allowlist-gitleaks-false-positives\.md$',                    # Contains a sample of "what not to do"
        ]
        commits = [
            '00bc6c1bc1f51d2375e22917e95deac6f6370694',                                     # Invalidated
            'c07433b133225d9fa04ba763df7047545a5da217',                                     # Test Keys
            '9360bf82d85e45b53d5dcc9f7ebc17f3da52cd7d',                                     # Test Keys
            '6c3619d2333aac47dc82a90ccbc8e9be92e1200e',                                     # Test Keys
            'efb0f02fce90cd7117ff1b9e092afdd6c2a06de0',                                     # File rename
        ]

[[rules]]
    description = "SendGrid API Key"
    regex = 'SG\.[\w_]{16,32}\.[\w_]{16,64}'
    tags = [
        "key",
        "sendgrid",
    ]

[[rules]]
    description = "Slack"
    regex = 'xox[baprs]-([0-9a-zA-Z]{10,48})?'
    tags = [
        "key",
        "Slack",
    ]

[[rules]]
    description = "Slack Webhook"
    regex = 'https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}'
    tags = [
        "key",
        "slack",
    ]

[[rules]]
    description = "SonarQube Docs API Key"
    regex = '''(?i)sonar.{0,50}(\\\"|'|`)?[0-9a-f]{40}(\\\"|'|`)?'''
    tags = [
        "key",
        "sonarqube",
    ]

[[rules]]
    description = "Twilio API Key"
    regex = '''(?i)twilio(.{0,20})?['\"][0-9a-f]{32}['\"]'''
    tags = [
        "key",
        "twilio",
    ]
