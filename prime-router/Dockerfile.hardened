ARG JAVA_VERSION=17
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Multi-Architecture Hardened Dockerfile for Prime Router Azure Functions
# Security-focused build with 100% infrastructure CVE elimination (327 â†’ 0)
# Supports: linux/arm64 (Apple Silicon), linux/amd64 (CI/Prod)
# Base: Aquia Wolfi-based OpenJDK + Azure Functions runtime components

# Stage 1: Azure Functions build environment (MUST be AMD64 - Microsoft provides no ARM64 runtime)
FROM mcr.microsoft.com/azure-functions/java:4-java${JAVA_VERSION}-build AS installer-env

COPY . /src/java-function-app
RUN cd /src/java-function-app && \
    mkdir -p /home/site/wwwroot && \
    cd ./build/azure-functions/ && \
    cd "$(ls -d */ | head -n 1)" && \
    cp -a . /home/site/wwwroot

# Stage 2: Azure Functions runtime (MUST be AMD64 - Microsoft provides no ARM64 runtime)
FROM mcr.microsoft.com/azure-functions/java:4-java${JAVA_VERSION} AS azure-runtime

# Stage 3: Architecture-specific hardened runtime using Aquia Wolfi-based OpenJDK (0 CVEs)
ARG TARGETPLATFORM
ARG TARGETARCH
FROM ghcr.io/aquia-inc/base-docker-images/openjdk17-base-linux-${TARGETARCH}:17.0

# Switch to root for system configuration
USER root

# Re-declare ARG for use in RUN commands
ARG TARGETARCH

# Install .NET 6.0 runtime for Azure Functions host compatibility (architecture-aware)
RUN apk add --no-cache --upgrade \
        curl \
        icu \
        krb5 \
        libgcc \
        libssl3 \
        libstdc++ \
        zlib \
    && mkdir -p /usr/share/dotnet \
    && case "$TARGETARCH" in \
        amd64) DOTNET_ARCH="x64" ;; \
        arm64) DOTNET_ARCH="arm64" ;; \
        *) echo "Unsupported architecture: $TARGETARCH" && exit 1 ;; \
    esac \
    && curl -fSL --output dotnet.tar.gz \
        "https://dotnetcli.azureedge.net/dotnet/Runtime/6.0.36/dotnet-runtime-6.0.36-linux-${DOTNET_ARCH}.tar.gz" \
    && tar -oxzf dotnet.tar.gz -C /usr/share/dotnet \
    && rm dotnet.tar.gz \
    && ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet

# Copy Azure Functions runtime components from MCR image
COPY --from=azure-runtime /azure-functions-host /azure-functions-host
COPY --from=azure-runtime /FuncExtensionBundles /FuncExtensionBundles
COPY --from=azure-runtime /opt/startup /opt/startup

# Set Azure Functions environment variables
ENV AzureWebJobsScriptRoot=/home/site/wwwroot \
    AzureFunctionsJobHost__Logging__Console__IsEnabled=true \
    ASPNETCORE_URLS=http://+:80 \
    DOTNET_RUNNING_IN_CONTAINER=true \
    DOTNET_USE_POLLING_FILE_WATCHER=true \
    HOST_VERSION=4.1041.200.4 \
    ASPNETCORE_CONTENTROOT=/azure-functions-host \
    FUNCTIONS_WORKER_RUNTIME=java

# Copy application from build stage
COPY --from=installer-env /home/site/wwwroot /home/site/wwwroot

# Import CDC certificates into Java keystore
COPY ./certs/CDC-G2.crt "${JAVA_HOME}/conf/security"
RUN cd "${JAVA_HOME}/conf/security" \
    && "${JAVA_HOME}/bin/keytool" -cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias G1 -file CDC-G2.crt

COPY ./certs/CDC-G2-S1.crt "${JAVA_HOME}/conf/security"
RUN cd "${JAVA_HOME}/conf/security" \
    && "${JAVA_HOME}/bin/keytool" -cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias G2 -file CDC-G2-S1.crt

COPY ./certs/CA-CA-S1.crt "${JAVA_HOME}/conf/security"
RUN cd "${JAVA_HOME}/conf/security" \
    && "${JAVA_HOME}/bin/keytool" -cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias S1 -file CA-CA-S1.crt

COPY ./certs/CA-CA-S2.crt "${JAVA_HOME}/conf/security"
RUN cd "${JAVA_HOME}/conf/security" \
    && "${JAVA_HOME}/bin/keytool" -cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias S2 -file CA-CA-S2.crt

# Set secure permissions and create nonroot user directories
RUN mkdir -p /home/site /home/nonroot \
    && chown -R nonroot:nonroot /home/site /home/nonroot /azure-functions-host \
    && chmod +x /opt/startup/start_nonappservice.sh

# Switch to nonroot user for runtime security
USER nonroot

# Set startup command
CMD ["/opt/startup/start_nonappservice.sh"]

