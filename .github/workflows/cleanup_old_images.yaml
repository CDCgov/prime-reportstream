name: Azure Container Registry Cleanup

on:
  push:
    branches:
        - feature/11576-cleanup-test-staging-old-images

#   schedule:
#     - cron: '0 0 1 * *' # Runs on the first day of every month

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out changes"
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608

      - name: Connect to VPN & Login into Azure
        uses: ./.github/actions/vpn-azure
        with:
          tls-key: ${{ secrets.TLS_KEY }}
          ca-cert: ${{ secrets.CA_CRT}}
          user-crt: ${{ secrets.USER_CRT }}
          user-key: ${{ secrets.USER_KEY }}
          sp-creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: List ACR images
        id: list_images
        run: |
          images=$(az acr repository show-tags --name pdhtestcontainerregistry --repository pdhtest --orderby time_desc --detail --query '[].digest' --output json | jq -r '.[]')
          echo "Images=$images" >> $GITHUB_OUTPUT
    
      - name: Determine images to delete
        id: images_to_delete
        run: |
          images=(${{ steps.list_images.outputs.images }})
          num_to_keep=2
          images_to_delete=()
          for ((i=${#images[@]}-1; i>=0; i--)); do
            if [ ${#images_to_delete[@]} -ge $num_to_keep ]; then
              break
            fi
            images_to_delete+=("${images[i]}")
          done
          echo "ImagesToDelete=${images_to_delete[@]}" >> $GITHUB_OUTPUT
  
      - name: Delete old ACR images in Test env
        if: steps.images_to_delete.outputs.images_to_delete != ''
        run: |
          images_to_delete=(${{ steps.images_to_delete.outputs.images_to_delete }})
          for image in "${images_to_delete[@]}"; do
            az acr repository delete --name pdhtestcontainerregistry --repository pdhtest --manifest $image --yes
          done

      # - name: List test repository images
      #   id: list-test-images
      #   run: |
      #     az acr repository show-tags --name pdhtestcontainerregistry --repository pdhtest --orderby time_asc --output table | head -n -2 > test-images.txt
      #     sed -i '1d' test-images.txt
    #   - name: List test repository images
    #     id: list-stg-images
    #     run: |
    #         STG_IMAGES=$(az acr repository show-tags --name pdhtestcontainerregistry --repository pdhtest --orderby time_asc --output table | head -n -2)
    #         echo "STG_IMAGES=$STG_IMAGES" >> $GITHUB_OUTPUT

      # - name: Format output
      #   id: format_out
      #   run: |
      #     EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      #     echo "TEST_IMAGES<<$EOF" >> $GITHUB_OUTPUT
      #     cat test-images.txt >> $GITHUB_OUTPUT
      #     echo "$EOF" >> $GITHUB_OUTPUT

      # - name: Delete test old images
      #   run: |
      #     TEST_IMAGES=${{ steps.format_out.outputs.TEST_IMAGES }}
      #     IFS=' ' read -ra IMAGES_ARRAY <<< "$TEST_IMAGES"
      #       for ((i = 1; i < ${#IMAGES_ARRAY[@]}; i++)); do
      #         IMAGE="${IMAGES_ARRAY[i]}"
      #         echo "Deleting image $IMAGE"
      #         az acr repository delete --name pdhtestcontainerregistry.azurecr.io --image pdhtest:$IMAGE --yes
              
      #       done






    # TEST_IMAGES=${{ steps.format_out.outputs.TEST_IMAGES }}
    #   for IMAGE in ${TEST_IMAGES}; do
    #     echo "Deleting image $IMAGE"
    #     az acr repository delete --name pdhtestcontainerregistry --image pdhtest:$IMAGE --yes
    #   done

    #   IFS=$'\n' read -d '' -r -a IMAGES <<< "${TEST_IMAGES}"
    #   for IMAGE in "${IMAGES[@]}"; do
    #     echo "Deleting image $IMAGE"
    #     az acr repository delete --name pdhtestcontainerregistry --image pdhtest:$IMAGE --yes
    #   done

   