name: Check Key Vault Certificates Expiration

on:
  push: 
    branches:
      - feature/check-keyvauly-cert-expiration
    
jobs:
  check-certificates:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Changes
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f

      - name: Get Runner IP
        run: echo "::set-output name=runner_ip::$(curl https://ifconfig.me)"
        id: runner_ip

      - name: Connect to VPN & Login into Azure
        uses: ./.github/actions/vpn-azure
        with:
          tls-key: ${{ secrets.TLS_KEY }}
          ca-cert: ${{ secrets.CA_CRT}}
          user-crt: ${{ secrets.USER_CRT }}
          user-key: ${{ secrets.USER_KEY }}
          sp-creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: Add Runner IP to Key Vault Firewall
        uses: azure/cli@v1
        with:
          inlineScript: |
            az keyvault network-rule add --name pdhstaging-keyvault --ip-address ${{ steps.runner_ip.outputs.runner_ip }}

      - name: List all certificates in key vaults
        id: list-certificates
        run: |
          certificates=$(az keyvault certificate list --vault-name pdhstaging-keyvault --query '[].{id:id,name:name,expires:attributes.expires,expired:attributes.expires <= `'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'`}' --output table)
      
      - name: Loop through certificates 
        run: |  
          for certificate in $(echo "$certificates" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${certificate} | base64 --decode | jq -r ${1}
            }
          
            certificate_id=$(_jq '.id')
            certificate_name=$(_jq '.name')
            certificate_expires=$(_jq '.expires')
            certificate_expired=$(_jq '.expired')
          
          done 

      - name: Check if certificate is expiring within 300 days
        run: |
          if [[ $certificate_expired == "false" && $(date -u +%s -d "$certificate_expires") -lt $(( $(date -u +%s) + 25920000 )) ]]; then
          echo "Certificate $certificate_name is expiring within 300 days on $certificate_expires"
          fi
          
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        with:
          entryPoint: send
          args: |
            status=warning
            title="Expiring Certificates Alert"
            text="The following certificates in Azure Key Vaults are expiring within 300 days: \n\n- Certificate Name: $certificate_name\n  Expiry Date: $certificate_expires\n  Certificate ID: $certificate_id\n"
            channel=#pagerduty-alert-dump
            icon_emoji=:warning:
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


      # - name: Get all key vaults
      #   id: list-keyvaults
      #   run: az keyvault list --query "[].{name:name}" --output json

      # - name: List all certificates in key vaults
      #   id: list-certificates
      #   run: |
      #     certs=""
      #     for kv in $(jq -r '.[] | .name' <<< "${{ steps.list-keyvaults.outputs.stdout }}"); do
      #       kv_certs=$(az keyvault certificate list --vault-name $kv --query "[].{name:name,expires:attributes.expires}" --output json)
      #       certs="$certs$kv_certs"
      #     done
      #     echo "::set-output name=certificates::$certs"

      # - name: Filter expiring certificates
      #   id: filter-expiring-certificates
      #   run: |
      #     expiring_certs=$(jq -r '.[] | select((.expires - now | floor) / 86400 < 300) | .name' <<< "${{ steps.list-certificates.outputs.certificates }}")
      #     if [ -n "$expiring_certs" ]; then
      #       echo "::set-output name=certificates::$expiring_certs"
      #     fi

      # - name: Notify on Slack
      #   #if: ${{ steps.filter-expiring-certificates.outputs.certificates }}
      #   uses: rtCamp/action-slack-notify@v2
      #   with:
      #     entryPoint: send
      #     args: status=warning title='Expiring Certificates Alert' text='The following certificates in Azure Key Vaults are expiring within 30 days: \n' channel=#pagerduty-alert-dump icon_emoji=:warning:
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Remove Runner IP to Key Vault Firewall
        run: az keyvault network-rule remove --name pdhstaging-keyvault --ip-address $runner_ip

