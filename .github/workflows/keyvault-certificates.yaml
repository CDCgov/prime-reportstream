name: Check Key Vault Certificates Expiration

on:
  push: 
    branches:
      - feature/check-keyvauly-cert-expiration
    
jobs:
  check-certificates:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Changes
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f
        
      - name: Login into Azure  
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: Install PowerShell and PowerShellGet
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell
          Install-Module -Name PowerShellGet -Force
          Import-Module -Name PowerShellGet
          Install-PackageProvider -Name NuGet -Force
          Install-Module -Name AzureRM -Scope CurrentUser
          pwsh -Command "Install-PackageProvider -Name NuGet -Force; Import-Module PowerShellGet"

      - name: Install Azure PowerShell module
        run: pwsh -Command "Install-Module -Name Az -Scope CurrentUser -Force"

      - name: Check Certificate Expiration
        run: |
          cert=$(Get-AzKeyVaultCertificate -VaultName pdhstaging-keyvault -Name staging-reportstream-cdc-gov)
          if ($cert.NotAfter -lt (Get-Date).AddDays(30)) {
            Write-Error "Certificate is expiring soon: $($cert.NotAfter)"
          } else {
            Write-Host "Certificate is still valid"
          }

      # - name: Check Key Vault Certificates Expiration
      #   run: |

      #     certificates=$(az keyvault certificate get --vault-name pdhprod-keyvault --query "[].{name:name,expirationDate:attributes.exp}")
          
      #     for cert in $(echo "${certificates}" | jq -c '.[]'); do
      #       name=$(echo "${cert}" | jq -r '.name')
      #       expiration=$(echo "${cert}" | jq -r '.expirationDate')
      #       expiration_timestamp=$(date -d "${expiration}" +%s)
      #       current_timestamp=$(date +%s)
      #       days_remaining=$(( (${expiration_timestamp} - ${current_timestamp}) / 86400 ))
      #       if [[ ${days_remaining} -lt 30 ]]; then
      #         echo "The certificate ${name} will expire in ${days_remaining} days."
      #       fi
      #     done
      
      # - name: Connect to VPN and login to Azure
      #   uses: ./.github/actions/vpn-azure
      #   with:
      #     tls-key: ${{ secrets.TLS_KEY }}
      #     ca-cert: ${{ secrets.CA_CRT}}
      #     user-crt: ${{ secrets.USER_CRT }}
      #     user-key: ${{ secrets.USER_KEY }}
      #     sp-creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}


      # - name: Get Certificates Expiration
      #   run: |
      #     az keyvault certificate list --vault-name pdhprod-keyvault --query "[].{name:name, expires:attributes.expires}" --output table

      # - name: Get Near Expiry Certificates
      #   run: |
      #     near_expiry_date=$(date -d "+10 days" -I)
      #     near_expiry_certificates=$(az keyvault certificate list --vault-name pdhprod-keyvault --query "[?attributes.expires<=\`$near_expiry_date\`].name" -o tsv)

      #     echo "The following certificates will expire within the next 10 days: $near_expiry_certificates"



# name: Key Vault Certificate Expiry Check

# on:
#   schedule:
#     # Run the workflow daily at 8:00 AM UTC
#     - cron: '0 8 * * *'

# env:
#   KEYVAULT_NAME: your-key-vault-name
#   KEYVAULT_CERTS_EXPIRY_THRESHOLD_DAYS: 30
#   EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
#   EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
#   NOTIFY_EMAILS: ${{ secrets.NOTIFY_EMAILS }}

# jobs:
#   check_expiry:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Get Expiring Certificates
#       uses: azure/cli@v1
#       with:
#         azcliversion: 2.28.0
#         inlineScript: |
#           expiring_certificates=$(az keyvault certificate list --vault-name ${{ env.KEYVAULT_NAME }} --query "[?attributes.expires<=\`$(date -u -d '+${{ env.KEYVAULT_CERTS_EXPIRY_THRESHOLD_DAYS }} days' +%Y-%m-%d)\`]" -o tsv --query "[].id")
#           if [ -z "$expiring_certificates" ]; then
#             echo "::set-output name=near_expiry_certificates::None"
#           else
#             echo "::set-output name=near_expiry_certificates::$expiring_certificates"
#           fi
#       id: get_expiry
#     - name: Send Email Notification
#       uses: dawidd6/action-send-mail@v3
#       with:
#         server_address: smtp.gmail.com
#         server_port: 587
#         username: ${{ env.EMAIL_USERNAME }}
#         password: ${{ env.EMAIL_PASSWORD }}
#         subject: Near Expiry Certificates Notification
#         body: |
#           The following certificates will expire within the next ${env.KEYVAULT_CERTS_EXPIRY_THRESHOLD_DAYS} days: ${{ steps.get_expiry.outputs.near_expiry_certificates }}
#         to: ${{ env.NOTIFY_EMAILS }}
#         from: your-email-address@example.com
