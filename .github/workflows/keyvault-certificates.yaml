name: Check Key Vault Certificates Expiration

on:
  push: 
    branches:
      - feature/check-keyvauly-cert-expiration
    
jobs:
  check-certificates:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Changes
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f

      - name: Get Runner IP
        run: echo "::set-output name=runner_ip::$(curl https://ifconfig.me)"
        id: runner_ip

      - name: Connect to VPN & Login into Azure
        uses: ./.github/actions/vpn-azure
        with:
          tls-key: ${{ secrets.TLS_KEY }}
          ca-cert: ${{ secrets.CA_CRT}}
          user-crt: ${{ secrets.USER_CRT }}
          user-key: ${{ secrets.USER_KEY }}
          sp-creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: Add Runner IP to Key Vault Firewall
        uses: azure/cli@v1
        with:
          inlineScript: |
            az keyvault network-rule add --name pdhstaging-keyvault --ip-address ${{ steps.runner_ip.outputs.runner_ip }}

      - name: List certificates
        run: |
          certificates=$(az keyvault certificate list --vault-name pdhstaging-keyvault --query "[?attributes.expires > '1970-01-01T00:00:00Z' && attributes.expires <= '@{datetime.datetime.utcnow() + datetime.timedelta(days=30)}'].{id:id,name:name,expires:attributes.expires}" -o json > certificates.json)
          cat certificates.json

      - name: Filter certificates expiring within 30 days
        run: |
          # Get the current date in UTC format
          current_date=$(date -u +"%Y-%m-%dT%H:%M:%S%Z")
          # Calculate the date 30 days from now
          threshold_date=$(date -u -d "+300 days" +"%Y-%m-%dT%H:%M:%S%Z")
          # Filter certificates based on expiry date using jq, with error handling
          expiring_certificates=$(jq --arg current_date "$current_date" --arg threshold_date "$threshold_date" '.[] | select(.attributes and (.attributes.expires | sub("\\.[0-9]+Z$"; "Z")) <= $threshold_date and (.attributes.expires | sub("\\.[0-9]+Z$"; "Z")) >= $current_date)' certificates.json || true)


      - name: Slack Notification
        uses: ./.github/actions/notifications
        with:
          method: slack
          title: Expiring Certificates
          message: |
            certificates=$(az keyvault certificate list --vault-name pdhstaging-keyvault --query "[?attributes.expires > '1970-01-01T00:00:00Z' && attributes.expires <= '@{datetime.datetime.utcnow() + datetime.timedelta(days=30)}'].{id:id,name:name,expires:attributes.expires}" -o json > certificates.json)
          icon-emoji: ':bell:'
          channel: temp_branch_dump
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          color: warning
          

      - name: Remove Runner IP to Key Vault Firewall
        run: |
          az keyvault network-rule remove --name pdhprod-keyvault --ip-address $runner_ip
          az keyvault network-rule remove --name pdhstaging-keyvault --ip-address $runner_ip



      # webhook_url=${{ secrets.SLACK_WEBHOOK_URL }}
      # messageprod=$(az keyvault certificate list --vault-name pdhprod-keyvault --query "[].{name:name, expires:attributes.expires}" --output table)
      # messagestg=$(az keyvault certificate list --vault-name pdhstaging-keyvault --query "[].{name:name, expires:attributes.expires}" --output table)
      # payloadprod="{\"text\":\"${messageprod}\"}"
      # payloadstg="{\"text\":\"${messagestg}\"}"
      # curl -X POST -H "Content-Type: application/json" -d "${payloadprod}" ${webhook_url}
      # curl -X POST -H "Content-Type: application/json" -d "${payloadstg}" ${webhook_url}
