name: Terraform

on:
  pull_request:
    branches:
      - master

jobs:
  pre_job:
    name: Pre Job
    runs-on: ubuntu-latest
    outputs:
      has_operations_change: ${{ steps.skip_check.outputs.operations }}
    steps:
      - name: Check Out Changes
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - uses: dorny/paths-filter@1ec7035ff53cbd7a98744bd986f6ca1c7e17d1cb
        id: skip_check
        with:
          list-files: csv
          # Only proceed if path of terraform overhaul exists and/or contents are updated
          filters: |
            operations:
              - 'operations/app/terraform/**'
              - '.github/workflows/validate_terraform.yml'

  validate_terraform_yaml:
    name: Validate Terraform YAML
    needs: pre_job
    if: ${{ needs.pre_job.outputs.has_operations_change == 'true' }}
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Changes
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Verify Terraform Formatting
        run: terraform -chdir=operations/app/terraform/vars/staging fmt -check -recursive ../../

  generate_terraform_plan_staging:
    name: Generate Terraform Plan for Staging
    needs: 
      - pre_job
      - validate_terraform_yaml
    if: ${{ needs.pre_job.outputs.has_operations_change == 'true' }}
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Changes
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Connect to VPN and login to Azure
        uses: ./.github/actions/vpn-azure
        with:
          env-name: staging
          tls-key: ${{ secrets.TLS_KEY }}
          ca-cert: ${{ secrets.CA_CRT}}
          user-crt: ${{ secrets.USER_CRT }}
          user-key: ${{ secrets.USER_KEY }}
          sp-creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}
          tf-auth: true

      - name: Initialize Terraform
        run: terraform -chdir=operations/app/terraform/vars/staging init

      - name: Validate All Terraform Modules
        run: terraform -chdir=operations/app/terraform/vars/staging validate

      - name: Generate a Plan for All Terraform Modules
        run: |
          terraform -chdir=operations/app/terraform/vars/staging plan \
            -out=../../../plan/staging-${{ github.run_id }}-${{ github.sha }}.json \
            -input=false -lock-timeout=60s -json

      - name: Upload Terraform Plan to Storage Account
        if: ${{ always() }} # We want to upload whatever part of the plan we have
        run: |
          az storage blob upload-batch --account-name pdhstagingterraform \
            --destination terraformplan \
            --destination-path "${{ github.run_id }}-${{ github.sha }}" \
            --source operations/app/plan \
            --pattern 'staging-*'

      - name: Directions for Downloading Plan
        if: ${{ always() }}
        run: |
          echo -e "DOWNLOAD THE TERRAFORM PLAN LOCALLY WITH THIS COMMAND:"
          echo -e ""
          echo -e "az storage blob directory download --account-name pdhstagingterraform --container terraformplan --source-path ${{ github.run_id }}-${{ github.sha }} --recursive --destination-path ."
