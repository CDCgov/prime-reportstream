name: Terraform

on:
  pull_request:
    branches:
      - master
      - production

jobs:
  pre_job:
    name: Pre Job
    runs-on: ubuntu-latest
    outputs:
      has_operations_change: ${{ steps.skip_check.outputs.operations }}
    steps:
      - uses: dorny/paths-filter@v2
        id: skip_check
        with:
          list-files: csv
          filters: |
            operations:
              - 'operations/app/**'
              - 'operations/docker-compose.yml'
              - 'operations/Dockerfile'
              - 'operations/Makefile'
              - '.github/workflows/validate_terraform.yml'

  validate_terraform_yaml:
    name: Validate Terraform YAML
    needs: pre_job
    if: ${{ needs.pre_job.outputs.has_operations_change == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: operations
    steps:
      - name: Check Out Changes
        uses: actions/checkout@v3

      - name: Verify Terraform Formatting
        run: |
          make tf-cmd TF_CMD="terraform fmt -check -recursive /app/src"

      - name: Validate All Terraform Modules
        run: |
          make TF_ENV=staging tf-validate

  generate_terraform_plan_staging:
    name: Generate Terraform Plan for Staging
    needs: pre_job
    if: ${{ needs.pre_job.outputs.has_operations_change == 'true' }}
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Changes
        uses: actions/checkout@v3

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get install openvpn
          sudo apt install openvpn-systemd-resolved

      - name: Connect VPN
        uses: golfzaptw/action-connect-ovpn@master
        id: connect_vpn
        with:
          PING_URL: "127.0.0.1"
          FILE_OVPN: ".github/vpn/staging.ovpn"
          TLS_KEY: ${{ secrets.TLS_KEY }}
        env:
          CA_CRT: ${{ secrets.CA_CRT}}
          USER_CRT: ${{ secrets.USER_CRT }}
          USER_KEY: ${{ secrets.USER_KEY }}

      - name: Generate a Plan for All Terraform Modules
        working-directory: operations
        env:
          SERVICE_PRINCIPAL_CREDS: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}
        run: |
          make TF_ENV=staging AZ_SERVICE_PRINCIPAL="${SERVICE_PRINCIPAL_CREDS?}" tf-plan

      - name: Upload Terraform Plan to Storage Account
        if: ${{ always() }} # We want to upload whatever part of the plan we have
        run: |
          az storage blob upload-batch --account-name pdhstagingterraform \
            --destination terraformplan \
            --destination-path "${{ github.run_id }}-${{ github.sha }}" \
            --source operations/app/plan \
            --pattern 'staging-*'

      - name: Directions for Downloading Plan
        if: ${{ always() }}
        run: |
          echo -e "DOWNLOAD THE TERRAFORM PLAN LOCALLY WITH THIS COMMAND:"
          echo -e ""
          echo -e "az storage blob directory download --account-name pdhstagingterraform --container terraformplan --source-path ${{ github.run_id }}-${{ github.sha }} --recursive --destination-path ."