name: Terraform

on:
  pull_request:
    branches:
      - master

jobs:
  pre_job:
    name: Pre Job
    runs-on: ubuntu-latest
    outputs:
      has_operations_change: ${{ steps.skip_check.outputs.operations }}
    steps:
      - uses: dorny/paths-filter@v2
        id: skip_check
        with:
          list-files: csv
          # Only proceed if path of terraform overhaul exists and/or contents are updated
          filters: |
            operations:
              - 'operations/app/terraform/**'
              - '.github/workflows/validate_terraform.yml'

  generate_terraform_plan_staging:
    name: Generate Terraform Plan for Staging
    needs: pre_job
    if: ${{ needs.pre_job.outputs.has_operations_change == 'true' }}
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Changes
        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748

      - name: Connect to VPN and login to Azure
        uses: ./.github/actions/vpn-azure
        with:
          env-name: ${{ needs.pre_job.outputs.env_name }}
          tls-key: ${{ secrets.TLS_KEY }}
          ca-cert: ${{ secrets.CA_CRT}}
          user-crt: ${{ secrets.USER_CRT }}
          user-key: ${{ secrets.USER_KEY }}
          sp-creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: Terraform init azurerm backend
        uses: ahmedig/terraform-azurerm-backend@9ef835db31c52a0049bc60f295b869213e0fa580
        with:
          azure_credentials: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}
          resource_group_name: prime-data-hub-staging
          container_name: terraformstate
          storage_account_name: pdhstagingnewterraform
          file_name: staging.terraform.tfstate
          tf_working_directory: operations/app/terraform/vars/staging

      - name: Verify Terraform Formatting
        run: |
          terraform fmt -check -recursive ../../

      - name: Validate All Terraform Modules
        run: terraform validate

      - name: Generate a Plan for All Terraform Modules
        run: |
          terraform -out ../../plan/staging-${{ github.run_id }}-${{ github.sha }}.tf

      - name: Upload Terraform Plan to Storage Account
        if: ${{ always() }} # We want to upload whatever part of the plan we have
        run: |
          az storage blob upload-batch --account-name pdhstagingterraform \
            --destination terraformplan \
            --destination-path "${{ github.run_id }}-${{ github.sha }}" \
            --source operations/app/plan \
            --pattern 'staging-*'

      - name: Directions for Downloading Plan
        if: ${{ always() }}
        run: |
          echo -e "DOWNLOAD THE TERRAFORM PLAN LOCALLY WITH THIS COMMAND:"
          echo -e ""
          echo -e "az storage blob directory download --account-name pdhstagingterraform --container terraformplan --source-path ${{ github.run_id }}-${{ github.sha }} --recursive --destination-path ."
