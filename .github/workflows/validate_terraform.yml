name: Terraform

on:
  pull_request:
    branches:
      - master

jobs:
  pre_job:
    name: Pre Job
    runs-on: ubuntu-latest
    outputs:
      has_operations_change: ${{ steps.build_vars.outputs.has_terraform_change }}
    steps:
      - name: Check Out Changes
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - name: Build vars
        id: build_vars
        uses: ./.github/actions/build-vars

  validate_terraform_yaml:
    name: Validate Terraform YAML
    needs: pre_job
    if: ${{ needs.pre_job.outputs.has_operations_change == 'true' }}
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Changes
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - name: Use specific version of Terraform
        uses: hashicorp/setup-terraform@17d4c9b8043b238f6f35641cdd8433da1e6f3867
        with:
          terraform_version: 1.1.9
          terraform_wrapper: false
      - name: Verify Terraform Formatting
        run: terraform -chdir=operations/app/terraform/vars/staging fmt -check -recursive ../../

  generate_terraform_plan_staging:
    name: Generate Terraform Plan for Staging
    needs: 
      - pre_job
      - validate_terraform_yaml
    if: ${{ needs.pre_job.outputs.has_operations_change == 'true' }}
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Changes
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - name: Connect to VPN and login to Azure
        uses: ./.github/actions/vpn-azure
        with:
          env-name: staging
          tls-key: ${{ secrets.TLS_KEY }}
          ca-cert: ${{ secrets.CA_CRT}}
          user-crt: ${{ secrets.USER_CRT }}
          user-key: ${{ secrets.USER_KEY }}
          sp-creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}
          tf-auth: true
      - name: Use specific version of Terraform
        uses: hashicorp/setup-terraform@17d4c9b8043b238f6f35641cdd8433da1e6f3867
        with:
          terraform_version: 1.1.9
          terraform_wrapper: false
      - name: Initialize Terraform
        run: terraform -chdir=operations/app/terraform/vars/staging init
      - name: Validate All Terraform Modules
        run: terraform -chdir=operations/app/terraform/vars/staging validate
      - name: Generate a Plan for All Terraform Modules
        run: |
          terraform -chdir=operations/app/terraform/vars/staging plan \
            -out=../../../plan/staging-${{ github.run_id }}-${{ github.sha }}.json \
            -input=false -lock-timeout=60s -json
      - name: Upload Terraform Plan to Storage Account
        if: ${{ always() }} # We want to upload whatever part of the plan we have
        run: |
          az storage blob upload-batch --account-name pdhstagingterraform \
            --destination terraformplan \
            --destination-path "${{ github.run_id }}-${{ github.sha }}" \
            --source operations/app/plan \
            --pattern 'staging-*'
      - name: Directions for Downloading Plan
        if: ${{ always() }}
        run: |
          echo -e "DOWNLOAD THE TERRAFORM PLAN LOCALLY WITH THIS COMMAND:"
          echo -e ""
          echo -e "az storage blob directory download --account-name pdhstagingterraform --container terraformplan --source-path ${{ github.run_id }}-${{ github.sha }} --recursive --destination-path ."
