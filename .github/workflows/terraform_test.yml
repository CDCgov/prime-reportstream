name: Terraform Test

on: push

jobs:
  pre_job:
    name: Pre Job
    runs-on: ubuntu-latest
    outputs:
      has_operations_change: ${{ steps.skip_check.outputs.operations }}
    steps:
      - name: Check Out Changes
        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748

      - uses: dorny/paths-filter@1ec7035ff53cbd7a98744bd986f6ca1c7e17d1cb
        id: skip_check
        with:
          list-files: csv
          # Only proceed if path of terraform overhaul exists and/or contents are updated
          filters: |
            operations:
              - 'operations/app/terraform/**'
              - '.github/workflows/validate_terraform.yml'
              - '.github/workflows/terraform_test.yml'

  validate_terraform_yaml:
    name: Validate Terraform YAML
    needs: pre_job
    if: ${{ needs.pre_job.outputs.has_operations_change == 'true' }}
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Changes
        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748

      - name: Connect to VPN and login to Azure
        uses: ./.github/actions/vpn-azure
        with:
          env-name: staging
          tls-key: ${{ secrets.TLS_KEY }}
          ca-cert: ${{ secrets.CA_CRT}}
          user-crt: ${{ secrets.USER_CRT }}
          user-key: ${{ secrets.USER_KEY }}
          sp-creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}
          tf-auth: true
   
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.5

      - name: Terraform Format
        id: fmt
        run: terraform fmt -chdir=operations/app/terraform/vars/staging -check -recursive ../..

      - name: Terraform Init
        id: init
        run: terraform init -chdir=operations/app/terraform/vars/staging
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color -chdir=operations/app/terraform/vars/staging

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -chdir=operations/app/terraform/vars/staging
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
