name: Release to Azure

on:
  push:
    branches:
      - master
      - production
      - dev-rheft
      - ronheft/test-investigation

defaults:
  run:
    working-directory: prime-router

jobs:
  build_release:
    name: "Release: Build Router"
    runs-on: ubuntu-latest
    env:
      # These are for CI and not credentials of any system
      POSTGRES_USER: prime
      POSTGRES_PASSWORD: changeIT!
    steps:
      - name: "Check out changes"
        uses: actions/checkout@v2

      - name: Set Environment Variables
        run: |
          echo >> $GITHUB_ENV DB_USER=${POSTGRES_USER}
          echo >> $GITHUB_ENV DB_PASSWORD=${POSTGRES_PASSWORD}

      # Appears not to be needed on GitHub (but needed when running act [https://github.com/nektos/act] locally)
      # - name: Install docker-compose
      #   run: apt-get update && apt-get --yes install docker-compose

      - name: Build Prime Router Package
        run: bash ./build.sh -- gradle clean package

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        # Per https://github.com/EnricoMi/publish-unit-test-result-action#support-fork-repositories-and-dependabot-branches
        if: >
          always() &&
          github.event.sender.login != 'dependabot[bot]' &&
          ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
        with:
          # This path is from the root of the repo as needed by the plugin
          files: prime-router/build/test-results/test/**/*.xml

      - name: Run Integration Tests
        run: bash ./gradlew testIntegration -Pshowtests

      - name: Publish Integration Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        # Per https://github.com/EnricoMi/publish-unit-test-result-action#support-fork-repositories-and-dependabot-branches
        if: >
          always() &&
          github.event.sender.login != 'dependabot[bot]' &&
          ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
        with:
          # This path is from the root of the repo as needed by the plugin
          files: prime-router/build/test-results/testIntegration/**/*.xml
          check_name: "Integration Test Results"

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: prime-router-build-${{ github.run_id }}
          path: prime-router/build
          retention-days: 7

  build_frontend_release:
    name: "Release: Build Frontend"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: "Check out changes"
        uses: actions/checkout@v2

      - name: Run Build Script
        run: bash ci_build.bash

      - name: Save Static Website
        uses: actions/upload-artifact@v2
        with:
          name: static_website-${{ github.run_id }}
          path: frontend/dist
          retention-days: 7

      - name: Validate static website server
        run: bash ci_validate.bash


  build_frontend_react_release:
    name: "Release: Build Frontend React"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend-react

    steps:
      - name: "Check out changes"
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }} yarn
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: yarn install
      - run: yarn run build
      
      - name: Save Static Website
        uses: actions/upload-artifact@v2
        with:
          name: static_website_react-${{ github.run_id }}
          path: frontend-react/build
          retention-days: 7


  deploy_release_dev:
    name: "Deploy Release: DEV"
    needs:
      - build_release
      - build_frontend_react_release
    if: github.ref == 'refs/heads/dev-rheft'
    environment: dev
    concurrency: dev
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: prime-dev-rheft
      ACR_REPO: rkh5012containerregistry.azurecr.io
      PREFIX: rkh5012
    steps:
      - name: "Check out changes"
        uses: actions/checkout@v2

      - name: Download Router Artifact
        uses: actions/download-artifact@v2
        with:
          name: prime-router-build-${{ github.run_id }}
          path: prime-router/build

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v2
        with:
          name: static_website-${{ github.run_id }}
          path: frontend/dist

      - name: Download Frontend-React Artifact
        uses: actions/download-artifact@v2
        with:
          name: static_website_react-${{ github.run_id }}
          path: frontend-react/build          

      - name: Build Docker Image
        run: docker build . --file Dockerfile --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:latest --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.sha }}

      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get install openvpn
          sudo apt install openvpn-systemd-resolved

      - name: Connect VPN
        uses: golfzaptw/action-connect-ovpn@2.0.1
        id: connect_vpn
        with:
          FILE_OVPN: ".github/vpn/dev.ovpn"
          TLS_KEY: ${{ secrets.TLS_KEY }}
        env:
          CA_CRT: ${{ secrets.CA_CRT}}
          USER_CRT: ${{ secrets.USER_CRT }}
          USER_KEY: ${{ secrets.USER_KEY }}

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: ACR Login
        run: az acr login --name ${{ env.ACR_REPO }}

      - name: Push Docker Image
        run: docker push ${{ env.ACR_REPO }}/${{ env.PREFIX }} --all-tags

      - name: Whitelist GitHub Action Runner in Function App Slot
        id: ip-whitelist-create
        run: |
          RUNNER_IP="$(dig +short myip.opendns.com @resolver1.opendns.com)"
          echo "::add-mask::$RUNNER_IP"
          az functionapp config access-restriction add -g ${{ env.RESOURCE_GROUP }} -n ${{ env.PREFIX }}-functionapp --slot candidate --rule-name GitHubActionIPV4 --action Allow --ip-address $RUNNER_IP --priority 750 > /dev/null 2>&1

      - name: Deploy to Candidate App Slot
        uses: Azure/functions-container-action@v1
        id: deploy-candidate
        with:
          app-name: ${{ env.PREFIX }}-functionapp
          image: ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.sha }}
          slot-name: candidate

      - name: Promote Candidate Slot
        id: promote-candidate
        working-directory: operations
        run: make TF_ENV=rheft AZ_RESOURCE_PREFIX=${{ env.PREFIX }} AZ_RESOURCE_GROUP=${{ env.RESOURCE_GROUP }} zdd-promote-slot

      - name: Remove GitHub Action IP Whitelist
        if: ${{ always() }} # This should happen even on a failure
        id: ip-whitelist-destroy
        run: |
          az functionapp config access-restriction remove -g ${{ env.RESOURCE_GROUP }} -n ${{ env.PREFIX }}-functionapp --slot candidate --rule-name GitHubActionIPV4 > /dev/null 2>&1

      - name: Upload Static Site React
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name ${{ env.PREFIX }}public -d '$web' -s frontend-react/build

  deploy_release_test:
    name: "Deploy Release: TEST"
    needs:
      - build_release
      - build_frontend_release
    if: github.ref == 'refs/heads/ronheft/test-investigation'
    environment: test
    concurrency: test
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: prime-data-hub-test
      ACR_REPO: pdhtestcontainerregistry.azurecr.io
      PREFIX: pdhtest
    steps:
      - name: "Check out changes"
        uses: actions/checkout@v2

      - name: Download Router Artifact
        uses: actions/download-artifact@v2
        with:
          name: prime-router-build-${{ github.run_id }}
          path: prime-router/build

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v2
        with:
          name: static_website-${{ github.run_id }}
          path: frontend/dist

      - name: Build Docker Image
        run: docker build . --file Dockerfile --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:latest --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.sha }}

      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get install openvpn
          sudo apt install openvpn-systemd-resolved

      - name: Connect VPN
        uses: golfzaptw/action-connect-ovpn@2.0.1
        id: connect_vpn
        with:
          FILE_OVPN: ".github/vpn/test.ovpn"
          TLS_KEY: ${{ secrets.TLS_KEY }}
        env:
          CA_CRT: ${{ secrets.CA_CRT}}
          USER_CRT: ${{ secrets.USER_CRT }}
          USER_KEY: ${{ secrets.USER_KEY }}

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: ACR Login
        run: az acr login --name ${{ env.ACR_REPO }}

      - name: Push Docker Image
        run: docker push ${{ env.ACR_REPO }}/${{ env.PREFIX }} --all-tags

      - name: Whitelist GitHub Action Runner in Function App Slot
        id: ip-whitelist-create
        run: |
          RUNNER_IP="$(dig +short myip.opendns.com @resolver1.opendns.com)"
          echo "::add-mask::$RUNNER_IP"
          az functionapp config access-restriction add -g ${{ env.RESOURCE_GROUP }} -n ${{ env.PREFIX }}-functionapp --slot candidate --rule-name GitHubActionIPV4 --action Allow --ip-address $RUNNER_IP --priority 750 > /dev/null 2>&1

      - name: Deploy to Candidate App Slot
        uses: Azure/functions-container-action@v1
        id: deploy-candidate
        with:
          app-name: ${{ env.PREFIX }}-functionapp
          image: ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.sha }}
          slot-name: candidate

      - name: Promote Candidate Slot
        id: promote-candidate
        working-directory: operations
        run: make TF_ENV=test AZ_RESOURCE_PREFIX=${{ env.PREFIX }} AZ_RESOURCE_GROUP=${{ env.RESOURCE_GROUP }} zdd-promote-slot

      - name: Remove GitHub Action IP Whitelist
        if: ${{ always() }} # This should happen even on a failure
        id: ip-whitelist-destroy
        run: |
          az functionapp config access-restriction remove -g ${{ env.RESOURCE_GROUP }} -n ${{ env.PREFIX }}-functionapp --slot candidate --rule-name GitHubActionIPV4 > /dev/null 2>&1

      - name: Upload Static Site
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob delete-batch --account-name ${{ env.PREFIX }}public -s '$web'
            az storage blob upload-batch --account-name ${{ env.PREFIX }}public -d '$web' -s frontend/dist

  deploy_release_staging:
    name: "Deploy Release: STAGING"
    needs:
      - build_release
      - build_frontend_react_release
    if: github.ref == 'refs/heads/master'
    environment: staging
    concurrency: staging
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: prime-data-hub-staging
      ACR_REPO: pdhstagingcontainerregistry.azurecr.io
      PREFIX: pdhstaging
    steps:
      - name: "Check out changes"
        uses: actions/checkout@v2

      - name: Download Router Artifact
        uses: actions/download-artifact@v2
        with:
          name: prime-router-build-${{ github.run_id }}
          path: prime-router/build

      - name: Download Frontend Artifact (React)
        uses: actions/download-artifact@v2
        with:
          name: static_website_react-${{ github.run_id }}
          path: frontend-react/build

      - name: Build Docker Image
        run: docker build . --file Dockerfile --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:latest --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.sha }}

      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get install openvpn
          sudo apt install openvpn-systemd-resolved

      - name: Connect VPN
        uses: golfzaptw/action-connect-ovpn@2.0.1
        id: connect_vpn
        with:
          FILE_OVPN: ".github/vpn/staging.ovpn"
          TLS_KEY: ${{ secrets.TLS_KEY }}
        env:
          CA_CRT: ${{ secrets.CA_CRT}}
          USER_CRT: ${{ secrets.USER_CRT }}
          USER_KEY: ${{ secrets.USER_KEY }}

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: ACR Login
        run: az acr login --name ${{ env.ACR_REPO }}

      - name: Push Docker Image
        run: docker push ${{ env.ACR_REPO }}/${{ env.PREFIX }} --all-tags

      - name: Whitelist GitHub Action Runner in Function App Slot
        id: ip-whitelist-create
        run: |
          RUNNER_IP="$(dig +short myip.opendns.com @resolver1.opendns.com)"
          echo "::add-mask::$RUNNER_IP"
          az functionapp config access-restriction add -g ${{ env.RESOURCE_GROUP }} -n ${{ env.PREFIX }}-functionapp --slot candidate --rule-name GitHubActionIPV4 --action Allow --ip-address $RUNNER_IP --priority 750 > /dev/null 2>&1

      - name: Deploy to Candidate App Slot
        uses: Azure/functions-container-action@v1
        id: deploy-candidate
        with:
          app-name: ${{ env.PREFIX }}-functionapp
          image: ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.sha }}
          slot-name: candidate

      - name: Promote Candidate Slot
        id: promote-candidate
        working-directory: operations
        run: make TF_ENV=staging AZ_RESOURCE_PREFIX=${{ env.PREFIX }} AZ_RESOURCE_GROUP=${{ env.RESOURCE_GROUP }} zdd-promote-slot

      - name: Remove GitHub Action IP Whitelist
        if: ${{ always() }} # This should happen even on a failure
        id: ip-whitelist-destroy
        run: |
          az functionapp config access-restriction remove -g ${{ env.RESOURCE_GROUP }} -n ${{ env.PREFIX }}-functionapp --slot candidate --rule-name GitHubActionIPV4 > /dev/null 2>&1

      - name: Upload Static Site
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob delete-batch --account-name ${{ env.PREFIX }}public -s '$web'
            az storage blob upload-batch --account-name ${{ env.PREFIX }}public -d '$web' -s frontend-react/build

  deploy_release_prod:
    name: "Deploy Release: PROD"
    needs:
      - build_release
      - build_frontend_release
    if: github.ref == 'refs/heads/production'
    environment: prod
    concurrency: prod
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: prime-data-hub-prod
      ACR_REPO: pdhprodcontainerregistry.azurecr.io
      PREFIX: pdhprod
    steps:
      - name: "Check out changes"
        uses: actions/checkout@v2

      - name: Download Router Artifact
        uses: actions/download-artifact@v2
        with:
          name: prime-router-build-${{ github.run_id }}
          path: prime-router/build

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v2
        with:
          name: static_website-${{ github.run_id }}
          path: frontend/dist

      - name: Build Docker Image
        run: docker build . --file Dockerfile --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:latest --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.sha }}

      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get install openvpn
          sudo apt install openvpn-systemd-resolved

      - name: Connect VPN
        uses: golfzaptw/action-connect-ovpn@2.0.1
        id: connect_vpn
        with:
          FILE_OVPN: ".github/vpn/prod.ovpn"
          TLS_KEY: ${{ secrets.TLS_KEY }}
        env:
          CA_CRT: ${{ secrets.CA_CRT}}
          USER_CRT: ${{ secrets.USER_CRT }}
          USER_KEY: ${{ secrets.USER_KEY }}

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICE_PRINCIPAL_CREDS }}

      - name: ACR Login
        run: az acr login --name ${{ env.ACR_REPO }}

      - name: Push Docker Image
        run: docker push ${{ env.ACR_REPO }}/${{ env.PREFIX }} --all-tags

      - name: Whitelist GitHub Action Runner in Function App Slot
        id: ip-whitelist-create
        run: |
          RUNNER_IP="$(dig +short myip.opendns.com @resolver1.opendns.com)"
          echo "::add-mask::$RUNNER_IP"
          az functionapp config access-restriction add -g ${{ env.RESOURCE_GROUP }} -n ${{ env.PREFIX }}-functionapp --slot candidate --rule-name GitHubActionIPV4 --action Allow --ip-address $RUNNER_IP --priority 750 > /dev/null 2>&1

      - name: Deploy to Candidate App Slot
        uses: Azure/functions-container-action@v1
        id: deploy-candidate
        with:
          app-name: ${{ env.PREFIX }}-functionapp
          image: ${{ env.ACR_REPO }}/${{ env.PREFIX }}:${{ github.sha }}
          slot-name: candidate

      - name: Promote Candidate Slot
        id: promote-candidate
        working-directory: operations
        run: make TF_ENV=prod AZ_RESOURCE_PREFIX=${{ env.PREFIX }} AZ_RESOURCE_GROUP=${{ env.RESOURCE_GROUP }} zdd-promote-slot

      - name: Remove GitHub Action IP Whitelist
        if: ${{ always() }} # This should happen even on a failure
        id: ip-whitelist-destroy
        run: |
          az functionapp config access-restriction remove -g ${{ env.RESOURCE_GROUP }} -n ${{ env.PREFIX }}-functionapp --slot candidate --rule-name GitHubActionIPV4 > /dev/null 2>&1

      - name: Upload Static Site
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob delete-batch --account-name ${{ env.PREFIX }}public -s '$web'
            az storage blob upload-batch --account-name ${{ env.PREFIX }}public -d '$web' -s frontend/dist