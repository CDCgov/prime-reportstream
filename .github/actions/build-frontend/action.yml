# action.yml
name: "Build Frontend"
description: "Build react website"
inputs:
  env-name:
    description: ReportStream app environment name
    required: true
  appinsights-staging-key:
    description: Instrumentation key for staging environment
    required: true
  appinsights-prod-key:
    description: Instrumentation key for production environment
    required: true
  version:
    description: "Version tag"
    required: true
  GITHUB_TOKEN:
    description: Github provided token
    required: false
    default: ""
  test-admin-user:
    description: Admin username for the e2e tests.
    required: false
    default: ""
  test-admin-password:
    description: Admin password for the e2e tests.
    required: false
    default: ""
  test-sender-user:
    description: Sender username for the e2e tests.
    required: false
    default: ""
  test-sender-password:
    description: Sender password for the e2e tests.
    required: false
    default: ""
  test-receiver-user:
    description: Receiver username for the e2e tests.
    required: false
    default: ""
  test-receiver-password:
    description: Receiver password for the e2e tests.
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Use Node.js with yarn
      uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
      with:
        node-version-file: "frontend-react/.nvmrc"

    - name: Build version checks
      run: |
        echo -n "node:";node --version
        echo -n "npm:";npm --version
        echo -n "yarn:";yarn --version
      working-directory: frontend-react
      shell: bash

    - run: yarn install
      working-directory: frontend-react
      shell: bash

    - name: Run lint
      if: ${{ !startsWith(inputs.env-name, 'trialfrontend') }}
      run: |
        echo "::group::Lint"
        yarn lint
        echo "::endgroup::"
      working-directory: frontend-react
      shell: bash

    - name: Run unit tests
      if: ${{ !startsWith(inputs.env-name, 'trialfrontend') }}
      uses: ./.github/actions/retry
      with:
        timeout_minutes: 10
        max_attempts: 3
        retry_wait_seconds: 10
        command: |
          set -e pipefail
          cd frontend-react
          echo "::group::Unit tests"
          yarn test:ci
          echo "::endgroup::"
        shell: bash

    - name: Install Playwright
      if: ${{ !startsWith(inputs.env-name, 'trialfrontend') }}
      working-directory: frontend-react
      run: |
        echo "::group::Install playwright"
        npx playwright install --with-deps
        echo "::endgroup::"
      shell: bash

    - name: Run E2E tests
      if: ${{ !startsWith(inputs.env-name, 'trialfrontend') }}
      working-directory: frontend-react
      env:
        TEST_ADMIN_USERNAME: ${{ inputs.test-admin-user }}
        TEST_ADMIN_PASSWORD: ${{ inputs.test-admin-password }}
        TEST_SENDER_USERNAME: ${{ inputs.test-sender-user }}
        TEST_SENDER_PASSWORD: ${{ inputs.test-sender-password }}
        TEST_RECEIVER_USERNAME: ${{ inputs.test-receiver-user }}
        TEST_RECEIVER_PASSWORD: ${{ inputs.test-receiver-password }}
      run: |
        echo "::group::E2E tests"
        yarn run test:e2e
        echo "::endgroup::"
      shell: bash

    - name: Store E2E Results
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808
      if: always() && ${{ !startsWith(inputs.env-name, 'trialfrontend') }}
      with:
        name: e2e-data
        path: frontend-react/e2e-data/
        retention-days: 7

    - name: Post Warnings as Comments
      if: always() && github.event.pull_request
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        WARNING_LOG_FILE: e2e-data/frontend-warnings.json
      run: |
        if [ -f "$WARNING_LOG_FILE" ]; then
          COMMENT="## ⚠️ Broken Links ⚠️\n\n"
          while IFS= read -r row; do
            URL=$(echo $row | jq -r '.url')
            ERROR=$(echo $row | jq -r '.message')
            COMMENT="${COMMENT}❌ $URL\n\n**Error:** \`$ERROR\`\n\n---\n\n"
          done < <(jq -c '.[]' "$WARNING_LOG_FILE")
          if [ "$COMMENT" != "## ⚠️ Broken Links ⚠️\n\n" ]; then
            curl -s -H "Authorization: token $GITHUB_TOKEN" -X POST -d "{\"body\": \"$COMMENT\"}" "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          fi
        fi
      shell: bash

    - name: Build release for production branch (conditional check)
      if: inputs.env-name == 'prod'
      uses: ./.github/actions/retry
      with:
        timeout_minutes: 10
        max_attempts: 1
        retry_wait_seconds: 0
        command: |
          set -e pipefail
          cd frontend-react
          echo "" >> .env.production
          echo "VITE_APPINSIGHTS_KEY=${{ inputs.appinsights-prod-key }}" >> .env.production
          echo "::group::Build"
          yarn build:production
          echo "::endgroup::"
        shell: bash

    - name: Build release for non-production branch (conditional check)
      if: inputs.env-name != 'prod'
      uses: ./.github/actions/retry
      with:
        timeout_minutes: 10
        max_attempts: 1
        retry_wait_seconds: 0
        command: |
          set -e pipefail
          cd frontend-react
          ENV=${{ inputs.env-name }}
          if [[ $ENV != demo* && $ENV != "test" && $ENV != trialfrontend* ]]; then ENV="staging"; fi
          echo "" >> .env.$ENV
          echo "VITE_APPINSIGHTS_KEY=${{ inputs.appinsights-staging-key }}" >> .env.$ENV
          echo "::group::Build"
          yarn build:$ENV
          echo "::endgroup::"
        shell: bash

    - name: Tar frontend files
      shell: bash
      working-directory: frontend-react
      run: tar -czf static-website-react.tar.gz build

    - name: Upload frontend artifact
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808
      with:
        name: static-website-react-${{ inputs.version }}
        path: frontend-react/static-website-react.tar.gz
        retention-days: 1
