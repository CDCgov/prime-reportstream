# action.yml
name: 'Push to ACR'
description: 'Build and push to Azure Container Registry. Deploy to function app.'
inputs:
  dct-root-pass:
    description: "Docker Content Trust root pass"
    required: false
  dct-repo-pass:
    description: "Docker Content Trust repo pass"
    required: false
  env-name:
    required: true
  version:
    description: "Version tag"
    required: true
  checksum-validation:
    default: false
    description: Run checksum validation step

runs:
  using: "composite"
  steps:

    - name: Set environment variables - demo1
      if: inputs.env-name == 'demo1'
      shell: bash
      run: |
        echo "RESOURCE_GROUP=prime-data-hub-demo1" >> $GITHUB_ENV
        echo "TERRAFORM_ENV=demo1" >> $GITHUB_ENV
        echo "ACR_NAME=pdhdemo1containerregistry.azurecr.io" >> $GITHUB_ENV
        echo "IMAGE_REPO=pdhdemo1" >> $GITHUB_ENV
        echo "IMAGE_SWAGGER_UI_REPO=swaggeruiapidocsstg" >> $GITHUB_ENV
        echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "FUNCTION_APP=pdhdemo1-functionapp" >> $GITHUB_ENV

    - name: Set environment variables - demo2
      if: inputs.env-name == 'demo2'
      shell: bash
      run: |
        echo "RESOURCE_GROUP=prime-data-hub-demo2" >> $GITHUB_ENV
        echo "TERRAFORM_ENV=demo2" >> $GITHUB_ENV
        echo "ACR_NAME=pdhdemo2containerregistry.azurecr.io" >> $GITHUB_ENV
        echo "IMAGE_REPO=pdhdemo2" >> $GITHUB_ENV
        echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "FUNCTION_APP=pdhdemo2-functionapp" >> $GITHUB_ENV

    - name: Set environment variables - demo3
      if: inputs.env-name == 'demo3'
      shell: bash
      run: |
        echo "RESOURCE_GROUP=prime-data-hub-demo3" >> $GITHUB_ENV
        echo "TERRAFORM_ENV=demo3" >> $GITHUB_ENV
        echo "ACR_NAME=pdhdemo3containerregistry.azurecr.io" >> $GITHUB_ENV
        echo "IMAGE_REPO=pdhdemo3" >> $GITHUB_ENV
        echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "FUNCTION_APP=pdhdemo3-functionapp" >> $GITHUB_ENV

    - name: Set environment variables - test
      if: inputs.env-name == 'test'
      shell: bash
      run: |
        echo "RESOURCE_GROUP=prime-data-hub-test" >> $GITHUB_ENV
        echo "TERRAFORM_ENV=test" >> $GITHUB_ENV
        echo "ACR_NAME=pdhtestcontainerregistry.azurecr.io" >> $GITHUB_ENV
        echo "IMAGE_REPO=pdhtest" >> $GITHUB_ENV
        echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "FUNCTION_APP=pdhtest-functionapp" >> $GITHUB_ENV

    - name: Set environment variables - staging
      if: inputs.env-name == 'staging'
      shell: bash
      run: |
        echo "RESOURCE_GROUP=prime-data-hub-staging" >> $GITHUB_ENV
        echo "TERRAFORM_ENV=staging" >> $GITHUB_ENV
        echo "ACR_NAME=pdhstagingcontainerregistry.azurecr.io" >> $GITHUB_ENV
        echo "IMAGE_REPO=pdhstaging" >> $GITHUB_ENV
        echo "IMAGE_SWAGGER_UI_REPO=swaggeruiapidocsstg" >> $GITHUB_ENV
        echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
        #echo "KEY_VAULT=pdhstaging-keyvault" >> $GITHUB_ENV
        #echo "KEY_NAME=pdhstaging-code-sign" >> $GITHUB_ENV
        echo "FUNCTION_APP=pdhstaging-functionapp" >> $GITHUB_ENV

    - name: Set environment variables - production
      if: inputs.env-name == 'prod'
      shell: bash
      run: |
        echo "RESOURCE_GROUP=prime-data-hub-prod" >> $GITHUB_ENV
        echo "TERRAFORM_ENV=prod" >> $GITHUB_ENV
        echo "ACR_NAME=pdhprodcontainerregistry.azurecr.io" >> $GITHUB_ENV
        echo "IMAGE_REPO=pdhprod" >> $GITHUB_ENV
        echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "FUNCTION_APP=pdhprod-functionapp" >> $GITHUB_ENV

    - name: Use DCT if dependencies exist
      if: env.KEY_VAULT && inputs.dct-root-pass && inputs.dct-repo-pass
      shell: bash
      run: echo "USE_DCT=true" >> $GITHUB_ENV

    - uses: actions/download-artifact@eaceaf801fd36c7dee90939fad912460b18a1ffe
      with:
        name: prime-router-build-${{ inputs.version }}
        path: prime-router

    - name: Unpack router files
      working-directory: prime-router
      run: tar -zxvf prime-router-build.tar.gz
      shell: bash

    - name: Upload Swagger UI (APIDocs staging only)
      if: inputs.env-name == 'staging' || inputs.env-name == 'demo1'
      shell: bash
      working-directory: prime-router
      run: |
        az storage blob delete-batch --account-name ${{ env.IMAGE_SWAGGER_UI_REPO }} -s '$web'
        az storage blob upload-batch --account-name ${{ env.IMAGE_SWAGGER_UI_REPO }} -s ./build/swagger-ui -d '$web'

    - name: ACR login
      uses: ./.github/actions/retry
      with:
        timeout_minutes: 2
        max_attempts: 3
        retry_wait_seconds: 20
        command: |
          cd prime-router
          az acr login --name ${{ env.ACR_NAME }}
        shell: bash

    - uses: Azure/get-keyvault-secrets@c2b531e47fab4ca7cd8df09d44a65256651bf46e
      if: env.USE_DCT == 'true'
      with:
        keyvault: ${{ env.KEY_VAULT }}
        secrets: ${{ env.KEY_NAME }}  # comma separated list of secret keys that need to be fetched from the Key Vault 
      id: key-vault

    - name: Create ssl key file
      if: env.USE_DCT == 'true'
      working-directory: prime-router
      run: |
        # Set key vault secret as private key file
        echo "$SSL_KEY" > private.pem
        chmod 600 private.pem
        # Public key from private key
        openssl rsa -in "private.pem" -pubout > "public.pem"
      shell: bash
      env:
        SSL_KEY: ${{ steps.key-vault.outputs[env.KEY_NAME] }}
    
    - name: Confirm if runner is a signer
      if: env.USE_DCT == 'true'
      working-directory: prime-router
      shell: bash
      run: |
        echo "DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=${{ inputs.dct-root-pass }}" >> $GITHUB_ENV
        echo "DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=${{ inputs.dct-repo-pass }}" >> $GITHUB_ENV
        docker trust inspect --pretty "${{ env.ACR_NAME }}/${{ env.IMAGE_REPO }}"
        SIGNERS=$(docker trust inspect "${{ env.ACR_NAME }}/${{ env.IMAGE_REPO }}" | jq '.[].Signers')
        if [[ "$SIGNERS" != *${{ env.IMAGE_REPO }}* ]]; then
          echo "NEEDS_SIGNER=true" >> $GITHUB_ENV
        fi

    - name: Add signer
      if: env.NEEDS_SIGNER == 'true'
      working-directory: prime-router
      shell: bash
      run: |
        # Delegate signing using the public key
        # Runs once if signer does not exist
        docker trust signer add --key "public.pem" "${{ env.IMAGE_REPO }}" "${{ env.ACR_NAME }}/${{ env.IMAGE_REPO }}"

    - name: Load the private key onto Docker trust store
      if: env.USE_DCT == 'true'
      working-directory: prime-router
      run: |
        docker trust key load --name "codesign" "private.pem"
        GREEN='\033[0;32m'
        PURPLE='\033[0;35m'
        NC='\033[0m' # No Color
        echo -e "Confirm \"${GREEN}Successfully imported key from private.pem${NC}\"" \
        "\nIf successful, IGNORE  \"${PURPLE}failed to import key to store: ...${NC}\" (due to unused content within private key)"
      shell: bash

    - name: Build Docker image
      uses: ./.github/actions/retry
      with:
        timeout_minutes: 20
        max_attempts: 3
        retry_wait_seconds: 60
        command: |
          cd prime-router
          docker build . \
            --file Dockerfile \
            --tag ${{ env.ACR_NAME }}/${{ env.IMAGE_REPO }}:latest \
            --tag ${{ env.ACR_NAME }}/${{ env.IMAGE_REPO }}:${{ env.TAG }}
        shell: bash

    - name: Push Docker image (signed)
      if: env.USE_DCT == 'true'
      run: |
        echo "DOCKER_CONTENT_TRUST=1" >> $GITHUB_ENV
        docker push ${{ env.ACR_NAME }}/${{ env.IMAGE_REPO }}:latest --disable-content-trust=false
        docker push ${{ env.ACR_NAME }}/${{ env.IMAGE_REPO }}:${{ env.TAG }} --disable-content-trust=false
        GREEN='\033[0;32m'
        echo -e "${GREEN}#############" \
        "\n${GREEN}#" \
        "\n${GREEN}#   SIGNED" \
        "\n${GREEN}#" \
        "\n${GREEN}#############"
      shell: bash

    - name: Push Docker image (unsigned)
      if: env.USE_DCT != 'true'
      run: |
        docker push ${{ env.ACR_NAME }}/${{ env.IMAGE_REPO }} --all-tags
        RED='\033[0;31m'
        echo -e "${RED}#############" \
        "\n${RED}#" \
        "\n${RED}#  UNSIGNED" \
        "\n${RED}#" \
        "\n${RED}#############"
      shell: bash

    - name: Whitelist GitHub action runner in function app slot
      id: ip-whitelist-create
      run: |
        RUNNER_IP="$(dig +short myip.opendns.com @resolver1.opendns.com)"
        echo "::add-mask::$RUNNER_IP"
        az functionapp config access-restriction add \
          -g ${{ env.RESOURCE_GROUP }} \
          -n ${{ env.FUNCTION_APP }} \
          --slot candidate \
          --rule-name GitHubActionIPV4 \
          --description "Whitelist GitHub action runner" \
          --action Allow \
          --ip-address $RUNNER_IP \
          --priority 750 \
          > /dev/null
      shell: bash

    - name: Pre-deploy image details
      run: |
        echo "## 🔨 BUILD 🔨" >> $GITHUB_STEP_SUMMARY
        echo "* **IMAGE:** \`${{ env.ACR_NAME }}/${{ env.IMAGE_REPO }}:${{ env.TAG }}\`" >> $GITHUB_STEP_SUMMARY
        active_image=$(az functionapp config container show --name ${{ env.FUNCTION_APP }} \
        --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='DOCKER_CUSTOM_IMAGE_NAME'].{image:value}" -o tsv)
        candidate_image=$(az functionapp config container show --name ${{ env.FUNCTION_APP }} \
        --resource-group ${{ env.RESOURCE_GROUP }} --slot candidate --query "[?name=='DOCKER_CUSTOM_IMAGE_NAME'].{image:value}" -o tsv)
        echo "## 🚀 PRE-DEPLOY 🚀" >> $GITHUB_STEP_SUMMARY
        echo "* ACTIVE IMAGE: \`$active_image\`" >> $GITHUB_STEP_SUMMARY
        echo "* CANDIDATE IMAGE: \`$candidate_image\`" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Production slot details
      id: prod-slot-details
      run: |
        SWAP_UTC=$(az functionapp deployment slot list \
        --name ${{ env.FUNCTION_APP }} --resource-group ${{ env.RESOURCE_GROUP }} \
        --query "[].{timestampUtc:slotSwapStatus.timestampUtc}" --output tsv)
        echo "swap_utc=$SWAP_UTC" >> $GITHUB_OUTPUT
      shell: bash

    - name: Deploy to candidate slot
      id: deploy-candidate
      run: |
        az functionapp config container set -n ${{ env.FUNCTION_APP }} \
        -g ${{ env.RESOURCE_GROUP }} --slot candidate \
        --image ${{ env.ACR_NAME }}/${{ env.IMAGE_REPO }}:${{ env.TAG }}
      shell: bash

    - name: Pre-swap image details
      run: |
        echo "## ♻️ PRE-SWAP ♻️" >> $GITHUB_STEP_SUMMARY
        active_image=$(az functionapp config container show --name ${{ env.FUNCTION_APP }} \
        --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='DOCKER_CUSTOM_IMAGE_NAME'].{image:value}" -o tsv)
        candidate_image=$(az functionapp config container show --name ${{ env.FUNCTION_APP }} \
        --resource-group ${{ env.RESOURCE_GROUP }} --slot candidate --query "[?name=='DOCKER_CUSTOM_IMAGE_NAME'].{image:value}" -o tsv)
        echo "* ACTIVE IMAGE: \`$active_image\`" >> $GITHUB_STEP_SUMMARY
        echo "* **CANDIDATE IMAGE:** \`$candidate_image\`" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Promote candidate slot
      id: promote-candidate
      working-directory: operations
      run: |
        make \
          TF_ENV=${{ env.TERRAFORM_ENV }} \
          AZ_RESOURCE_PREFIX=${{ env.IMAGE_REPO }} \
          AZ_RESOURCE_GROUP=${{ env.RESOURCE_GROUP }} \
          zdd-promote-slot
      shell: bash

    - name: Post-swap image details
      run: |
        echo "## ♻️ POST-SWAP ♻️" >> $GITHUB_STEP_SUMMARY
        active_image=$(az functionapp config container show --name ${{ env.FUNCTION_APP }} \
        --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='DOCKER_CUSTOM_IMAGE_NAME'].{image:value}" -o tsv)
        candidate_image=$(az functionapp config container show --name ${{ env.FUNCTION_APP }} \
        --resource-group ${{ env.RESOURCE_GROUP }} --slot candidate --query "[?name=='DOCKER_CUSTOM_IMAGE_NAME'].{image:value}" -o tsv)
        echo "* **ACTIVE IMAGE:** \`$active_image\`" >> $GITHUB_STEP_SUMMARY
        echo "* CANDIDATE IMAGE: \`$candidate_image\`" >> $GITHUB_STEP_SUMMARY
      shell: bash

    - name: Pass if slot swap completes
      if: inputs.env-name == 'staging' || inputs.env-name == 'prod'
      run: |
        NEW_SWAP_UTC=$(az functionapp deployment slot list \
        --name ${{ env.FUNCTION_APP }} --resource-group ${{ env.RESOURCE_GROUP }} \
        --query "[].{timestampUtc:slotSwapStatus.timestampUtc}" --output tsv)

        if [[ $NEW_SWAP_UTC > ${{ steps.prod-slot-details.outputs.swap_utc }} ]]; then
          echo "## ✅ Function App slot swap successful! ✅" >> $GITHUB_STEP_SUMMARY
          echo "* Old slot UTC: \`${{ steps.prod-slot-details.outputs.swap_utc }}\`" >> $GITHUB_STEP_SUMMARY
          echo "* New slot UTC: \`$NEW_SWAP_UTC\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Function App slot swap failed! ❌" >> $GITHUB_STEP_SUMMARY
          echo "* Old slot UTC: \`${{ steps.prod-slot-details.outputs.swap_utc }}\`" >> $GITHUB_STEP_SUMMARY
          echo "* New slot UTC: \`$NEW_SWAP_UTC\`" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
      shell: bash

    - name: Validate function app checksum
      if: inputs.checksum-validation == 'true'
      uses: JosiahSiegel/checksum-validate-action@f14bb2ae5ca3cb0b61ba697885cb501368242d93
      with:
        key: backend
        validate: true
        fail-invalid: false
        input: $(az functionapp config appsettings list -g prime-data-hub-${{ inputs.env-name }} -n pdh${{ inputs.env-name }}-functionapp -o tsv | sort)

    - name: Remove GitHub action IP whitelist
      if: ${{ always() }} # This should happen even on a failure
      id: ip-whitelist-destroy
      run: |
        az functionapp config access-restriction remove \
        -g ${{ env.RESOURCE_GROUP }} \
        -n ${{ env.FUNCTION_APP }} \
        --slot candidate \
        --rule-name GitHubActionIPV4 \
        > /dev/null 
      shell: bash
