inputs:
  - name: resourceGroupName
    type: string
  - name: functionAppName
    type: string
  - name: functionName
    type: string
  - name: subscription
    type: string
  - name: EnvName
    type: string
steps:
  - task: AzurePowerShell@4
    displayName: 'Check if Function App Exists'
    inputs:
      TargetAzurePs: latestVersion
      scriptType: inlineScript
      # Sets the 'DoesAppExist' variable for use in subsequent task.
      inline: |
        $funcApp = Get-AzFunctionApp -ResourceGroupName ${{ inputs.resourceGroupName }} -Name ${{ inputs.functionAppName }}
        $doesAppExist = ($funcApp -ne $null)
        Write-Host "##vso[task.setvariable variable=DoesAppExist]$doesAppExist"
  - task: AzureAppServiceSettings@1
    displayName: 'Start Function App'
    condition: eq(variables.DoesAppExist, true)
    inputs:
      azureSubscription: '$(inputs.subscription)-${{ inputs.envName }}'
      appName: ${{ inputs.functionAppName }}
      appSettings: |
        [
          {
            "name": "AzureWebJobs.${{ inputs.functionName }}.Enabled",
            "value": true,
            "slotSetting": false
          }
        ]