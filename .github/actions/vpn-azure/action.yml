# action.yml
name: 'VPN Azure'
description: 'Connect to VPN and login to Azure'
inputs:
  tls-key:
    description: "TLS key"
  ca-cert:
    description: "CA cert"
    default: false
  user-crt:
    description: "User cert"
  user-key:
    description: "User key"
  sp-creds:
    description: "Azure Service Principal creds"
  env-name:
    required: true
  tf-auth:
    description: "Set Terraform auth env variables. True or False"
    default: false
  dns-ip:
    description: 'VPN DNS IP'
    default: '127.0.0.1'

runs:
  using: "composite"
  steps:

    - name: Install OpenVPN
      if: inputs.ca-cert != 'false'
      run: |
        sudo apt-get update
        sudo apt-get install openvpn
        sudo apt-get install openvpn-systemd-resolved
      shell: bash

    - name: Update VPN DNS IP
      if: inputs.dns-ip != '127.0.0.1' && inputs.ca-cert != 'false'
      run: |
        sed -i "s/\(dhcp-option DNS \).*/\1${{ inputs.dns-ip }}/" .github/vpn/${{ inputs.env-name }}.ovpn
      shell: bash

    - uses: josiahsiegel/action-connect-ovpn@794339aff94452216c97f609476c367a43a31295
      if: inputs.env-name && inputs.ca-cert != 'false'
      id: connect_vpn
      with:
        FILE_OVPN: .github/vpn/${{ inputs.env-name }}.ovpn
        TLS_KEY: ${{ inputs.tls-key }}
        PING_URL: ${{ inputs.dns-ip }}
      env:
        CA_CRT: ${{ inputs.ca-cert}}
        USER_CRT: ${{ inputs.user-crt }}
        USER_KEY: ${{ inputs.user-key }}

    - name: VPN Status
      if: inputs.env-name && inputs.ca-cert != 'false'
      run: |
        if [[ ${{ steps.connect_vpn.outputs.STATUS }} == 'true' ]]; then
          echo "## ✅ VPN connected: \`${{ steps.connect_vpn.outputs.STATUS }}\` ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ VPN connected: \`${{ steps.connect_vpn.outputs.STATUS }}\` ❌" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
      shell: bash

    - uses: azure/login@8c334a195cbb38e46038007b304988d888bf676a
      if: inputs.sp-creds
      with:
        creds: ${{ inputs.sp-creds }}

    - name: Terraform Auth
      if: inputs.tf-auth == 'true' && inputs.sp-creds
      env:
        AZURE_CREDENTIALS: ${{ inputs.sp-creds }}
      run: |
        # Parse Azure secret into Terraform variables
        $servicePrincipal = ($env:AZURE_CREDENTIALS | ConvertFrom-Json)
        $env:ARM_CLIENT_ID = $servicePrincipal.clientId
        $env:ARM_CLIENT_SECRET = $servicePrincipal.clientSecret
        $env:ARM_SUBSCRIPTION_ID = $servicePrincipal.subscriptionId
        $env:ARM_TENANT_ID = $servicePrincipal.tenantId
          
        # Save environment variable setup for subsequent steps
        Get-ChildItem -Path Env: -Recurse -Include ARM_* | ForEach-Object {Write-Output "$($_.Name)=$($_.Value)"} >> $env:GITHUB_ENV
      shell: pwsh
