# action.yml
name: 'Demo Environment'
description: 'Provision and deploy a demo environment'
inputs:
  env-name:
    required: true
    description: "Environment name"
  destroy:
    description: "Destroy demo env. true or false"
    default: false
  github-token:
    required: false

runs:
  using: "composite"
  steps:

    - name: Get runner ip
      id: runner_ip
      uses: ./.github/actions/runner-ip

    - name: Terraform - init
      working-directory: operations/app/terraform/vars/demo
      run: |
        terraform init \
        -reconfigure \
        -var-file=${{ inputs.env-name }}/env.tfvars.json \
        -var='terraform_caller_ip_address=["162.224.209.174", "24.163.118.70", "75.191.122.59", "108.48.23.191", "${{ steps.runner_ip.outputs.ip-address }}"]' \
        -backend-config=${{ inputs.env-name }}/env.tfbackend
      shell: bash

    - name: Terraform - destroy
      if: inputs.destroy == 'true'
      uses: nick-fields/retry@b4fa57557dda8c2f30bcb2d19372cc3237190f7f
      with:
        timeout_minutes: 30
        max_attempts: 3
        retry_wait_seconds: 180
        command: |
          for i in {1..3}; do \
          terraform -chdir=operations/app/terraform/vars/demo destroy \
          -var-file=${{ inputs.env-name }}/env.tfvars.json \
          -target=module.app_service_plan \
          -target=module.application_insights \
          -target=module.container_registry \
          -target=module.database \
          -target=module.function_app \
          -target=module.log_analytics_workspace \
          -target=module.sftp_container \
          -target=module.storage \
          -refresh=false \
          -auto-approve; 2>&1; \
          sleep 60; \
          done

          az monitor diagnostic-settings delete --name 'pdh${{ inputs.env-name }}-postgres_server-diag' \
          --resource 'pdh${{ inputs.env-name }}-pgsql' --resource-group prime-data-hub-${{ inputs.env-name }} --resource-type 'microsoft.dbforpostgresql/servers' --verbose

          az monitor diagnostic-settings delete --name 'pdh${{ inputs.env-name }}-service_plan-diag' \
          --resource 'pdh${{ inputs.env-name }}-serviceplan' --resource-group prime-data-hub-${{ inputs.env-name }} --resource-type 'microsoft.web/serverfarms' --verbose

          terraform -chdir=$path destroy -var-file=$env/env.tfvars.json \
          -target=module.log_analytics_workspace.data.azurerm_monitor_diagnostic_categories.diagnostics[\"postgres_server\"]
          terraform -chdir=$path destroy -var-file=$env/env.tfvars.json \
          -target=module.log_analytics_workspace.data.azurerm_monitor_diagnostic_categories.diagnostics[\"service_plan\"]

          resources="$(az resource list --resource-group prime-data-hub-${{ inputs.env-name }} --query "[?contains(type, 'AlertRules') \
          || contains(type, 'server') || contains(type, 'nsights') || contains(name, 'sftp') \
          || contains(name, 'functionapp')].id" | jq -r '.[] | @base64')"
          for id in $resources; do \
            echo \"$id\" | jq '@base64d' | xargs az resource delete --resource-group prime-data-hub-${{ inputs.env-name }} --verbose --ids | sleep 1; \
          done
        shell: bash

    - name: Terraform - validate
      if: inputs.destroy == 'false'
      working-directory: operations/app/terraform/vars/demo
      run: terraform validate
      shell: bash

    - name: Terraform - apply
      if: inputs.destroy == 'false'
      uses: nick-fields/retry@b4fa57557dda8c2f30bcb2d19372cc3237190f7f
      with:
        timeout_minutes: 45
        max_attempts: 3
        retry_wait_seconds: 180
        command: |
          for i in {1..3}; do \
          terraform -chdir=operations/app/terraform/vars/demo apply \
          -target=module.init \
          -var-file=${{ inputs.env-name }}/env.tfvars.json \
          -var='terraform_caller_ip_address=["162.224.209.174", "24.163.118.70", "75.191.122.59", "108.48.23.191", "${{ steps.runner_ip.outputs.ip-address }}"]' \
          -auto-approve; \
          sleep 60; \
          done

          for i in {1..3}; do \
          terraform -chdir=operations/app/terraform/vars/demo apply \
          -var-file=${{ inputs.env-name }}/env.tfvars.json \
          -var='terraform_caller_ip_address=["162.224.209.174", "24.163.118.70", "75.191.122.59", "108.48.23.191", "${{ steps.runner_ip.outputs.ip-address }}"]' \
          -auto-approve; \
          sleep 120; \
          done
        shell: bash

    - name: Optimize db server size before restore
      if: inputs.github-token && inputs.destroy == 'false'
      shell: bash
      run: |
        az postgres server update -g prime-data-hub-${{ inputs.env-name }} \
        -n pdh${{ inputs.env-name }}-pgsql --sku-name GP_Gen5_32

    - env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        ENV_NAME: ${{ inputs.env-name }}
      run: |
        gh workflow run "Restore databases" \
        -f backup_from=test \
        -f restore_to=$ENV_NAME \
        -f backup_age_limit_mins=2880 \
        -f restore_ignore_backup_age=true \
        --ref josiahsiegel/create/demo-tf \
        -f databases='[\"prime_data_hub\",\"prime_data_hub_candidate\"]'

        sleep 10;
      if: inputs.github-token && inputs.destroy == 'false'
      shell: bash

    - name: Await the completion of DB restores
      if: inputs.github-token && inputs.destroy == 'false'
      uses: Codex-/await-local-workflow-run@v1.3.1
      with:
        token: ${{ inputs.github-token }}
        workflow: restore_databases.yml
        timeout_mins: 300
        poll_interval_ms: 120000

    - name: Optimize db server size after restore
      if: inputs.github-token && inputs.destroy == 'false'
      shell: bash
      run: |
        az postgres server update -g prime-data-hub-${{ inputs.env-name }} \
        -n pdh${{ inputs.env-name }}-pgsql --sku-name GP_Gen5_4
