# action.yml
name: "Build Backend"
description: "Build backend router"
inputs:
  version:
    description: "Version tag"
    required: true
  upload-build:
    default: true
  run-integration-tests:
    default: false
  run-qc:
    default: false
  github-token:
    default: false
  sp-creds:
    description: "Azure Service Principal creds"
  skip-schema-validation:
    description: "Skip schema validation step"
    default: true
  integration-test-forks:
    description: "Number of parallel forks for integration tests (auto-detect if not specified)"
    required: false
    default: "auto"

runs:
  using: "composite"
  steps:
    # These are for CI and not credentials of any system
    - name: Set Environment Variables
      working-directory: prime-router
      shell: bash
      run: |
        echo >> $GITHUB_ENV DB_USER='prime'
        echo >> $GITHUB_ENV DB_PASSWORD='changeIT!'

    - name: Remove unnecessary software
      shell: bash
      run: |
        sudo rm -rf /usr/local/lib/android

    - name: Set up JDK 17
      uses: actions/setup-java@b36c23c0d998641eff861008f374ee103c25ac73
      with:
        java-version: "17"
        distribution: "temurin"
        cache: "gradle"

    - uses: gradle/actions/setup-gradle@d156388eb19639ec20ade50009f3d199ce1e2808

    - name: Lint
      if: inputs.run-integration-tests == 'true'
      run: ./gradlew :prime-router:ktlintCheck
      shell: bash

    - name: Spin up build containers
      working-directory: prime-router
      shell: bash
      run: docker compose -f docker-compose.postgres.yml up -d

    - name: Build Prime Router Package
      uses: ./.github/actions/retry
      with:
        timeout_minutes: 30
        max_attempts: 2
        retry_wait_seconds: 30
        command: |
          ./gradlew :prime-router:package -x fatjar -Pshowtests
        shell: bash

    - name: Tar router files
      if: inputs.upload-build == 'true'
      working-directory: prime-router
      shell: bash
      run: tar -czvf prime-router-build.tar.gz build

    - name: Login into Azure
      if: inputs.run-integration-tests == 'true' && inputs.sp-creds
      uses: ./.github/actions/vpn-azure
      with:
        sp-creds: ${{ inputs.sp-creds }}

    # Allow runner IP for storage testing
    - name: Get runner ip
      if: inputs.run-integration-tests == 'true' && inputs.sp-creds
      id: runner_ip
      uses: ./.github/actions/runner-ip

    - name: Validate translation schemas
      if: inputs.run-integration-tests == 'true' && inputs.sp-creds && !inputs.skip-schema-validation
      uses: ./.github/actions/retry
      with:
        timeout_minutes: 5
        max_attempts: 2
        retry_wait_seconds: 30
        command: |
          az storage account network-rule add -g prime-data-hub-staging --account-name pdhstagingstorageaccount \
          --ip-address ${{ steps.runner_ip.outputs.ip-address }} --output none;
          sleep 10;
          cd prime-router
          bsc=$(az storage account show-connection-string --name pdhstagingstorageaccount --resource-group prime-data-hub-staging \
          --subscription 7d1e3999-6577-4cd5-b296-f518e5c8e677 -o tsv)
          ./prime validateSchemas --schema-type="HL7" --blob-store-connect="$bsc" --blob-store-container="metadata"
          ./prime validateSchemas --schema-type="FHIR" --blob-store-connect="$bsc" --blob-store-container="metadata"
          az storage account network-rule remove -g prime-data-hub-staging --account-name pdhstagingstorageaccount \
          --ip-address ${{ steps.runner_ip.outputs.ip-address }} --output none;
        shell: bash

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/linux@82082dac68ad6a19d980f8ce817e108b9f496c2a
      if: >
        always() &&
        github.event.sender.login != 'dependabot[bot]' &&
        ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
      with:
        # This path is from the root of the repo as needed by the plugin
        files: prime-router/build/test-results/test/**/*.xml

    - name: Spin up vault
      if: inputs.run-integration-tests == 'true'
      working-directory: prime-router
      run: |
        mkdir .vault/env
        touch .vault/env/.env.local
        docker compose -f docker-compose.yml up -d vault
        while [ ! -s .vault/env/.env.local ]; do sleep 1; done
        echo "loaded env vars"
      shell: bash

    - name: Spin up containers
      if: inputs.run-integration-tests == 'true'
      working-directory: prime-router
      id: spin_containers
      run: docker compose -f docker-compose.yml up -d prime_dev sftp azurite azurite-stage
      shell: bash

      # Important to give enough time here in order to avoid a race described in https://github.com/CDCgov/prime-reportstream/issues/13961#issuecomment-2065217386
    - name: Give some time for the container to start
      if: inputs.run-integration-tests == 'true'
      working-directory: prime-router
      run: |
        echo "sleeping 90"
        sleep 90
        echo "wake up"
      shell: bash

    - name: Load the configuration
      if: inputs.run-integration-tests == 'true'
      run: |
        ./gradlew :prime-router:reloadTables
        ./gradlew :prime-router:reloadSettings
      shell: bash

    - name: Configure integration test parallelization
      if: inputs.run-integration-tests == 'true'
      shell: bash
      run: |
        # Auto-detect optimal parallelization based on runner specs
        CORES=$(nproc)
        MEMORY_GB=$(free -g | grep '^Mem' | awk '{print $2}')
        
        if [ "${{ inputs.integration-test-forks }}" = "auto" ]; then
          # Conservative approach: use half the cores, with safety limits
          FORKS=$((CORES / 2))
          FORKS=$(( FORKS > 6 ? 6 : FORKS ))  # Max 6 forks for stability
          FORKS=$(( FORKS < 1 ? 1 : FORKS ))  # Min 1 fork
        else
          FORKS=${{ inputs.integration-test-forks }}
        fi
        
        # Calculate memory per fork (leave some buffer for system)
        MEMORY_PER_FORK=$(( (MEMORY_GB * 80 / 100) / FORKS ))  # 80% of total memory
        MEMORY_PER_FORK=$(( MEMORY_PER_FORK > 3 ? 3 : MEMORY_PER_FORK ))  # Max 3GB per fork
        MEMORY_PER_FORK=$(( MEMORY_PER_FORK < 1 ? 1 : MEMORY_PER_FORK ))  # Min 1GB per fork
        
        echo "INTEGRATION_TEST_FORKS=$FORKS" >> $GITHUB_ENV
        echo "INTEGRATION_TEST_MEMORY=${MEMORY_PER_FORK}g" >> $GITHUB_ENV
        
        echo "🖥️  Runner specifications detected:"
        echo "   CPU cores available: $CORES"
        echo "   Total memory: ${MEMORY_GB}GB"
        echo ""
        echo "🧪 Integration test configuration:"
        echo "   Parallel forks: $FORKS"
        echo "   Memory per fork: ${MEMORY_PER_FORK}GB"
        echo "   Expected speedup: ~$((100 - (100 / FORKS)))% (theoretical)"

    # Integrations tests require the metadata catalog
    - name: Run Integration Tests (Parallel with Resource Optimization)
      if: inputs.run-integration-tests == 'true'
      run: |
        # Create a temporary gradle.properties with parallel settings
        echo "org.gradle.parallel=true" >> gradle.properties
        echo "org.gradle.workers.max=$INTEGRATION_TEST_FORKS" >> gradle.properties
        echo "org.gradle.jvmargs=-Xmx$INTEGRATION_TEST_MEMORY -XX:+UseParallelGC" >> gradle.properties
        
        echo "📝 Gradle parallel configuration:"
        echo "   Max workers: $INTEGRATION_TEST_FORKS"
        echo "   JVM args: -Xmx$INTEGRATION_TEST_MEMORY -XX:+UseParallelGC"
        echo ""
        
        # Run integration tests with parallel configuration
        ./gradlew :prime-router:testIntegration -Pshowtests
      shell: bash

    - name: Publish Integration Test Results
      uses: EnricoMi/publish-unit-test-result-action/linux@82082dac68ad6a19d980f8ce817e108b9f496c2a
      if: >
        always() &&
        github.event.sender.login != 'dependabot[bot]' &&
        ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository ) &&
        inputs.run-integration-tests == 'true'
      with:
        # This path is from the root of the repo as needed by the plugin
        files: prime-router/build/test-results/testIntegration/**/*.xml
        check_name: "Integration Test Results"

    - name: Correct sftp perms
      if: inputs.run-integration-tests == 'true'
      working-directory: prime-router
      run: docker compose exec -T sftp chmod 777 /home/foo/upload
      shell: bash

    - name: Smoke tests
      if: inputs.run-integration-tests == 'true'
      uses: ./.github/actions/retry
      with:
        timeout_minutes: 30
        max_attempts: 2
        retry_wait_seconds: 30
        command: |
          ./gradlew :prime-router:reloadCredentials
          ./gradlew :prime-router:testSmoke
        shell: bash

    - name: Dump docker logs
      if: always() && inputs.run-integration-tests == 'true'
      uses: jwalton/gh-docker-logs@2741064ab9d7af54b0b1ffb6076cf64c16f0220e

    - name: Cleanup Gradle Cache
      if: inputs.run-integration-tests == 'true'
      working-directory: prime-router
      run: |
        rm -f .gradle/caches/modules-2/modules-2.lock
        rm -f .gradle/caches/modules-2/gc.properties
      shell: bash

    - name: Upload Artifact
      if: inputs.upload-build == 'true'
      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874
      with:
        name: prime-router-build-${{ inputs.version }}
        path: prime-router/prime-router-build.tar.gz
        retention-days: 3

    - name: Build Docker Image
      if: inputs.run-qc == 'true'
      working-directory: prime-router
      run: docker build . --file Dockerfile --tag cdcgov/reportstream:latest
      shell: bash
